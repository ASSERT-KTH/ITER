bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  denominator  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	denominator  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	35	None	replace
2	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  denominator  =  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	denominator  =  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	35	None	replace
3	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  denominator  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	denominator  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	35	None	replace
4	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  denominator  =  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE;  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	denominator  =  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE;	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
5	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  numerator,  denominator);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  numerator,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(numerator,  numerator,  denominator);	  int    denominator    =    getDenominator(numerator,    denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
6	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  0,  denominator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  0,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.lastIndexOf('.',  0,  denominator);	  int    denominator    =    toProperString.lastIndexOf('.',    numerator);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
7	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  0);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  0);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.lastIndexOf('.',  0);	  int    denominator    =    toProperString.lastIndexOf('.',    numerator);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
8	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  numerator,  denominator);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  numerator,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.lastIndexOf('.',  numerator,  denominator);	  int    denominator    =    toProperString.lastIndexOf('.',    numerator);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
9	[BUG]  [BUGGY]  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    >=    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
10	[BUG]  [BUGGY]  if(numerator  <  0  ||  denominator  ==  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(numerator  <  0  ||  denominator  ==  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(numerator  <  0  ||  denominator  ==  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    >=    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
11	[BUG]  [BUGGY]  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    >=    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
12	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  gcd);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  gcd);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(numerator,  gcd);	  int    denominator    =    getDenominator(denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
13	[BUG]  [BUGGY]  int  denominator  =  getDenominator(gcd,  numerator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(gcd,  numerator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(gcd,  numerator);	  int    denominator    =    getDenominator(denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
14	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  gcd,  numerator);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(denominator,  gcd,  numerator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(denominator,  gcd,  numerator);	  int    denominator    =    getDenominator(denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
15	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate    	non-compiled	[CE]  unclosed  string  literal	40	None	replace
16	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "Overflow:  can't  negate  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "Overflow:  can't  negate  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "Overflow:  can't  negate	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate    	non-compiled	[CE]  unclosed  string  literal	40	None	replace
17	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
18	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Numerator  <  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Numerator  <  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    <    0    ||    denominator    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
19	[BUG]  [BUGGY]  maticallyQuotedFraction(numerator,  denominator)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  maticallyQuotedFraction(numerator,  denominator)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	maticallyQuotedFraction(numerator,  denominator)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    <    0    ||    denominator    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	23	None	replace
20	[BUG]  [BUGGY]  maticallyNumerate(numerator,  denominator)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  maticallyNumerate(numerator,  denominator)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	maticallyNumerate(numerator,  denominator)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    <    0    ||    denominator    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	23	None	replace
21	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate   ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Numerator  <  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate   ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Numerator  <  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate   ");  }	  if(numerator    <    0    ||    denominator    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
22	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  desominator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  desominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(numerator,  denominator,  desominator);	  int    denominator    =    getDenominator(numerator,    denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
23	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(numerator,  denominator,  gcd);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Integer  denominator  =  getDenominator(numerator,  denominator,  gcd);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Integer  denominator  =  getDenominator(numerator,  denominator,  gcd);	  Integer    denominator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
24	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(numerator,  gcd);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Integer  denominator  =  getDenominator(numerator,  gcd);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Integer  denominator  =  getDenominator(numerator,  gcd);	  Integer    denominator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
25	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(numerator,  denominator,  numerator);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Integer  denominator  =  getDenominator(numerator,  denominator,  numerator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Integer  denominator  =  getDenominator(numerator,  denominator,  numerator);	  Integer    denominator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
26	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(numerator,  0,  denominator);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Integer  denominator  =  getDenominator(numerator,  0,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Integer  denominator  =  getDenominator(numerator,  0,  denominator);	  Integer    denominator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
27	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.indexOf(denominator,  denominator);	  int    denominator    =    toProperString.indexOf(denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
28	[BUG]  [BUGGY]  int  denominator  =  numerator.indexOf(toProperString,  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  numerator.indexOf(toProperString,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  numerator.indexOf(toProperString,  denominator);	  int    denominator    =    toProperString.indexOf(denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
29	[BUG]  [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  not  a  statement	37	None	replace
30	[BUG]  [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritaterator  =  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritaterator  =  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritaterator  =	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  '.class'  expected	37	None	replace
31	[BUG]  [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritaterator  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritaterator  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritaterator	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  not  a  statement	37	None	replace
32	[BUG]  [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritater  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritater  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritater	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  not  a  statement	37	None	replace
33	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  0,  hashCode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  0,  hashCode);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(numerator,  denominator,  0,  hashCode);	  int    denominator    =    getDenominator(numerator,    denominator,    hashCode);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
34	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  0,  numerator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  0,  numerator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(numerator,  denominator,  0,  numerator);	  int    denominator    =    getDenominator(numerator,    denominator,    hashCode);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
35	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(denominator,  gcd);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Integer  denominator  =  getDenominator(denominator,  gcd);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Integer  denominator  =  getDenominator(denominator,  gcd);	  Integer    denominator    =    getDenominator(denominator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
36	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  -  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.length()  -  1;  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.length()  -  1;	  int    denominator    =    toProperString.length();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
37	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.length()  +  1;  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.length()  +  1;	  int    denominator    =    toProperString.length();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
38	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  -  2;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.length()  -  2;  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.length()  -  2;	  int    denominator    =    toProperString.length();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
39	[BUG]  [BUGGY]  Integer  numerator  =  getDenominator(numerator,  denominator,  gcd);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Integer  numerator  =  getDenominator(numerator,  denominator,  gcd);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Integer  numerator  =  getDenominator(numerator,  denominator,  gcd);	  Integer    numerator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
40	[BUG]  [BUGGY]  Integer  numerator  =  getDenominator(numerator,  denominator,  hashCode);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Integer  numerator  =  getDenominator(numerator,  denominator,  hashCode);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Integer  numerator  =  getDenominator(numerator,  denominator,  hashCode);	  Integer    numerator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
41	[BUG]  [BUGGY]  Integer  numerator  =  getDenominator(denominator,  numerator);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Integer  numerator  =  getDenominator(denominator,  numerator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Integer  numerator  =  getDenominator(denominator,  numerator);	  Integer    numerator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
42	[BUG]  [BUGGY]  numerator/=0;  denominator/=1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  numerator/=0;  denominator/=1;  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	numerator/=0;  denominator/=1;	  numerator/=0;    denominator/=2;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
43	[BUG]  [BUGGY]  denominator/=2;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  denominator/=2;  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	denominator/=2;	  numerator/=0;    denominator/=2;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
44	[BUG]  [BUGGY]  int  denominator  =  toProperString.denominatorIndex(numerator);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.denominatorIndex(numerator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.denominatorIndex(numerator);	  int    denominator    =    toProperString.denominatorIndex(denominator);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
45	[BUG]  [BUGGY]  int  denominator  =  toProperString.denominatorIndex(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.denominatorIndex(numerator,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.denominatorIndex(numerator,  denominator);	  int    denominator    =    toProperString.denominatorIndex(denominator);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
46	[BUG]  [BUGGY]  int  denominator  =  toProperString.numeratorIndex(denominator);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.numeratorIndex(denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.numeratorIndex(denominator);	  int    denominator    =    toProperString.denominatorIndex(denominator);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
47	[BUG]  [BUGGY]  int  denominator  =  toProperString.denominatorIndex(denominator,  numerator);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.denominatorIndex(denominator,  numerator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.denominatorIndex(denominator,  numerator);	  int    denominator    =    toProperString.denominatorIndex(denominator);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
48	[BUG]  [BUGGY]  int  denominator  =  toProperString.denominatorChar('.',  denominator);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.denominatorChar('.',  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.denominatorChar('.',  denominator);	  int    denominator    =    toProperString.denominatorChar('.');    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
49	[BUG]  [BUGGY]  int  denominator  =  toProperString.denominatorChar('.',  numerator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.denominatorChar('.',  numerator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.denominatorChar('.',  numerator);	  int    denominator    =    toProperString.denominatorChar('.');    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
50	[BUG]  [BUGGY]  int  denominator  =  toProperString.denominatorChar('.',  0,  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.denominatorChar('.',  0,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.denominatorChar('.',  0,  denominator);	  int    denominator    =    toProperString.denominatorChar('.');    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
51	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  numerator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  numerator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.indexOf('.',  numerator);	  int    denominator    =    toProperString.indexOf('.');    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
52	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  0);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  0);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.indexOf('.',  0);	  int    denominator    =    toProperString.indexOf('.');    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
53	[BUG]  [BUGGY]  maticallyNull(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  maticallyNull(numerator,  denominator);  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	maticallyNull(numerator,  denominator);	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
54	[BUG]  [BUGGY]  int  denominator  =  numerator;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  numerator;  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  numerator;	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
55	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  intValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  intValue();  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Numerator  <  Integer>  numerator  =  intValue();	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
56	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  denominator;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  denominator;  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Numerator  <  Integer>  numerator  =  denominator;	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
57	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");	  if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
58	[BUG]  [BUGGY]  lungullungul(numerator,  denominator))  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  lungullungul(numerator,  denominator))  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	lungullungul(numerator,  denominator))  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	38	None	replace
59	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
60	[BUG]  [BUGGY]  Numerator  <  =  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Numerator  <  =  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Numerator  <  =  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");	  if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
61	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(numerator,  0);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(numerator,  0);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.indexOf(numerator,  0);	  int    denominator    =    toProperString.indexOf(denominator,    0);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
62	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  1);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.indexOf(denominator,  1);	  int    denominator    =    toProperString.indexOf(denominator,    0);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
63	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  0,  denominator);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  0,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.indexOf(denominator,  0,  denominator);	  int    denominator    =    toProperString.indexOf(denominator,    0);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
64	[BUG]  [BUGGY]  denominator  =  getDenominator(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  denominator  =  getDenominator(numerator,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	denominator  =  getDenominator(numerator,  denominator);	  int    denominator    =    getDenominator(denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
65	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(numerator,  numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Integer  denominator  =  getDenominator(numerator,  numerator,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Integer  denominator  =  getDenominator(numerator,  numerator,  denominator);	  Integer    denominator    =    getDenominator(numerator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
66	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  0,  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  0,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.indexOf('.',  0,  denominator);	  int    denominator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
67	[BUG]  [BUGGY]  denominator/=0;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  denominator/=0;  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	denominator/=0;	  denominator/=1;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
68	[BUG]  [BUGGY]  int  denominator  =  numerator,  numerator.getDenominator(denominator);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  numerator,  numerator.getDenominator(denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  numerator,  numerator.getDenominator(denominator);	  int    denominator    =    gcd,    numerator.getDenominator(denominator);    	non-compiled	[CE]  ';'  expected	19	None	replace
69	[BUG]  [BUGGY]  int  denominator  =  whole,  numerator.getDenominator(denominator);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  whole,  numerator.getDenominator(denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  whole,  numerator.getDenominator(denominator);	  int    denominator    =    gcd,    numerator.getDenominator(denominator);    	non-compiled	[CE]  ';'  expected	19	None	replace
70	[BUG]  [BUGGY]  int  denominator  =  whole.numerator,  numerator.getDenominator(denominator);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  whole.numerator,  numerator.getDenominator(denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  whole.numerator,  numerator.getDenominator(denominator);	  int    denominator    =    gcd,    numerator.getDenominator(denominator);    	non-compiled	[CE]  ';'  expected	19	None	replace
71	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator,  numerator);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator,  numerator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.lastIndexOf(denominator,  numerator);	  int    denominator    =    toProperString.lastIndexOf(denominator);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
72	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator,  0);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator,  0);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.lastIndexOf(denominator,  0);	  int    denominator    =    toProperString.lastIndexOf(denominator);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
73	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf(numerator);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf(numerator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.lastIndexOf(numerator);	  int    denominator    =    toProperString.lastIndexOf(denominator);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
74	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator,  gcd);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator,  gcd);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.lastIndexOf(denominator,  gcd);	  int    denominator    =    toProperString.lastIndexOf(denominator);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
75	[BUG]  [BUGGY]  int  denominator  =  gcd.getDenominator(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  gcd.getDenominator(numerator,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  gcd.getDenominator(numerator,  denominator);	  int    denominator    =    gcd.getDenominator(numerator);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
76	[BUG]  [BUGGY]  int  denominator  =  whole.getDenominator(numerator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  whole.getDenominator(numerator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  whole.getDenominator(numerator);	  int    denominator    =    gcd.getDenominator(numerator);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
77	[BUG]  [BUGGY]  int  denominator  =  whole.getDenominator(denominator,  gcd);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  whole.getDenominator(denominator,  gcd);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  whole.getDenominator(denominator,  gcd);	  int    denominator    =    whole.getDenominator(denominator);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
78	[BUG]  [BUGGY]  int  denominator  =  whole.getDenominator(denominator,  numerator);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  whole.getDenominator(denominator,  numerator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  whole.getDenominator(denominator,  numerator);	  int    denominator    =    whole.getDenominator(denominator);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
79	[BUG]  [BUGGY]  int  denominator  =  whole.getDenominator(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  whole.getDenominator(numerator,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  whole.getDenominator(numerator,  denominator);	  int    denominator    =    whole.getDenominator(denominator);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
80	[BUG]  [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritaarily(numerator  =  Integer(numer  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritaarily(numerator  =  Integer(numer  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritaarily(numerator  =  Integer(numer	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  ')'  expected	36	None	replace
81	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(numerator,  denominator,  numerator);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(numerator,  denominator,  numerator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.indexOf(numerator,  denominator,  numerator);	  int    denominator    =    toProperString.indexOf(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
82	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(numerator,  denominator,  gcd);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(numerator,  denominator,  gcd);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.indexOf(numerator,  denominator,  gcd);	  int    denominator    =    toProperString.indexOf(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
83	[BUG]  [BUGGY]  int  denominator  =  getDenominator(0).denominator;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(0).denominator;  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(0).denominator;	  int    denominator    =    getDenominator(0);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
84	[BUG]  [BUGGY]  int  denominator  =  getDenominator(1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(1);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(1);	  int    denominator    =    getDenominator(0);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
85	[BUG]  [BUGGY]  Since(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Since(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Since(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	22	None	replace
86	[BUG]  [BUGGY]  (numerator  <  0)||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  (numerator  <  0)||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	(numerator  <  0)||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	22	None	replace
87	[BUG]  [BUGGY]  (numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)?)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  (numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)?)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)?)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
88	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  gcd,  hashCode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  gcd,  hashCode);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(numerator,  denominator,  gcd,  hashCode);	  int    denominator    =    getDenominator(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
89	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  gcd,  denominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  gcd,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(numerator,  gcd,  denominator);	  int    denominator    =    getDenominator(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
90	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  gcd,  numerator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  gcd,  numerator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(numerator,  denominator,  gcd,  numerator);	  int    denominator    =    getDenominator(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
91	[BUG]  [BUGGY]  if(denominator  <  0  ||  numerator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(denominator  <  0  ||  numerator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(denominator  <  0  ||  numerator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
92	[BUG]  [BUGGY]  if(denominator  <  0  ||  numerator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(denominator  <  0  ||  numerator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(denominator  <  0  ||  numerator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
93	[BUG]  [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
94	[BUG]  [BUGGY]  int  denominator  =  numerator.getDenominator(gcd,  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  numerator.getDenominator(gcd,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  numerator.getDenominator(gcd,  denominator);	  int    denominator    =    gcd.getDenominator(denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
95	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSerializationException( " ");  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  aughtExceptionHandler.throwAsSerializationException( " ");  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	aughtExceptionHandler.throwAsSerializationException( " ");	  if(numerator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
96	[BUG]  [BUGGY]  aughtExceptionHandler(new  ArithmeticException( "Numerator  must  not  be  numeric ",  numerator),  denominator);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  aughtExceptionHandler(new  ArithmeticException( "Numerator  must  not  be  numeric ",  numerator),  denominator);  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	aughtExceptionHandler(new  ArithmeticException( "Numerator  must  not  be  numeric ",  numerator),  denominator);	  if(numerator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
97	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSerialError( "msg.bad.numerator ",  numerator);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  aughtExceptionHandler.throwAsSerialError( "msg.bad.numerator ",  numerator);  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	aughtExceptionHandler.throwAsSerialError( "msg.bad.numerator ",  numerator);	  if(numerator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
98	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSerialError( "msg.bad.denominator ",  numerator);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  aughtExceptionHandler.throwAsSerialError( "msg.bad.denominator ",  numerator);  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	aughtExceptionHandler.throwAsSerialError( "msg.bad.denominator ",  numerator);	  if(numerator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
99	[BUG]  [BUGGY]  int  denominator  =  getDenominator(),  numerator;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(),  numerator;  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(),  numerator;	  int    denominator    =    getDenominator().denominator;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
100	[BUG]  [BUGGY]  int  denominator  =  getDenominator(),  denominator;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(),  denominator;  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(),  denominator;	  int    denominator    =    getDenominator().denominator;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
101	[BUG]  [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritapatternator  =  Integer(numerator  =  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritapatternator  =  Integer(numerator  =  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritapatternator  =  Integer(numerator  =	  if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  '.class'  expected	24	None	replace
102	[BUG]  [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritated  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritated  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritated	  if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  not  a  statement	24	None	replace
103	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  0,  numerator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  0,  numerator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.lastIndexOf('.',  0,  numerator);	  int    denominator    =    toProperString.lastIndexOf('.',    numerator);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
104	[BUG]  [BUGGY]  Numerator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Numerator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Numerator  <  0)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
105	[BUG]  [BUGGY]  matically(numerator)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  matically(numerator)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	matically(numerator)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	25	None	replace
106	[BUG]  [BUGGY]  matically(denominator)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  matically(denominator)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	matically(denominator)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	25	None	replace
107	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  denominator  =  Integer.MIN_VALUE;  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	denominator  =  Integer.MIN_VALUE;	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
108	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE  &&  denominator  <  =  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  denominator  =  Integer.MIN_VALUE  &&  denominator  <  =  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	denominator  =  Integer.MIN_VALUE  &&  denominator  <  =  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
109	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  denominator  =  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE);  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	denominator  =  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE);	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  ';'  expected	35	None	replace
110	[BUG]  [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  foloseste  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  foloseste  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  foloseste	  if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  ';'  expected	22	None	replace
111	[BUG]  [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  foloseste  foloseste  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  foloseste  foloseste  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  foloseste  foloseste	  if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  ';'  expected	22	None	replace
112	[BUG]  [BUGGY]  int  denominator  =  toString.length();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toString.length();  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toString.length();	  int    denominator    =    toProperString.length();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
113	[BUG]  [BUGGY]  int  denominator  =  getDenominatorCount();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominatorCount();  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominatorCount();	  int    denominator    =    getDenominator(0);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
114	[BUG]  [BUGGY]  if(numerator  ==  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(numerator  ==  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(numerator  ==  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    <    0    ||    denominator    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
115	[BUG]  [BUGGY]  numerator  =  0;  denominator  =  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  numerator  =  0;  denominator  =  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	numerator  =  0;  denominator  =  0)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    <    0    ||    denominator    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	23	None	replace
116	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    >=    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	41	None	replace
117	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    >=    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
118	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    >=    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
119	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    >=    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	41	None	replace
120	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  numerator,  denominator);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(denominator,  numerator,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(denominator,  numerator,  denominator);	  int    denominator    =    getDenominator(numerator,    denominator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
121	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(numerator,  desominator);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Integer  denominator  =  getDenominator(numerator,  desominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Integer  denominator  =  getDenominator(numerator,  desominator);	  Integer    denominator    =    getDenominator(denominator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
122	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator,  -denominator);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator,  -denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.lastIndexOf(denominator,  -denominator);	  int    denominator    =    toProperString.lastIndexOf(denominator);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
123	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
124	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  numerator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  numerator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(denominator  ==  Integer.MIN_VALUE  ||  numerator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
125	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  numerator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  numerator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  numerator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
126	[BUG]  [BUGGY]  DesertionFailedError  e  =  getReducedFraction(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  DesertionFailedError  e  =  getReducedFraction(numerator,  denominator);  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	DesertionFailedError  e  =  getReducedFraction(numerator,  denominator);	  if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
127	[BUG]  [BUGGY]  DesertionFailedToNegative(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  DesertionFailedToNegative(numerator,  denominator);  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	DesertionFailedToNegative(numerator,  denominator);	  if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
128	[BUG]  [BUGGY]  Numerator  denominator  =  getDenominator(numerator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Numerator  denominator  =  getDenominator(numerator);  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Numerator  denominator  =  getDenominator(numerator);	  if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
129	[BUG]  [BUGGY]  Numerator  denominator  =  numerator;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Numerator  denominator  =  numerator;  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Numerator  denominator  =  numerator;	  if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
130	[BUG]  [BUGGY]  int  denominator  =  gcd,  whole.getDenominator(denominator);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  gcd,  whole.getDenominator(denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  gcd,  whole.getDenominator(denominator);	  int    denominator    =    gcd,    numerator.getDenominator(denominator);    	non-compiled	[CE]  ';'  expected	19	None	replace
131	[BUG]  [BUGGY]  int  denominator  =  gcd,  numerator.getDenominator(denominator  +  1);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  gcd,  numerator.getDenominator(denominator  +  1);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  gcd,  numerator.getDenominator(denominator  +  1);	  int    denominator    =    gcd,    numerator.getDenominator(denominator);    	non-compiled	[CE]  ';'  expected	19	None	replace
132	[BUG]  [BUGGY]  int  denominator  =  getDenominator().denominator  +  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator().denominator  +  1;  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator().denominator  +  1;	  int    denominator    =    getDenominator().denominator;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
133	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  desominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  desominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.indexOf(denominator,  desominator);	  int    denominator    =    toProperString.indexOf(denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
134	[BUG]  [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  ';'  expected	36	None	replace
135	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  gcd,  hashCode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(denominator,  gcd,  hashCode);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(denominator,  gcd,  hashCode);	  int    denominator    =    getDenominator(denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
136	[BUG]  [BUGGY]  int  denominator  =  toString.indexOf('.',  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toString.indexOf('.',  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toString.indexOf('.',  denominator);	  int    denominator    =    toProperString.indexOf('.');    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
137	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
138	[BUG]  [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste  foloseste	  if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  ';'  expected	24	None	replace
139	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  0,  numerator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  0,  numerator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.indexOf(denominator,  0,  numerator);	  int    denominator    =    toProperString.indexOf(denominator,    0);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
140	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  -1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  -1);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.indexOf('.',  -1);	  int    denominator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
141	[BUG]  [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  foloseste  foloseste  foloseste  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  foloseste  foloseste  foloseste  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  foloseste  foloseste  foloseste	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  ';'  expected	34	None	replace
142	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  -1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  -1);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.lastIndexOf('.',  -1);	  int    denominator    =    toProperString.lastIndexOf('.',    denominator);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
143	[BUG]  [BUGGY]  denominator/=1L;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  denominator/=1L;  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	denominator/=1L;	  denominator/=1;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
144	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  1);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(numerator,  denominator,  1);	  int    denominator    =    getDenominator(numerator,    denominator,    hashCode);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
145	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  numerator,  hashCode);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(denominator,  numerator,  hashCode);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(denominator,  numerator,  hashCode);	  int    denominator    =    getDenominator(numerator,    denominator,    hashCode);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
146	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  0,  gcd);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  0,  gcd);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(numerator,  0,  gcd);	  int    denominator    =    getDenominator(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
147	[BUG]  [BUGGY]  int  denominator  =  whole.getDenominator(denominator,  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  whole.getDenominator(denominator,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  whole.getDenominator(denominator,  denominator);	  int    denominator    =    gcd.getDenominator(denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
148	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  desominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  desominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(numerator,  desominator);	  int    denominator    =    getDenominator(denominator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
149	[BUG]  [BUGGY]  int  denominator  =  getDenominator(2);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(2);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(2);	  int    denominator    =    getDenominator(0);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
150	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
151	[BUG]  [BUGGY]  maticallyTrue(numerator  <  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  maticallyTrue(numerator  <  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	maticallyTrue(numerator  <  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    <    0    ||    denominator    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	23	None	replace
152	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Numerator  <  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Numerator  <  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  if(numerator    <    0    ||    denominator    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
153	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  [Delete]  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	[Delete]	  if(numerator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
154	[BUG]  [BUGGY]  aughtInvalidNumerator(numerator, "overflow:  can't  negate ");  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  aughtInvalidNumerator(numerator, "overflow:  can't  negate ");  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	aughtInvalidNumerator(numerator, "overflow:  can't  negate ");	  if(numerator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
155	[BUG]  [BUGGY]  aughtExceptionHandler(numerator, "overflow:  can't  negate ");  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  aughtExceptionHandler(numerator, "overflow:  can't  negate ");  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	aughtExceptionHandler(numerator, "overflow:  can't  negate ");	  if(numerator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
156	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  desominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  desominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.indexOf('.',  desominator);	  int    denominator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
157	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	39	None	replace
158	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  gcd,  denominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(denominator,  gcd,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(denominator,  gcd,  denominator);	  int    denominator    =    getDenominator(denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
159	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(numerator,  denominator,  indent);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Integer  denominator  =  getDenominator(numerator,  denominator,  indent);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Integer  denominator  =  getDenominator(numerator,  denominator,  indent);	  Integer    denominator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
160	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
161	[BUG]  [BUGGY]  matically(numerator  <  0)||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  matically(numerator  <  0)||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	matically(numerator  <  0)||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  not  a  statement	24	None	replace
162	[BUG]  [BUGGY]  maticallyTrue(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  maticallyTrue(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE);  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	maticallyTrue(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE);	  if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
163	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  if(numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
164	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");	  if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
165	[BUG]  [BUGGY]  matically(numerator  ==  Integer.MIN_VALUE,  denominator))  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  matically(numerator  ==  Integer.MIN_VALUE,  denominator))  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	matically(numerator  ==  Integer.MIN_VALUE,  denominator))  {  throw  new  ArithmeticException( " ");  }	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	36	None	replace
166	[BUG]  [BUGGY]  maticallyTrue(numerator  ==  Integer.MIN_VALUE,  denominator  ==  Integer.MIN_VALUE);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  maticallyTrue(numerator  ==  Integer.MIN_VALUE,  denominator  ==  Integer.MIN_VALUE);  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	maticallyTrue(numerator  ==  Integer.MIN_VALUE,  denominator  ==  Integer.MIN_VALUE);	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
167	[BUG]  [BUGGY]  maticallyTrue(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  maticallyTrue(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	maticallyTrue(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	36	None	replace
168	[BUG]  [BUGGY]  maticallyTrue(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  maticallyTrue(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE);  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	maticallyTrue(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE);	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
169	[BUG]  [BUGGY]  int  denominator  =  toProperString.numeratorChar('.');  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.numeratorChar('.');  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.numeratorChar('.');	  int    denominator    =    toProperString.denominatorChar('.');    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
170	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  0,  gcd);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  0,  gcd);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator(numerator,  denominator,  0,  gcd);	  int    denominator    =    getDenominator(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
171	[BUG]  [BUGGY]  Integer  numerator  =  getDenominator(numerator,  denominator,  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Integer  numerator  =  getDenominator(numerator,  denominator,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Integer  numerator  =  getDenominator(numerator,  denominator,  denominator);	  Integer    numerator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
172	[BUG]  [BUGGY]  Integer  numerator  =  getDenominator(denominator,  denominator);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  Integer  numerator  =  getDenominator(denominator,  denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	Integer  numerator  =  getDenominator(denominator,  denominator);	  Integer    numerator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
173	[BUG]  [BUGGY]  int  denominator  =  getDenominator().denominator  -  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  getDenominator().denominator  -  1;  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  getDenominator().denominator  -  1;	  int    denominator    =    getDenominator().denominator;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
174	[BUG]  [BUGGY]  int  denominator  =  gcd,  numerator.computeDenominator(denominator);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  gcd,  numerator.computeDenominator(denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  gcd,  numerator.computeDenominator(denominator);	  int    denominator    =    gcd,    numerator.getDenominator(denominator);    	non-compiled	[CE]  ';'  expected	19	None	replace
175	[BUG]  [BUGGY]  int  denominator  =  total,  numerator.getDenominator(denominator);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  total,  numerator.getDenominator(denominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  total,  numerator.getDenominator(denominator);	  int    denominator    =    gcd,    numerator.getDenominator(denominator);    	non-compiled	[CE]  ';'  expected	19	None	replace
176	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  desominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  desominator);  [BUGGY]      numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	int  denominator  =  toProperString.lastIndexOf('.',  desominator);	  int    denominator    =    toProperString.lastIndexOf('.',    numerator);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
177	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
178	[BUG]  [BUGGY]  numerator  =  Integer.MIN_VALUE;  denominator  =  Integer.MIN_VALUE;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {      [BUGGY]  numerator  =  Integer.MIN_VALUE;  denominator  =  Integer.MIN_VALUE;  [BUGGY]      }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	numerator  =  Integer.MIN_VALUE;  denominator  =  Integer.MIN_VALUE;	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
