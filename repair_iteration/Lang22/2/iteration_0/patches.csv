bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  numerator/=1;  denominator/=2;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  [BUGGY]  numerator/=1;  denominator/=2;  [BUGGY]  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	numerator/=1;  denominator/=2;	numerator/=2;  denominator/=2;  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  [BUGGY]    [BUGGY]  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	  	numerator/=2;  denominator/=2;  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]    int  denominator  =  getDenominator();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  [BUGGY]    int  denominator  =  getDenominator();  [BUGGY]  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	    int  denominator  =  getDenominator();		non-compiled	[CE]  cannot  find  symbol	4	None	add
4	[BUG]  [BUGGY]    int  denominator  =  getDenominator(numerator);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  [BUGGY]    int  denominator  =  getDenominator(numerator);  [BUGGY]  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	    int  denominator  =  getDenominator(numerator);		non-compiled	[CE]  cannot  find  symbol	4	None	add
5	[BUG]  [BUGGY]    int  denominator  =  toProperString.indexOf(denominator);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  [BUGGY]    int  denominator  =  toProperString.indexOf(denominator);  [BUGGY]  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	    int  denominator  =  toProperString.indexOf(denominator);		non-compiled	[CE]  cannot  find  symbol	4	None	add
6	[BUG]  [BUGGY]    Integer  denominator  =  getDenominator(numerator);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  [BUGGY]    Integer  denominator  =  getDenominator(numerator);  [BUGGY]  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	    Integer  denominator  =  getDenominator(numerator);		non-compiled	[CE]  cannot  find  symbol	4	None	add
7	[BUG]  [BUGGY]    int  denominator  =  toProperString.indexOf(numerator);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  [BUGGY]    int  denominator  =  toProperString.indexOf(numerator);  [BUGGY]  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	    int  denominator  =  toProperString.indexOf(numerator);		non-compiled	[CE]  cannot  find  symbol	4	None	add
8	[BUG]  [BUGGY]    int  denominator  =  getDenominator(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  [BUGGY]    int  denominator  =  getDenominator(numerator,  denominator);  [BUGGY]  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	    int  denominator  =  getDenominator(numerator,  denominator);		non-compiled	[CE]  cannot  find  symbol	4	None	add
9	[BUG]  [BUGGY]    int  denominator  =  getDenominator(denominator);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  [BUGGY]    int  denominator  =  getDenominator(denominator);  [BUGGY]  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	    int  denominator  =  getDenominator(denominator);		non-compiled	[CE]  cannot  find  symbol	4	None	add
10	[BUG]  [BUGGY]    int  denominator  =  gcd.getDenominator(denominator);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  [BUGGY]    int  denominator  =  gcd.getDenominator(denominator);  [BUGGY]  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	    int  denominator  =  gcd.getDenominator(denominator);		non-compiled	[CE]  cannot  find  symbol	4	None	add
11	[BUG]  [BUGGY]  numerator/=1;  denominator/=1;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  [BUGGY]  numerator/=1;  denominator/=1;  [BUGGY]  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	numerator/=1;  denominator/=1;	numerator/=2;  denominator/=2;  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
12	[BUG]  [BUGGY]    int  denominator  =  toProperString.lastIndexOf('.');  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  [BUGGY]    int  denominator  =  toProperString.lastIndexOf('.');  [BUGGY]  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	223	223	2	replace	    int  denominator  =  toProperString.lastIndexOf('.');		non-compiled	[CE]  cannot  find  symbol	4	None	add
