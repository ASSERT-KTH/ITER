bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
3	[BUG]  [BUGGY]  denominator  =  -denominator  %  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  %  2;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  -denominator  %  2;	  denominator    =    -denominator    %    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
4	[BUG]  [BUGGY]  denominator  =  -denominator  %  3;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  %  3;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  -denominator  %  3;	  denominator    =    -denominator    %    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
5	[BUG]  [BUGGY]  denominator  =  -denominator  *  2;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  *  2;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  -denominator  *  2;	  denominator    =    -denominator    *    1;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
6	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  1);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
7	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numerator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numerator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numerator);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
8	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  numerator,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  numerator,  0);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  numerator,  0);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
9	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  numerator,  denominator,  hashCode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  numerator,  denominator,  hashCode);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  numerator,  denominator,  hashCode);	  int    denominator    =    greatestCommonDivisor(numerator,    numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
10	[BUG]  [BUGGY]  int  whole  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  whole  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  whole  =  greatestCommonDivisor(numerator,  denominator,  hashCode);	  int    whole    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
11	[BUG]  [BUGGY]  int  whole  =  greatestCommonDivisor(numerator,  denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  whole  =  greatestCommonDivisor(numerator,  denominator,  numerator);  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  whole  =  greatestCommonDivisor(numerator,  denominator,  numerator);	  int    whole    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
12	[BUG]  [BUGGY]  int  whole  =  greatestCommonDivisor(denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  whole  =  greatestCommonDivisor(denominator,  numerator);  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  whole  =  greatestCommonDivisor(denominator,  numerator);	  int    whole    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
13	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
14	[BUG]  [BUGGY]  Desominator  <  0)  {  throw  new  ArithmeticException( "denominator:  can't  negate ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Desominator  <  0)  {  throw  new  ArithmeticException( "denominator:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Desominator  <  0)  {  throw  new  ArithmeticException( "denominator:  can't  negate ");  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
15	[BUG]  [BUGGY]  Desominator  <  0)  {  throw  new  ArithmeticException( "desominator:  can't  negate ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Desominator  <  0)  {  throw  new  ArithmeticException( "desominator:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Desominator  <  0)  {  throw  new  ArithmeticException( "desominator:  can't  negate ");  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
16	[BUG]  [BUGGY]  Desominator  <  0)  {  throw  new  ArithmeticException( "numerator:  can't  negate ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Desominator  <  0)  {  throw  new  ArithmeticException( "numerator:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Desominator  <  0)  {  throw  new  ArithmeticException( "numerator:  can't  negate ");  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
17	[BUG]  [BUGGY]  Desominator  <  0)  {  throw  new  ArithmeticException( "Denominator  is  less  than  1: "  +  denominator);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Desominator  <  0)  {  throw  new  ArithmeticException( "Denominator  is  less  than  1: "  +  denominator);  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Desominator  <  0)  {  throw  new  ArithmeticException( "Denominator  is  less  than  1: "  +  denominator);  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
18	[BUG]  [BUGGY]  termico  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  termico  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	termico  <  0)  {  throw  new  ArithmeticException( " ");  }	  termico    <    =    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
19	[BUG]  [BUGGY]  termico  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  termico  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	termico  >=  0)  {  throw  new  ArithmeticException( " ");  }	  termico    <    =    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	49	None	replace
20	[BUG]  [BUGGY]  termico  <  =  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  termico  <  =  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	termico  <  =  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  termico    <    =    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
21	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MIN_VALUE  -  1;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  Integer.MIN_VALUE  -  1;	  denominator    =    Integer.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
22	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MIN_VALUE  +  1;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  Integer.MIN_VALUE  +  1;	  denominator    =    Integer.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
23	[BUG]  [BUGGY]  denominator  =  Integer.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MAX_VALUE;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  Integer.MAX_VALUE;	  denominator    =    Integer.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
24	[BUG]  [BUGGY]  int  denominator  =  numerator;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  numerator;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  numerator;	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
25	[BUG]  [BUGGY]  Numerator  denominator  =  numerator;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  numerator;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  denominator  =  numerator;	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
26	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  numerator,  hashCode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  numerator,  hashCode);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  numerator,  hashCode);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
27	[BUG]  [BUGGY]  int  denominator  =  Math.abs(denominator  /  whole);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.abs(denominator  /  whole);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.abs(denominator  /  whole);	  int    denominator    =    Math.abs(denominator    -    whole);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
28	[BUG]  [BUGGY]  int  denominator  =  Math.abs(denominator  -  numerator);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.abs(denominator  -  numerator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.abs(denominator  -  numerator);	  int    denominator    =    Math.abs(denominator    -    whole);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
29	[BUG]  [BUGGY]  int  denominator  =  Math.abs(numerator  -  whole);  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.abs(numerator  -  whole);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.abs(numerator  -  whole);	  int    denominator    =    Math.abs(denominator    -    whole);    	non-compiled	[CE]  unclosed  string  literal	40	None	replace
30	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
31	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numerator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numerator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numerator);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
32	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  numerator,  0);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  numerator,  0);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  numerator,  0);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
33	[BUG]  [BUGGY]  int  denominator  =  Math.abs(numerator  /  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.abs(numerator  /  1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.abs(numerator  /  1);	  int    denominator    =    Math.abs(numerator    -    1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
34	[BUG]  [BUGGY]  int  denominator  =  Math.abs(denominator  /  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.abs(denominator  /  1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.abs(denominator  /  1);	  int    denominator    =    Math.abs(numerator    -    1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
35	[BUG]  [BUGGY]  int  whole  =  greatestCommonDivisor(numerator,  denominator);  if(whole  ==  numerator)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  whole  =  greatestCommonDivisor(numerator,  denominator);  if(whole  ==  numerator)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  whole  =  greatestCommonDivisor(numerator,  denominator);  if(whole  ==  numerator)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  int    whole    =    greatestCommonDivisor(numerator,    denominator);    if(whole    ==    numerator)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
36	[BUG]  [BUGGY]  int  whole  =  greatestCommonDivisor(numerator,  denominator);  if(whole!=  numerator)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  whole  =  greatestCommonDivisor(numerator,  denominator);  if(whole!=  numerator)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  whole  =  greatestCommonDivisor(numerator,  denominator);  if(whole!=  numerator)  {  throw  new  ArithmeticException( " ");  }	  int    whole    =    greatestCommonDivisor(numerator,    denominator);    if(whole    ==    numerator)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
37	[BUG]  [BUGGY]  numerator  /=  gcd;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  /=  gcd;  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	numerator  /=  gcd;	  numerator    /=    denominator;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
38	[BUG]  [BUGGY]  denominator  /=  numerator;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  /=  numerator;  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  /=  numerator;	  numerator    /=    denominator;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
39	[BUG]  [BUGGY]  denominator  =  -denominator  /  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  /  2;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  -denominator  /  2;	  denominator    =    -denominator    /    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
40	[BUG]  [BUGGY]  denominator  =  -denominator  /  3;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  /  3;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  -denominator  /  3;	  denominator    =    -denominator    /    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
41	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator);	  int    denominator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
42	[BUG]  [BUGGY]  denominator  =  -denominator  +  2;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  +  2;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  -denominator  +  2;	  denominator    =    -denominator    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
43	[BUG]  [BUGGY]  int  denominator  =  Math.abs(denominator  /  1,  numerator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.abs(denominator  /  1,  numerator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.abs(denominator  /  1,  numerator);	  int    denominator    =    Math.abs(denominator    -    1,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
44	[BUG]  [BUGGY]  int  denominator  =  Math.abs(numerator  -  1,  numerator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.abs(numerator  -  1,  numerator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.abs(numerator  -  1,  numerator);	  int    denominator    =    Math.abs(denominator    -    1,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
45	[BUG]  [BUGGY]  reason:  throw  new  ArithmeticException( "overflow:  can't  negate   ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  reason:  throw  new  ArithmeticException( "overflow:  can't  negate   ");  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	reason:  throw  new  ArithmeticException( "overflow:  can't  negate   ");	  reason:    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
46	[BUG]  [BUGGY]  reason:  throw  new  ArithmeticException( "Overflow:  can't  negate   ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  reason:  throw  new  ArithmeticException( "Overflow:  can't  negate   ");  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	reason:  throw  new  ArithmeticException( "Overflow:  can't  negate   ");	  reason:    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  numerator,  ZERO);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  numerator,  ZERO);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  numerator,  ZERO);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
48	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  -1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  -1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  -1);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
49	[BUG]  [BUGGY]  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;	  if(denominator    <    0)    {    int    gcd    =    greatestCommonDivisor(numerator,    denominator);    numerator    /=    gcd;    denominator    /=    gcd;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
50	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  <  0)  {  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  <  0  ||  denominator  <  0)  {  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  }  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  <  0  ||  denominator  <  0)  {  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  }	  if(denominator    <    0)    {    int    gcd    =    greatestCommonDivisor(numerator,    denominator);    numerator    /=    gcd;    denominator    /=    gcd;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
51	[BUG]  [BUGGY]  Numerator  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;	  if(denominator    <    0)    {    int    gcd    =    greatestCommonDivisor(numerator,    denominator);    numerator    /=    gcd;    denominator    /=    gcd;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
52	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  <  0)  {  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  <  0  ||  denominator  <  0)  {  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  <  0  ||  denominator  <  0)  {  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;	  if(denominator    <    0)    {    int    gcd    =    greatestCommonDivisor(numerator,    denominator);    numerator    /=    gcd;    denominator    /=    gcd;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
53	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator  -  1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator  -  1);	  int    denominator    =    greatestCommonDivisor(numerator,    desominator);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
54	[BUG]  [BUGGY]  Desominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Desominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Desominator  <  0)  {  throw  new  ArithmeticException( " ");  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
55	[BUG]  [BUGGY]  Desominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Desominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Desominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
56	[BUG]  [BUGGY]  termico  <  0)  {  throw  new  ArithmeticException( "denominator:  can't  negate ");  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  termico  <  0)  {  throw  new  ArithmeticException( "denominator:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	termico  <  0)  {  throw  new  ArithmeticException( "denominator:  can't  negate ");  }	  termico    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
57	[BUG]  [BUGGY]  termico  <  0)  {  throw  new  ArithmeticException( "numerator:  can't  negate ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  termico  <  0)  {  throw  new  ArithmeticException( "numerator:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	termico  <  0)  {  throw  new  ArithmeticException( "numerator:  can't  negate ");  }	  termico    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
58	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  gcd);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  gcd);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  gcd);	  denominator    =    greatestCommonDivisor(numerator,    desominator);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
59	[BUG]  [BUGGY]  int  denominator  =  Math.abs(denominator  *  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.abs(denominator  *  1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.abs(denominator  *  1);	  int    denominator    =    Math.abs(denominator    +    1);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
60	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(denominator,  numerator  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(denominator,  numerator  -  1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(denominator,  numerator  -  1);	  denominator    =    greatestCommonDivisor(numerator,    denominator    -    1);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
61	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator  /  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator  /  1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator  /  1);	  denominator    =    greatestCommonDivisor(numerator,    denominator    -    1);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
62	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  numerator  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  numerator  -  1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  numerator  -  1);	  denominator    =    greatestCommonDivisor(numerator,    denominator    -    1);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
63	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);	  denominator    =    greatestCommonDivisor(numerator,    numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
64	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(denominator,  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(denominator,  numerator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(denominator,  numerator,  denominator);	  denominator    =    greatestCommonDivisor(numerator,    numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
65	[BUG]  [BUGGY]  int  denominator  =  Math.abs(denominator  /  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.abs(denominator  /  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.abs(denominator  /  denominator);	  int    denominator    =    Math.abs(denominator);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
66	[BUG]  [BUGGY]  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;	  if(denominator    <    0)    {    int    gcd    =    greatestCommonDivisor(numerator,    denominator);    numerator    /=    gcd;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
67	[BUG]  [BUGGY]  Integer  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Integer  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Integer  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;	  if(denominator    <    0)    {    int    gcd    =    greatestCommonDivisor(numerator,    denominator);    numerator    /=    gcd;    }    	non-compiled	[CE]  >  expected	47	None	replace
68	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  <  0)  {  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  <  0  ||  denominator  <  0)  {  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  }  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  <  0  ||  denominator  <  0)  {  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  }	  if(denominator    <    0)    {    int    gcd    =    greatestCommonDivisor(numerator,    denominator);    numerator    /=    gcd;    }    	non-compiled	[CE]  >  expected	47	None	replace
69	[BUG]  [BUGGY]  Numerator  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;	  if(denominator    <    0)    {    int    gcd    =    greatestCommonDivisor(numerator,    denominator);    numerator    /=    gcd;    }    	non-compiled	[CE]  >  expected	47	None	replace
70	[BUG]  [BUGGY]  int  denominator  =  Math.abs(numerator  /  1,  denominator);  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.abs(numerator  /  1,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.abs(numerator  /  1,  denominator);	  int    denominator    =    Math.abs(numerator    -    1,    denominator);    	non-compiled	[CE]  >  expected	5	None	replace
71	[BUG]  [BUGGY]  denominator  =  -denominator  /  1L;  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  /  1L;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  -denominator  /  1L;	  denominator    =    -denominator    -    1L;    	non-compiled	[CE]  >  expected	52	None	replace
72	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  >  expected	44	None	replace
73	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  gcd,  denominator);  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  gcd,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  gcd,  denominator);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  >  expected	44	None	replace
74	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  numerator,  gcd);  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  numerator,  gcd);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  numerator,  gcd);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  >  expected	44	None	replace
75	[BUG]  [BUGGY]  int  denominator  =  Math.abs(numerator  *  1);  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.abs(numerator  *  1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.abs(numerator  *  1);	  int    denominator    =    Math.abs(numerator    +    1);    	non-compiled	[CE]  >  expected	6	None	replace
76	[BUG]  [BUGGY]  int  denominator  =  Math.min(numerator,  denominator);  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.min(numerator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.min(numerator,  denominator);	  int    denominator    =    Math.min(denominator,    numerator);    	non-compiled	[CE]  >  expected	51	None	replace
77	[BUG]  [BUGGY]  int  denominator  =  Math.min(denominator,  denominator);  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.min(denominator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.min(denominator,  denominator);	  int    denominator    =    Math.min(denominator,    numerator);    	non-compiled	[CE]  >  expected	51	None	replace
78	[BUG]  [BUGGY]  int  denominator  =  Math.max(numerator,  denominator);  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.max(numerator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.max(numerator,  denominator);	  int    denominator    =    Math.min(denominator,    numerator);    	non-compiled	[CE]  '.class'  expected	51	None	replace
79	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  gcd);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  gcd);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  gcd);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  '.class'  expected	25	None	replace
80	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  numerator,  hashCode);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  numerator,  hashCode);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  numerator,  hashCode);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  '.class'  expected	25	None	replace
81	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(denominator,  numerator,  hashCode);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greaterCommonDivisor(denominator,  numerator,  hashCode);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greaterCommonDivisor(denominator,  numerator,  hashCode);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  '.class'  expected	25	None	replace
82	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  denominator);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  denominator);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  '.class'  expected	26	None	replace
83	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  numerator,  denominator);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  numerator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  numerator,  denominator);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  '.class'  expected	26	None	replace
84	[BUG]  [BUGGY]  Numerator  denominator  =  -1;  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  denominator  =  -1;	  Numerator    denominator    =    -denominator;    	non-compiled	[CE]  '.class'  expected	35	None	replace
85	[BUG]  [BUGGY]  Numerator  denominator  =  -denominator  +  1;  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  -denominator  +  1;  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  denominator  =  -denominator  +  1;	  Numerator    denominator    =    -denominator;    	non-compiled	[CE]  '.class'  expected	35	None	replace
86	[BUG]  [BUGGY]  Denominator  denominator  =  -denominator;  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Denominator  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Denominator  denominator  =  -denominator;	  Numerator    denominator    =    -denominator;    	non-compiled	[CE]  '.class'  expected	35	None	replace
87	[BUG]  [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  denominator  =  greatestCommonDivisor(numerator,  denominator);	  Numerator    denominator    =    greatestCommonDivisor(numerator,    denominator);    numerator    /=    denominator;    	non-compiled	[CE]  '.class'  expected	28	None	replace
88	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  denominator;  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  denominator;  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  denominator;	  Numerator    denominator    =    greatestCommonDivisor(numerator,    denominator);    numerator    /=    denominator;    	non-compiled	[CE]  '.class'  expected	28	None	replace
89	[BUG]  [BUGGY]  termico  <  Integer.MIN_VALUE  ||  termico  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  termico  <  Integer.MIN_VALUE  ||  termico  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	termico  <  Integer.MIN_VALUE  ||  termico  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
90	[BUG]  [BUGGY]  Numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
91	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  0);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  0);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  0);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    ZERO);    	non-compiled	[CE]  '.class'  expected	41	None	replace
92	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  0.0);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  0.0);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  0.0);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    ZERO);    	non-compiled	[CE]  '.class'  expected	41	None	replace
93	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  -1);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  -1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  -1);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    ZERO);    	non-compiled	[CE]  '.class'  expected	41	None	replace
94	[BUG]  [BUGGY]  Integer  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Integer  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Integer  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;	  if(denominator    <    0)    {    int    gcd    =    greatestCommonDivisor(numerator,    denominator);    numerator    /=    gcd;    denominator    /=    gcd;    }    	non-compiled	[CE]  '.class'  expected	46	None	replace
95	[BUG]  [BUGGY]  Numerator  <?>  denominator  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  <?>  denominator  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  <?>  denominator  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;	  if(denominator    <    0)    {    int    gcd    =    greatestCommonDivisor(numerator,    denominator);    numerator    /=    gcd;    denominator    /=    gcd;    }    	non-compiled	[CE]  '.class'  expected	46	None	replace
96	[BUG]  [BUGGY]  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  }  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  }	  if(denominator    <    0)    {    int    gcd    =    greatestCommonDivisor(numerator,    denominator);    numerator    /=    gcd;    denominator    /=    gcd;    }    	non-compiled	[CE]  '.class'  expected	46	None	replace
97	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  desominator);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  desominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  desominator);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  '.class'  expected	15	None	replace
98	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  ZERO,  denominator);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  ZERO,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  ZERO,  denominator);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    ZERO);    	non-compiled	[CE]  '.class'  expected	41	None	replace
99	[BUG]  [BUGGY]  Numerator  denominator  =  getDenominator();  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  getDenominator();  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  denominator  =  getDenominator();	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  '.class'  expected	12	None	replace
100	[BUG]  [BUGGY]  Numerator  denominator  =  getDenominator(numerator);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  getDenominator(numerator);  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  denominator  =  getDenominator(numerator);	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  '.class'  expected	12	None	replace
101	[BUG]  [BUGGY]  denominator  =  -2;  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -2;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  -2;	  denominator    =    -1L;    	non-compiled	[CE]  '.class'  expected	23	None	replace
102	[BUG]  [BUGGY]  Numerator  <  0  {  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  <  0  {  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  }  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  <  0  {  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  }	  if(denominator    <    0)    {    int    gcd    =    greatestCommonDivisor(numerator,    denominator);    numerator    /=    gcd;    }    	non-compiled	[CE]  '.class'  expected	47	None	replace
103	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator);	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  '.class'  expected	34	None	replace
104	[BUG]  [BUGGY]  Desominator  denominator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Desominator  denominator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Desominator  denominator  =  greatestCommonDivisor(numerator,  denominator);	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  '.class'  expected	34	None	replace
105	[BUG]  [BUGGY]  int  denominator  =  Math.min(denominator,  0);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.min(denominator,  0);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.min(denominator,  0);	  int    denominator    =    Math.min(denominator,    numerator);    	non-compiled	[CE]  '.class'  expected	51	None	replace
106	[BUG]  [BUGGY]  int  denominator  =  Math.min(denominator,  -denominator);  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.min(denominator,  -denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.min(denominator,  -denominator);	  int    denominator    =    Math.min(denominator,    numerator);    	non-compiled	[CE]  '.class'  expected	51	None	replace
107	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  -denominator);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  -denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  -denominator);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    ZERO);    	non-compiled	[CE]  '.class'  expected	30	None	replace
108	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  ZERO,  denominator);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  ZERO,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  ZERO,  denominator);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    ZERO);    	non-compiled	[CE]  '.class'  expected	30	None	replace
109	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  '.class'  expected	44	None	replace
110	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	if(denominator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  '.class'  expected	10	None	replace
111	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(denominator,  gcd);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(denominator,  gcd);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(denominator,  gcd);	  denominator    =    greatestCommonDivisor(denominator,    denominator);    	non-compiled	[CE]  '.class'  expected	54	None	replace
112	[BUG]  [BUGGY]  int  denominator  =  Math.abs(numerator  -  1,  denominator  -  1);  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.abs(numerator  -  1,  denominator  -  1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.abs(numerator  -  1,  denominator  -  1);	  int    denominator    =    Math.abs(numerator    -    1,    denominator);    	non-compiled	[CE]  '.class'  expected	5	None	replace
113	[BUG]  [BUGGY]  int  denominator  =  Math.abs(numerator/2,  denominator);  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.abs(numerator/2,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.abs(numerator/2,  denominator);	  int    denominator    =    Math.abs(numerator    -    1,    denominator);    	non-compiled	[CE]  '.class'  expected	5	None	replace
114	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  0.5);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  0.5);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  0.5);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  '.class'  expected	25	None	replace
115	[BUG]  [BUGGY]  numerator  /=  1;  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  /=  1;  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	numerator  /=  1;	  numerator    /=    denominator;    	non-compiled	[CE]  '.class'  expected	1	None	replace
116	[BUG]  [BUGGY]  numerator  /=  2;  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  /=  2;  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	numerator  /=  2;	  numerator    /=    denominator;    	non-compiled	[CE]  '.class'  expected	1	None	replace
117	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator  *  1);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator  *  1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator  *  1);	  denominator    =    greatestCommonDivisor(numerator,    denominator    -    1);    	non-compiled	[CE]  '.class'  expected	45	None	replace
118	[BUG]  [BUGGY]  reason:  throw  new  ArithmeticException( "overflow:  cannot  negate   ");  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  reason:  throw  new  ArithmeticException( "overflow:  cannot  negate   ");  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	reason:  throw  new  ArithmeticException( "overflow:  cannot  negate   ");	  reason:    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  '.class'  expected	7	None	replace
119	[BUG]  [BUGGY]  reason:  throw  new  ArithmeticException( "overflow:  numerator  can't  negate ");  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  reason:  throw  new  ArithmeticException( "overflow:  numerator  can't  negate ");  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	reason:  throw  new  ArithmeticException( "overflow:  numerator  can't  negate ");	  reason:    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  '.class'  expected	7	None	replace
120	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  denominator);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(denominator,  denominator);	  int    denominator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  '.class'  expected	13	None	replace
121	[BUG]  [BUGGY]  int  whole  =  greatestCommonDivisor(numerator,  denominator,  ZERO);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  whole  =  greatestCommonDivisor(numerator,  denominator,  ZERO);  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  whole  =  greatestCommonDivisor(numerator,  denominator,  ZERO);	  int    whole    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  '.class'  expected	11	None	replace
122	[BUG]  [BUGGY]  Denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	36	None	replace
123	[BUG]  [BUGGY]  int  whole  =  greatestCommonDivisor(numerator,  denominator);  if(whole!=  numerator)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  whole  =  greatestCommonDivisor(numerator,  denominator);  if(whole!=  numerator)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  whole  =  greatestCommonDivisor(numerator,  denominator);  if(whole!=  numerator)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  int    whole    =    greatestCommonDivisor(numerator,    denominator);    if(whole    ==    numerator)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  '.class'  expected	32	None	replace
124	[BUG]  [BUGGY]  termico  <  Integer.MIN_VALUE  ||  termico  >=  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  termico  <  Integer.MIN_VALUE  ||  termico  >=  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	termico  <  Integer.MIN_VALUE  ||  termico  >=  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
125	[BUG]  [BUGGY]  termico  <  Integer.MIN_VALUE  &&  termico  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  termico  <  Integer.MIN_VALUE  &&  termico  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	termico  <  Integer.MIN_VALUE  &&  termico  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
126	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator  *  1);  numerator  /=  denominator;  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator  *  1);  numerator  /=  denominator;  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator  *  1);  numerator  /=  denominator;	  int    denominator    =    greatestCommonDivisor(numerator,    denominator    -    1);    numerator    /=    denominator;    	non-compiled	[CE]  '.class'  expected	2	None	replace
127	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  numerator,  denominator);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  numerator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(denominator,  numerator,  denominator);	  int    denominator    =    greatestCommonDivisor(numerator,    numerator,    denominator);    	non-compiled	[CE]  '.class'  expected	14	None	replace
128	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  -1);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  -1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  -1);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  '.class'  expected	53	None	replace
129	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  0L);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  0L);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  0L);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  '.class'  expected	53	None	replace
130	[BUG]  [BUGGY]  denominator  =  -denominator  *  4;  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  *  4;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  -denominator  *  4;	  denominator    =    -denominator    *    1;    	non-compiled	[CE]  '.class'  expected	43	None	replace
131	[BUG]  [BUGGY]  int  denominator  =  Math.abs(denominator  *  1,  numerator);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.abs(denominator  *  1,  numerator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.abs(denominator  *  1,  numerator);	  int    denominator    =    Math.abs(denominator    -    1,    numerator);    	non-compiled	[CE]  '.class'  expected	50	None	replace
132	[BUG]  [BUGGY]  int  denominator  =  Math.abs(denominator  -  1,  numerator  +  1);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.abs(denominator  -  1,  numerator  +  1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.abs(denominator  -  1,  numerator  +  1);	  int    denominator    =    Math.abs(denominator    -    1,    numerator);    	non-compiled	[CE]  '.class'  expected	50	None	replace
133	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  1);  numerator  /=  denominator;  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  1);  numerator  /=  denominator;  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  1);  numerator  /=  denominator;	  int    denominator    =    greatestCommonDivisor(numerator,    0);    numerator    /=    denominator;    	non-compiled	[CE]  '.class'  expected	29	None	replace
134	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  -1);  numerator  /=  denominator;  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  -1);  numerator  /=  denominator;  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  -1);  numerator  /=  denominator;	  int    denominator    =    greatestCommonDivisor(numerator,    0);    numerator    /=    denominator;    	non-compiled	[CE]  '.class'  expected	29	None	replace
135	[BUG]  [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(numerator,  desominator);  numerator  /=  denominator;  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(numerator,  desominator);  numerator  /=  denominator;  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  denominator  =  greatestCommonDivisor(numerator,  desominator);  numerator  /=  denominator;	  Numerator    denominator    =    greatestCommonDivisor(numerator,    denominator);    numerator    /=    denominator;    	non-compiled	[CE]  '.class'  expected	28	None	replace
136	[BUG]  [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(numerator,  denominator);  denominator  /=  denominator;  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(numerator,  denominator);  denominator  /=  denominator;  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  denominator  =  greatestCommonDivisor(numerator,  denominator);  denominator  /=  denominator;	  Numerator    denominator    =    greatestCommonDivisor(numerator,    denominator);    numerator    /=    denominator;    	non-compiled	[CE]  '.class'  expected	28	None	replace
137	[BUG]  [BUGGY]  denominator  =  -denominator  /  4;  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  /  4;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  -denominator  /  4;	  denominator    =    -denominator    /    1;    	non-compiled	[CE]  '.class'  expected	17	None	replace
138	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(denominator,  denominator);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greaterCommonDivisor(denominator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greaterCommonDivisor(denominator,  denominator);	  int    denominator    =    greaterCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  '.class'  expected	20	None	replace
139	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  -denominator);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  -denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  -denominator);	  denominator    =    greatestCommonDivisor(numerator,    desominator);    	non-compiled	[CE]  '.class'  expected	42	None	replace
140	[BUG]  [BUGGY]  denominator  =  -denominator  %  4;  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  %  4;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  -denominator  %  4;	  denominator    =    -denominator    %    1;    	non-compiled	[CE]  '.class'  expected	27	None	replace
141	[BUG]  [BUGGY]  denominator  -=  numerator;  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  -=  numerator;  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  -=  numerator;	  denominator    =    numerator;    	non-compiled	[CE]  '.class'  expected	9	None	replace
142	[BUG]  [BUGGY]  Numerator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
143	[BUG]  [BUGGY]  numerator  /=  ZERO;  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  /=  ZERO;  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	numerator  /=  ZERO;	  numerator    /=    denominator;    	non-compiled	[CE]  '.class'  expected	1	None	replace
144	[BUG]  [BUGGY]  int  denominator  =  Math.abs(denominator  -  1,  denominator);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.abs(denominator  -  1,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.abs(denominator  -  1,  denominator);	  int    denominator    =    Math.abs(denominator    -    1,    numerator);    	non-compiled	[CE]  '.class'  expected	50	None	replace
145	[BUG]  [BUGGY]  int  whole  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  whole  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  whole  =  greatestCommonDivisor(numerator,  denominator,  denominator);	  int    whole    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  '.class'  expected	11	None	replace
146	[BUG]  [BUGGY]  termico  <  0)  {  throw  new  ArithmeticException( "denominator  can't  negate ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  termico  <  0)  {  throw  new  ArithmeticException( "denominator  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	termico  <  0)  {  throw  new  ArithmeticException( "denominator  can't  negate ");  }	  termico    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  	48	None	replace
147	[BUG]  [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  '.class'  expected	10	None	replace
148	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	if(denominator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  '.class'  expected	10	None	replace
149	[BUG]  [BUGGY]  DesertionFailedToDenominator  <  0)  {  throw  new  ArithmeticException( "numerator:  can't  negate ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFailedToDenominator  <  0)  {  throw  new  ArithmeticException( "numerator:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	DesertionFailedToDenominator  <  0)  {  throw  new  ArithmeticException( "numerator:  can't  negate ");  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	36	None	replace
150	[BUG]  [BUGGY]  Denominator  <  0)  {  throw  new  ArithmeticException( "numerator:  can't  negate ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Denominator  <  0)  {  throw  new  ArithmeticException( "numerator:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Denominator  <  0)  {  throw  new  ArithmeticException( "numerator:  can't  negate ");  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	36	None	replace
151	[BUG]  [BUGGY]  Denominator  <  0)  {  throw  new  ArithmeticException( "denominator:  can't  negate ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Denominator  <  0)  {  throw  new  ArithmeticException( "denominator:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Denominator  <  0)  {  throw  new  ArithmeticException( "denominator:  can't  negate ");  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	36	None	replace
152	[BUG]  [BUGGY]  numerator  =  numerator;  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  numerator;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	numerator  =  numerator;	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  '.class'  expected	12	None	replace
153	[BUG]  [BUGGY]  numerator  =  -denominator;  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	numerator  =  -denominator;	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  '.class'  expected	12	None	replace
154	[BUG]  [BUGGY]  if(denominator  <  0)  {  denominator  =  greatestCommonDivisor(numerator,  0);  numerator  /=  denominator;  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  <  0)  {  denominator  =  greatestCommonDivisor(numerator,  0);  numerator  /=  denominator;  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	if(denominator  <  0)  {  denominator  =  greatestCommonDivisor(numerator,  0);  numerator  /=  denominator;  }	  int    denominator    =    greatestCommonDivisor(numerator,    0);    numerator    /=    denominator;    	non-compiled	[CE]  '.class'  expected	29	None	replace
155	[BUG]  [BUGGY]  int  denominator  =  Math.abs(numerator  -  denominator);  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.abs(numerator  -  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.abs(numerator  -  denominator);	  int    denominator    =    Math.abs(denominator    -    whole);    	non-compiled	[CE]  '.class'  expected	40	None	replace
156	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  toProperString);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  toProperString);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  toProperString);	  denominator    =    greatestCommonDivisor(numerator,    numerator,    denominator);    	non-compiled	[CE]  '.class'  expected	21	None	replace
157	[BUG]  [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(denominator,  numerator);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(denominator,  numerator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  denominator  =  greatestCommonDivisor(denominator,  numerator);	  Numerator    denominator    =    greatestCommonDivisor(numerator,    denominator);    numerator    /=    denominator;    	non-compiled	[CE]  '.class'  expected	28	None	replace
158	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  numerator,  0);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  numerator,  0);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  greatestCommonDivisor(denominator,  numerator,  0);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  '.class'  expected	31	None	replace
159	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator  +  1);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator  +  1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator  +  1);	  denominator    =    greatestCommonDivisor(numerator,    denominator    -    1);    	non-compiled	[CE]  '.class'  expected	45	None	replace
160	[BUG]  [BUGGY]  termico  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate   ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  termico  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate   ");  }  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	termico  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate   ");  }	  termico    <    =    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
161	[BUG]  [BUGGY]  Numerator  <  Integer>  denominator  =  new  Integer(numerator);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  <  Integer>  denominator  =  new  Integer(numerator);  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  <  Integer>  denominator  =  new  Integer(numerator);	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  '.class'  expected	33	None	replace
162	[BUG]  [BUGGY]  aughtExceptionHandler(numerator, "overflow:  can't  negate ");  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  aughtExceptionHandler(numerator, "overflow:  can't  negate ");  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	aughtExceptionHandler(numerator, "overflow:  can't  negate ");	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  '.class'  expected	33	None	replace
163	[BUG]  [BUGGY]  Numerator  <  Integer>  denominator  =  getDenominator();  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  <  Integer>  denominator  =  getDenominator();  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  <  Integer>  denominator  =  getDenominator();	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  '.class'  expected	33	None	replace
164	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(denominator,  numerator,  0);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(denominator,  numerator,  0);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(denominator,  numerator,  0);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  '.class'  expected	53	None	replace
165	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  denominator);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  denominator);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  denominator);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  '.class'  expected	44	None	replace
166	[BUG]  [BUGGY]  int  denominator  =  Math.min(denominator,  numerator  -  1);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  Math.min(denominator,  numerator  -  1);  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  denominator  =  Math.min(denominator,  numerator  -  1);	  int    denominator    =    Math.min(denominator,    numerator);    	non-compiled	[CE]  '.class'  expected	51	None	replace
167	[BUG]  [BUGGY]  denominator  =(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MIN_VALUE)?  numerator  :  0;  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MIN_VALUE)?  numerator  :  0;  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	denominator  =(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MIN_VALUE)?  numerator  :  0;	  denominator    =    0;    	non-compiled	[CE]  '.class'  expected	8	None	replace
168	[BUG]  [BUGGY]  Numerator  denominator  =  -denominator  -  1;  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  -denominator  -  1;  [BUGGY]      denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	Numerator  denominator  =  -denominator  -  1;	  Numerator    denominator    =    -denominator;    	non-compiled	[CE]  '.class'  expected	35	None	replace
169	[BUG]  [BUGGY]  int  whole  =  greatestCommonDivisor(denominator,  numerator);  if(whole  ==  numerator)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  whole  =  greatestCommonDivisor(denominator,  numerator);  if(whole  ==  numerator)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	231	231	2	replace	int  whole  =  greatestCommonDivisor(denominator,  numerator);  if(whole  ==  numerator)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  int    whole    =    greatestCommonDivisor(numerator,    denominator);    if(whole    ==    numerator)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  '.class'  expected	32	None	replace
