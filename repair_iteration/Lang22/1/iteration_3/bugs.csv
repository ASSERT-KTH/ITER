bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numerator. ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numerator. ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  numerator  must  not  be  numerator. ");	  throw    new    ArithmeticException(   "The    denominator    must    not    be    numerator.   ");    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
2	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  desominator  must  not  be  numerator. ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  desominator  must  not  be  numerator. ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  desominator  must  not  be  numerator. ");	  throw    new    ArithmeticException(   "The    denominator    must    not    be    numerator.   ");    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
3	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(denominator,  gcd);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Integer  denominator  =  getDenominator(denominator,  gcd);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Integer  denominator  =  getDenominator(denominator,  gcd);	  Integer    denominator    =    getDenominator(denominator);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
4	[BUG]  [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  denominator);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getFraction(numerator,  denominator,  denominator);	  Numerator    whole    =    getFraction(numerator,    denominator,    hashCode);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
5	[BUG]  [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  0,  numerator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  0,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getFraction(numerator,  denominator,  0,  numerator);	  Numerator    whole    =    getFraction(numerator,    denominator,    hashCode);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
6	[BUG]  [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  denominator,  hashCode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  denominator,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getFraction(numerator,  denominator,  denominator,  hashCode);	  Numerator    whole    =    getFraction(numerator,    denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
7	[BUG]  [BUGGY]  Numerator  whole  =  getFraction(numerator,  numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getFraction(numerator,  numerator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getFraction(numerator,  numerator,  denominator);	  Numerator    whole    =    getFraction(numerator,    denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
8	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  gcd,  hashCode);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  gcd,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	int  denominator  =  getDenominator(numerator,  denominator,  gcd,  hashCode);	  int    denominator    =    getDenominator(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
9	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  gcd,  numerator);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  gcd,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	int  denominator  =  getDenominator(numerator,  denominator,  gcd,  numerator);	  int    denominator    =    getDenominator(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
10	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(numerator,  denominator,  numerator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Integer  denominator  =  getDenominator(numerator,  denominator,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Integer  denominator  =  getDenominator(numerator,  denominator,  numerator);	  Integer    denominator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
11	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(numerator,  denominator,  gcd);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Integer  denominator  =  getDenominator(numerator,  denominator,  gcd);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Integer  denominator  =  getDenominator(numerator,  denominator,  gcd);	  Integer    denominator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
12	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(numerator,  denominator,  hashCode);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Integer  denominator  =  getDenominator(numerator,  denominator,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Integer  denominator  =  getDenominator(numerator,  denominator,  hashCode);	  Integer    denominator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
13	[BUG]  [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  gcd,  hashCode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  gcd,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getFraction(numerator,  denominator,  gcd,  hashCode);	  Numerator    whole    =    getFraction(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
14	[BUG]  [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  gcd,  numerator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  gcd,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getFraction(numerator,  denominator,  gcd,  numerator);	  Numerator    whole    =    getFraction(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
15	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric,  Integer,  Denominator  must  not  be  numeric. ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric,  Integer,  Denominator  must  not  be  numeric. ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  numerator  must  not  be  numeric,  Integer,  Denominator  must  not  be  numeric. ");	  throw    new    ArithmeticException(   "The    numerator    must    not    be    numeric.    Integer,    Denominator    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
16	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric.  Integer,  denominator  must  not  be  numeric. ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric.  Integer,  denominator  must  not  be  numeric. ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  numerator  must  not  be  numeric.  Integer,  denominator  must  not  be  numeric. ");	  throw    new    ArithmeticException(   "The    numerator    must    not    be    numeric.    Integer,    Denominator    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
17	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric. ",  Integer,  Denominator  must  not  be  numeric.   ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric. ",  Integer,  Denominator  must  not  be  numeric.   ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  numerator  must  not  be  numeric. ",  Integer,  Denominator  must  not  be  numeric.   ");	  throw    new    ArithmeticException(   "The    numerator    must    not    be    numeric.    Integer,    Denominator    must    not    be    numeric.   ");    	non-compiled	[CE]  	42	None	replace
18	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  must  not  be  numeric.   "  +  denominator);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  must  not  be  numeric.   "  +  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Numeric  must  not  be  numeric.   "  +  denominator);	  throw    new    ArithmeticException(   "Numeric    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
19	[BUG]  [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  denominator);	  Numerator    whole    =    getGcd().getFraction(numerator,    denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
20	[BUG]  [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  numerator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getGcd().getFraction(numerator,  numerator,  denominator);	  Numerator    whole    =    getGcd().getFraction(numerator,    denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
21	[BUG]  [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  desominator);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  desominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  desominator);	  Numerator    whole    =    getGcd().getFraction(numerator,    denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
22	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  numerator,  hashCode);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  int  denominator  =  getDenominator(denominator,  numerator,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	int  denominator  =  getDenominator(denominator,  numerator,  hashCode);	  int    denominator    =    getDenominator(numerator,    denominator,    hashCode);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
23	[BUG]  [BUGGY]  return  new  Fraction(numerator,  denominator,  denominator,  hashCode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  Fraction(numerator,  denominator,  denominator,  hashCode);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  Fraction(numerator,  denominator,  denominator,  hashCode);	  return    new    Fraction(numerator,    denominator,    hashCode);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
24	[BUG]  [BUGGY]  return  new  Fraction(numerator,  denominator,  0,  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  Fraction(numerator,  denominator,  0,  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  Fraction(numerator,  denominator,  0,  denominator);	  return    new    Fraction(numerator,    denominator,    hashCode);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
25	[BUG]  [BUGGY]  return  new  Fraction(numerator,  denominator,  denominator,  numerator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  Fraction(numerator,  denominator,  denominator,  numerator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  Fraction(numerator,  denominator,  denominator,  numerator);	  return    new    Fraction(numerator,    denominator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
26	[BUG]  [BUGGY]  return  new  Fraction(numerator,  denominator,  denominator,  gcd);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  Fraction(numerator,  denominator,  denominator,  gcd);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  Fraction(numerator,  denominator,  denominator,  gcd);	  return    new    Fraction(numerator,    denominator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
27	[BUG]  [BUGGY]  if(denominator  <  0  ||  denominator  <  0)  {  return  numerator;  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  if(denominator  <  0  ||  denominator  <  0)  {  return  numerator;  }  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	if(denominator  <  0  ||  denominator  <  0)  {  return  numerator;  }	  if(denominator    <    0)    {    return    numerator;    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
28	[BUG]  [BUGGY]  if(numerator  <  0)  {  return  numerator;  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  if(numerator  <  0)  {  return  numerator;  }  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	if(numerator  <  0)  {  return  numerator;  }	  if(denominator    <    0)    {    return    numerator;    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
29	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  parameter  must  not  be  numeric.   "  +  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  parameter  must  not  be  numeric.   "  +  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Numeric  parameter  must  not  be  numeric.   "  +  denominator);	  throw    new    ArithmeticException(   "Numeric    parameter    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
30	[BUG]  [BUGGY]  Throw  new  ArithmeticException( "Numeric  parameter  must  not  be  numeric. ");  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Throw  new  ArithmeticException( "Numeric  parameter  must  not  be  numeric. ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Throw  new  ArithmeticException( "Numeric  parameter  must  not  be  numeric. ");	  throw    new    ArithmeticException(   "Numeric    parameter    must    not    be    numeric.   ");    	non-compiled	[CE]  not  a  statement	40	None	replace
31	[BUG]  [BUGGY]  if(numerator  <  0)  {  return  ONE;  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  if(numerator  <  0)  {  return  ONE;  }  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	if(numerator  <  0)  {  return  ONE;  }	  if(denominator    <    0)    {    return    ONE;    }    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
32	[BUG]  [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  true);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  true);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getFraction(numerator,  denominator,  true);	  Numerator    whole    =    getFraction(numerator,    denominator,    false);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
33	[BUG]  [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  false,  numerator);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  false,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getFraction(numerator,  denominator,  false,  numerator);	  Numerator    whole    =    getFraction(numerator,    denominator,    false);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
34	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(0).denominator;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Integer  denominator  =  getDenominator(0).denominator;  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Integer  denominator  =  getDenominator(0).denominator;	  Integer    denominator    =    getDenominator(0);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
35	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric. ",  denominator);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric. ",  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric. ",  denominator);	  throw    new    ArithmeticException(   "Fraction    denominator    must    not    be    numeric.   ",    numerator);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
36	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric. ",  numerator,  denominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric. ",  numerator,  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric. ",  numerator,  denominator);	  throw    new    ArithmeticException(   "Fraction    denominator    must    not    be    numeric.   ",    numerator);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
37	[BUG]  [BUGGY]  return  new  Fraction(denominator,  denominator);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  Fraction(denominator,  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  Fraction(denominator,  denominator);	  return    new    Fraction(denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
38	[BUG]  [BUGGY]  return  new  Fraction(denominator,  numerator,  denominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  Fraction(denominator,  numerator,  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  Fraction(denominator,  numerator,  denominator);	  return    new    Fraction(denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
39	[BUG]  [BUGGY]  return  new  Fraction(numerator,  desominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  Fraction(numerator,  desominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  Fraction(numerator,  desominator);	  return    new    Fraction(denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
40	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Fraction  numeric  must  not  be  numeric.   "  +  denominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Fraction  numeric  must  not  be  numeric.   "  +  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Fraction  numeric  must  not  be  numeric.   "  +  denominator);	  throw    new    ArithmeticException(   "Fraction    numeric    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
41	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Fraction  numeric  must  not  be  numeric. ",  numerator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Fraction  numeric  must  not  be  numeric. ",  numerator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Fraction  numeric  must  not  be  numeric. ",  numerator);	  throw    new    ArithmeticException(   "Fraction    numeric    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
42	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  gcd);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  int  denominator  =  getDenominator(denominator,  gcd);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	int  denominator  =  getDenominator(denominator,  gcd);	  int    denominator    =    getDenominator(denominator);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
43	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  zero.   "  +  denominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  zero.   "  +  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  numerator  must  not  be  zero.   "  +  denominator);	  throw    new    ArithmeticException(   "The    numerator    must    not    be    zero.   ");    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
44	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  ZERO.   ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  ZERO.   ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  numerator  must  not  be  ZERO.   ");	  throw    new    ArithmeticException(   "The    numerator    must    not    be    zero.   ");    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
45	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  must  not  be  numeric.   "  +  denominator,  numerator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  must  not  be  numeric.   "  +  denominator,  numerator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Numerator  must  not  be  numeric.   "  +  denominator,  numerator);	  throw    new    ArithmeticException(   "Numerator    must    not    be    numeric.       "    +    denominator);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
46	[BUG]  [BUGGY]  Throw  new  ArithmeticException( "Numerator  must  not  be  numeric.   "  +  denominator);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Throw  new  ArithmeticException( "Numerator  must  not  be  numeric.   "  +  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Throw  new  ArithmeticException( "Numerator  must  not  be  numeric.   "  +  denominator);	  throw    new    ArithmeticException(   "Numerator    must    not    be    numeric.       "    +    denominator);    	non-compiled	[CE]  not  a  statement	3	None	replace
47	[BUG]  [BUGGY]  if(denominator  ==  0)  {  return  FOUR_FIFTHS;  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  if(denominator  ==  0)  {  return  FOUR_FIFTHS;  }  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	if(denominator  ==  0)  {  return  FOUR_FIFTHS;  }	  if(denominator    ==    0)    {    return    ZERO;    }    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
48	[BUG]  [BUGGY]  if(denominator  ==  0)  {  return  numerator;  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  if(denominator  ==  0)  {  return  numerator;  }  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	if(denominator  ==  0)  {  return  numerator;  }	  if(denominator    ==    0)    {    return    ZERO;    }    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
49	[BUG]  [BUGGY]  if(numerator  ==  0)  {  return  denominator;  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  if(numerator  ==  0)  {  return  denominator;  }  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	if(numerator  ==  0)  {  return  denominator;  }	  if(denominator    ==    0)    {    return    ZERO;    }    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
50	[BUG]  [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  gcd,  hashCode);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  gcd,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  gcd,  hashCode);	  Numerator    whole    =    getGcd().getFraction(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
51	[BUG]  [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  gcd,  numerator);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  gcd,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  gcd,  numerator);	  Numerator    whole    =    getGcd().getFraction(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
52	[BUG]  [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  0,  numerator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  0,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  0,  numerator);	  Numerator    whole    =    getGcd().getFraction(numerator,    denominator,    hashCode);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
53	[BUG]  [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  0);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  0);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  0);	  Numerator    whole    =    getGcd().getFraction(numerator,    denominator,    hashCode);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
54	[BUG]  [BUGGY]  int  denominator  =  getDenominator(0).denominator;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  int  denominator  =  getDenominator(0).denominator;  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	int  denominator  =  getDenominator(0).denominator;	  int    denominator    =    getDenominator(0);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
55	[BUG]  [BUGGY]  return  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric. ",  numerator);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric. ",  numerator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric. ",  numerator);	  return    new    ArithmeticException(   "Fraction    denominator    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
56	[BUG]  [BUGGY]  return  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric.n ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric.n ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric.n ");	  return    new    ArithmeticException(   "Fraction    denominator    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
57	[BUG]  [BUGGY]  return  new  Fraction(numerator,  denominator,  gcd,  hashCode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  Fraction(numerator,  denominator,  gcd,  hashCode);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  Fraction(numerator,  denominator,  gcd,  hashCode);	  return    new    Fraction(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
58	[BUG]  [BUGGY]  return  new  Fraction(numerator,  denominator,  gcd,  numerator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  Fraction(numerator,  denominator,  gcd,  numerator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  Fraction(numerator,  denominator,  gcd,  numerator);	  return    new    Fraction(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
59	[BUG]  [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  true);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  true);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  true);	  Numerator    whole    =    getGcd().getFraction(numerator,    denominator,    false);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
60	[BUG]  [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  numerator,  false);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  numerator,  false);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  numerator,  false);	  Numerator    whole    =    getGcd().getFraction(numerator,    denominator,    false);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
61	[BUG]  [BUGGY]  return  new  ArithmeticException( "The  numerator  must  not  be  numeric.   "  +  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  ArithmeticException( "The  numerator  must  not  be  numeric.   "  +  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  ArithmeticException( "The  numerator  must  not  be  numeric.   "  +  denominator);	  return    new    ArithmeticException(   "The    numerator    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
62	[BUG]  [BUGGY]  return  new  ArithmeticException( "The  numerator  must  not  be  numeric. ",  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  ArithmeticException( "The  numerator  must  not  be  numeric. ",  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  ArithmeticException( "The  numerator  must  not  be  numeric. ",  denominator);	  return    new    ArithmeticException(   "The    numerator    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
63	[BUG]  [BUGGY]  if(numerator  <  0  ||  denominator  <  0)  {  return  numerator;  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  if(numerator  <  0  ||  denominator  <  0)  {  return  numerator;  }  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	if(numerator  <  0  ||  denominator  <  0)  {  return  numerator;  }	  if(numerator    <    0)    {    return    denominator;    }    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
64	[BUG]  [BUGGY]  if(numerator  <  0)  {  return  ZERO;  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  if(numerator  <  0)  {  return  ZERO;  }  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	if(numerator  <  0)  {  return  ZERO;  }	  if(numerator    <    0)    {    return    denominator;    }    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
65	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  denominator  must  not  be  numeric. ",  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  denominator  must  not  be  numeric. ",  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  denominator  must  not  be  numeric. ",  denominator);	  throw    new    ArithmeticException(   "The    denominator    must    not    be    numeric   ",    numerator);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
66	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  denominator  must  not  be  numeric, ",  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  denominator  must  not  be  numeric, ",  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  denominator  must  not  be  numeric, ",  denominator);	  throw    new    ArithmeticException(   "The    denominator    must    not    be    numeric   ",    numerator);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
67	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric. ",  denominator,  numerator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric. ",  denominator,  numerator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  numerator  must  not  be  numeric. ",  denominator,  numerator);	  throw    new    ArithmeticException(   "The    numerator    must    not    be    numeric.   ",    denominator);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
68	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric.   ",  numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric.   ",  numerator,  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  numerator  must  not  be  numeric.   ",  numerator,  denominator);	  throw    new    ArithmeticException(   "The    numerator    must    not    be    numeric.   ",    denominator);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
69	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric.   "  +  denominator,  numerator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric.   "  +  denominator,  numerator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  numerator  must  not  be  numeric.   "  +  denominator,  numerator);	  throw    new    ArithmeticException(   "The    numerator    must    not    be    numeric.       "    +    denominator);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
70	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric.n "  +  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric.n "  +  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  numerator  must  not  be  numeric.n "  +  denominator);	  throw    new    ArithmeticException(   "The    numerator    must    not    be    numeric.       "    +    denominator);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
71	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  numeric  must  not  be  numeric.   "  +  denominator);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  numeric  must  not  be  numeric.   "  +  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  numeric  must  not  be  numeric.   "  +  denominator);	  throw    new    ArithmeticException(   "The    numeric    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
72	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  numeric  must  not  be  numeric. ",  numerator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  numeric  must  not  be  numeric. ",  numerator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  numeric  must  not  be  numeric. ",  numerator);	  throw    new    ArithmeticException(   "The    numeric    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
73	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  must  not  be  numeric.  Infinity ",  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  must  not  be  numeric.  Infinity ",  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Numerator  must  not  be  numeric.  Infinity ",  denominator);	  throw    new    ArithmeticException(   "Numerator    must    not    be    numeric.    Infinity.   ");    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
74	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  must  not  be  numeric.  Infinity,  denominator. ");  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  must  not  be  numeric.  Infinity,  denominator. ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Numerator  must  not  be  numeric.  Infinity,  denominator. ");	  throw    new    ArithmeticException(   "Numerator    must    not    be    numeric.    Infinity.   ");    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
75	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  int  denominator  =  getDenominator(denominator,  numerator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	int  denominator  =  getDenominator(denominator,  numerator,  denominator);	  int    denominator    =    getDenominator(numerator,    denominator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
76	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  numerator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	int  denominator  =  getDenominator(numerator,  numerator,  denominator);	  int    denominator    =    getDenominator(numerator,    denominator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
77	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  desominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  desominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	int  denominator  =  getDenominator(numerator,  denominator,  desominator);	  int    denominator    =    getDenominator(numerator,    denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
78	[BUG]  [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  gcd,  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  gcd,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  gcd,  denominator);	  Numerator    whole    =    getGcd().getFraction(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
79	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(denomerator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Integer  denominator  =  getDenominator(denomerator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Integer  denominator  =  getDenominator(denomerator);	  Integer    denominator    =    getDenominator(denominator);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
80	[BUG]  [BUGGY]  int  denominator  =  getDenominator(1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  int  denominator  =  getDenominator(1);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	int  denominator  =  getDenominator(1);	  int    denominator    =    getDenominator(0);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
81	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  must  not  be  numeric.  Infinity  of  denominator.   ");  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  must  not  be  numeric.  Infinity  of  denominator.   ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Numerator  must  not  be  numeric.  Infinity  of  denominator.   ");	  throw    new    ArithmeticException(   "Numerator    must    not    be    numeric.    Infinity.   ");    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
82	[BUG]  [BUGGY]  if(denominator  ==  0)  {  return  ONE;  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  if(denominator  ==  0)  {  return  ONE;  }  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	if(denominator  ==  0)  {  return  ONE;  }	  if(denominator    ==    0)    {    return    ZERO;    }    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
83	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(numerator,  desominator);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Integer  denominator  =  getDenominator(numerator,  desominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Integer  denominator  =  getDenominator(numerator,  desominator);	  Integer    denominator    =    getDenominator(denominator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
84	[BUG]  [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  0,  hashCode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  0,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getFraction(numerator,  denominator,  0,  hashCode);	  Numerator    whole    =    getFraction(numerator,    denominator,    hashCode);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
85	[BUG]  [BUGGY]  return  new  Fraction(numerator,  denominator,  desominator);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  Fraction(numerator,  denominator,  desominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  Fraction(numerator,  denominator,  desominator);	  return    new    Fraction(numerator,    denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
86	[BUG]  [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  desominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  desominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getFraction(numerator,  denominator,  desominator);	  Numerator    whole    =    getFraction(numerator,    denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
87	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  must  not  be  numeric. ",  denominator);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  must  not  be  numeric. ",  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Numeric  must  not  be  numeric. ",  denominator);	  throw    new    ArithmeticException(   "Numeric    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
88	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  must  not  be  numeric.   "  +  desominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  must  not  be  numeric.   "  +  desominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Numerator  must  not  be  numeric.   "  +  desominator);	  throw    new    ArithmeticException(   "Numerator    must    not    be    numeric.       "    +    denominator);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
89	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  less  than  zero.   ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  less  than  zero.   ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  numerator  must  not  be  less  than  zero.   ");	  throw    new    ArithmeticException(   "The    numerator    must    not    be    zero.   ");    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
90	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric. "  +  Integer,  Denominator  must  not  be  numeric.   ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric. "  +  Integer,  Denominator  must  not  be  numeric.   ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  numerator  must  not  be  numeric. "  +  Integer,  Denominator  must  not  be  numeric.   ");	  throw    new    ArithmeticException(   "The    numerator    must    not    be    numeric.    Integer,    Denominator    must    not    be    numeric.   ");    	non-compiled	[CE]  	42	None	replace
91	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric ",  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric ",  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  numerator  must  not  be  numeric ",  denominator);	  throw    new    ArithmeticException(   "The    denominator    must    not    be    numeric   ",    numerator);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
92	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  denominator  must  not  be  numeric ",  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  denominator  must  not  be  numeric ",  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  denominator  must  not  be  numeric ",  denominator);	  throw    new    ArithmeticException(   "The    denominator    must    not    be    numeric   ",    numerator);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
93	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  gcd,  denominator);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  gcd,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	int  denominator  =  getDenominator(numerator,  gcd,  denominator);	  int    denominator    =    getDenominator(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
94	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  numerator,  gcd);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  int  denominator  =  getDenominator(denominator,  numerator,  gcd);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	int  denominator  =  getDenominator(denominator,  numerator,  gcd);	  int    denominator    =    getDenominator(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
95	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Integer  denominator  =  getDenominator(1);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Integer  denominator  =  getDenominator(1);	  Integer    denominator    =    getDenominator(0);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
96	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  0,  hashCode);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  0,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	int  denominator  =  getDenominator(numerator,  denominator,  0,  hashCode);	  int    denominator    =    getDenominator(numerator,    denominator,    hashCode);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
97	[BUG]  [BUGGY]  return  new  Fraction(numerator,  desominator,  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  Fraction(numerator,  desominator,  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  Fraction(numerator,  desominator,  denominator);	  return    new    Fraction(numerator,    denominator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
98	[BUG]  [BUGGY]  Throw  new  ArithmeticException( "Fraction  numeric  must  not  be  numeric. ");  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Throw  new  ArithmeticException( "Fraction  numeric  must  not  be  numeric. ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Throw  new  ArithmeticException( "Fraction  numeric  must  not  be  numeric. ");	  throw    new    ArithmeticException(   "Fraction    numeric    must    not    be    numeric.   ");    	non-compiled	[CE]  not  a  statement	2	None	replace
99	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Fraction  numerator  must  not  be  numeric. ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Fraction  numerator  must  not  be  numeric. ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Fraction  numerator  must  not  be  numeric. ");	  throw    new    ArithmeticException(   "Fraction    numeric    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
100	[BUG]  [BUGGY]  return  new  Fraction(denominator,  ZERO);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  Fraction(denominator,  ZERO);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  Fraction(denominator,  ZERO);	  return    new    Fraction(denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
101	[BUG]  [BUGGY]  return  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric.   ",  denominator);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric.   ",  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric.   ",  denominator);	  return    new    ArithmeticException(   "Fraction    denominator    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
102	[BUG]  [BUGGY]  return  new  ArithmeticException( "Fraction  numeric  must  not  be  numeric. ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  ArithmeticException( "Fraction  numeric  must  not  be  numeric. ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  ArithmeticException( "Fraction  numeric  must  not  be  numeric. ");	  return    new    ArithmeticException(   "Fraction    denominator    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
103	[BUG]  [BUGGY]  return  new  Fraction(numerator,  denominator,  int  hashCode);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  Fraction(numerator,  denominator,  int  hashCode);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  Fraction(numerator,  denominator,  int  hashCode);	  return    new    Fraction(numerator,    denominator,    hashCode);    	non-compiled	[CE]  '.class'  expected	20	None	replace
104	[BUG]  [BUGGY]  return  new  Fraction(numerator,  denominator,  0,  hashCode);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  Fraction(numerator,  denominator,  0,  hashCode);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  Fraction(numerator,  denominator,  0,  hashCode);	  return    new    Fraction(numerator,    denominator,    hashCode);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
105	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  desominator,  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  desominator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	int  denominator  =  getDenominator(numerator,  desominator,  denominator);	  int    denominator    =    getDenominator(numerator,    denominator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
106	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Fraction  numeric  must  not  be  numeric. ",  denominator);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Fraction  numeric  must  not  be  numeric. ",  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Fraction  numeric  must  not  be  numeric. ",  denominator);	  throw    new    ArithmeticException(   "Fraction    denominator    must    not    be    numeric.   ",    numerator);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
107	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric.  Integer,  Denominator  must  not  be  numeric. ",  denominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric.  Integer,  Denominator  must  not  be  numeric. ",  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric.  Integer,  Denominator  must  not  be  numeric. ",  denominator);	  throw    new    ArithmeticException(   "Fraction    denominator    must    not    be    numeric.   ",    numerator);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
108	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  desominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  desominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	int  denominator  =  getDenominator(numerator,  desominator);	  int    denominator    =    getDenominator(denominator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
109	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric. "  +  desominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric. "  +  desominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  numerator  must  not  be  numeric. "  +  desominator);	  throw    new    ArithmeticException(   "The    numerator    must    not    be    numeric.       "    +    denominator);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
110	[BUG]  [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  0,  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  0,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getGcd().getFraction(numerator,  0,  denominator);	  Numerator    whole    =    getGcd().getFraction(numerator,    denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
111	[BUG]  [BUGGY]  Numerator  whole  =  getGcd().getFraction(denominator,  numerator,  false);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getGcd().getFraction(denominator,  numerator,  false);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getGcd().getFraction(denominator,  numerator,  false);	  Numerator    whole    =    getGcd().getFraction(numerator,    denominator,    false);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
112	[BUG]  [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  desominator,  false);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  desominator,  false);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getGcd().getFraction(numerator,  desominator,  false);	  Numerator    whole    =    getGcd().getFraction(numerator,    denominator,    false);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
113	[BUG]  [BUGGY]  return  new  Fraction(numerator,  denominator,  gcd,  denominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  Fraction(numerator,  denominator,  gcd,  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  Fraction(numerator,  denominator,  gcd,  denominator);	  return    new    Fraction(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
114	[BUG]  [BUGGY]  return  new  Fraction(numerator,  denominator,  gcd,  desominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  Fraction(numerator,  denominator,  gcd,  desominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  Fraction(numerator,  denominator,  gcd,  desominator);	  return    new    Fraction(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
115	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denomerator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  int  denominator  =  getDenominator(denomerator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	int  denominator  =  getDenominator(denomerator);	  int    denominator    =    getDenominator(denominator);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
116	[BUG]  [BUGGY]  Numerator  whole  =  getFraction(denominator,  numerator,  false);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getFraction(denominator,  numerator,  false);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getFraction(denominator,  numerator,  false);	  Numerator    whole    =    getFraction(numerator,    denominator,    false);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
117	[BUG]  [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  gcd,  denominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  gcd,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getFraction(numerator,  denominator,  gcd,  denominator);	  Numerator    whole    =    getFraction(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
118	[BUG]  [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  0,  hashCode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  0,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  0,  hashCode);	  Numerator    whole    =    getGcd().getFraction(numerator,    denominator,    hashCode);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
119	[BUG]  [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  ZERO);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  ZERO);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  ZERO);	  Numerator    whole    =    getGcd().getFraction(numerator,    denominator,    hashCode);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
120	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  parameter  must  not  be  nonmeric. ");  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  parameter  must  not  be  nonmeric. ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Numeric  parameter  must  not  be  nonmeric. ");	  throw    new    ArithmeticException(   "Numeric    parameter    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
121	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  gcd,  denominator);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  gcd,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	int  denominator  =  getDenominator(numerator,  denominator,  gcd,  denominator);	  int    denominator    =    getDenominator(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
122	[BUG]  [BUGGY]  int  denominator  =  getDenominator(gcd,  denominator,  numerator);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  int  denominator  =  getDenominator(gcd,  denominator,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	int  denominator  =  getDenominator(gcd,  denominator,  numerator);	  int    denominator    =    getDenominator(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
123	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  denominator  must  not  be  numerable. ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  denominator  must  not  be  numerable. ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  denominator  must  not  be  numerable. ");	  throw    new    ArithmeticException(   "The    denominator    must    not    be    numerator.   ");    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
124	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric.  Integer,denominator  must  not  be  numeric. "  +  denominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  numeric.  Integer,denominator  must  not  be  numeric. "  +  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  numerator  must  not  be  numeric.  Integer,denominator  must  not  be  numeric. "  +  denominator);	  throw    new    ArithmeticException(   "The    numerator    must    not    be    numeric.       "    +    denominator);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
125	[BUG]  [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  numerator,  false);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  numerator,  false);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getFraction(numerator,  denominator,  numerator,  false);	  Numerator    whole    =    getFraction(numerator,    denominator,    false);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
126	[BUG]  [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  gcd,  desominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  gcd,  desominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getGcd().getFraction(numerator,  denominator,  gcd,  desominator);	  Numerator    whole    =    getGcd().getFraction(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
127	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  denominator,  numerator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  int  denominator  =  getDenominator(denominator,  denominator,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	int  denominator  =  getDenominator(denominator,  denominator,  numerator);	  int    denominator    =    getDenominator(numerator,    denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
128	[BUG]  [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  numerator,  denominator,  false);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getGcd().getFraction(numerator,  numerator,  denominator,  false);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getGcd().getFraction(numerator,  numerator,  denominator,  false);	  Numerator    whole    =    getGcd().getFraction(numerator,    denominator,    false);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
129	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric.  Integer,  denominator  must  not  be  numeric. ",  denominator);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric.  Integer,  denominator  must  not  be  numeric. ",  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric.  Integer,  denominator  must  not  be  numeric. ",  denominator);	  throw    new    ArithmeticException(   "Fraction    denominator    must    not    be    numeric.   ",    numerator);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
130	[BUG]  [BUGGY]  Numerator  whole  =  getGcd().getFraction(denominator,  numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getGcd().getFraction(denominator,  numerator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getGcd().getFraction(denominator,  numerator,  denominator);	  Numerator    whole    =    getGcd().getFraction(numerator,    denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
131	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  must  not  be  nonmeric.   "  +  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  must  not  be  nonmeric.   "  +  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Numerator  must  not  be  nonmeric.   "  +  denominator);	  throw    new    ArithmeticException(   "Numerator    must    not    be    numeric.       "    +    denominator);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
132	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  must  not  be  numeric.  Infinity  of   "  +  denominator);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  must  not  be  numeric.  Infinity  of   "  +  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Numerator  must  not  be  numeric.  Infinity  of   "  +  denominator);	  throw    new    ArithmeticException(   "Numerator    must    not    be    numeric.       "    +    denominator);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
133	[BUG]  [BUGGY]  return  new  ArithmeticException( "Numeric  must  not  be  numeric. ");  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  ArithmeticException( "Numeric  must  not  be  numeric. ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  ArithmeticException( "Numeric  must  not  be  numeric. ");	  throw    new    ArithmeticException(   "Numeric    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
134	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  must  not  be  numeric.  Infinity. ");  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  must  not  be  numeric.  Infinity. ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Numeric  must  not  be  numeric.  Infinity. ");	  throw    new    ArithmeticException(   "Numeric    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
135	[BUG]  [BUGGY]  Numerator  whole  =  getFraction(denominator,  numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getFraction(denominator,  numerator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getFraction(denominator,  numerator,  denominator);	  Numerator    whole    =    getFraction(numerator,    denominator,    numerator);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
136	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(numerator,  denominator,  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Integer  denominator  =  getDenominator(numerator,  denominator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Integer  denominator  =  getDenominator(numerator,  denominator,  denominator);	  Integer    denominator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
137	[BUG]  [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  gcd,  desominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  Numerator  whole  =  getFraction(numerator,  denominator,  gcd,  desominator);  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	Numerator  whole  =  getFraction(numerator,  denominator,  gcd,  desominator);	  Numerator    whole    =    getFraction(numerator,    denominator,    gcd);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
138	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  must  not  be  numeric,  infinity. ");  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  must  not  be  numeric,  infinity. ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "Numerator  must  not  be  numeric,  infinity. ");	  throw    new    ArithmeticException(   "Numerator    must    not    be    numeric.    Infinity.   ");    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
139	[BUG]  [BUGGY]  return  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric.   "  +  denominator);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric.   "  +  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  ArithmeticException( "Fraction  denominator  must  not  be  numeric.   "  +  denominator);	  return    new    ArithmeticException(   "Fraction    denominator    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
140	[BUG]  [BUGGY]  if(denominator  <  0)  {  return  ONE_FIFTH;  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  if(denominator  <  0)  {  return  ONE_FIFTH;  }  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	if(denominator  <  0)  {  return  ONE_FIFTH;  }	  if(denominator    <    0)    {    return    FOUR_FIFTHS;    }    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
141	[BUG]  [BUGGY]  return  new  Fraction(numerator,  denominator,  hashCode,  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  Fraction(numerator,  denominator,  hashCode,  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  Fraction(numerator,  denominator,  hashCode,  denominator);	  return    new    Fraction(numerator,    denominator,    hashCode);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
142	[BUG]  [BUGGY]  return  new  Fraction(numerator,  denominator,  intdenominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  Fraction(numerator,  denominator,  intdenominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  Fraction(numerator,  denominator,  intdenominator);	  return    new    Fraction(numerator,    denominator,    hashCode);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
143	[BUG]  [BUGGY]  return  new  ArithmeticException( "The  numerator  must  not  be  numeric ",  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  return  new  ArithmeticException( "The  numerator  must  not  be  numeric ",  denominator);  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	return  new  ArithmeticException( "The  numerator  must  not  be  numeric ",  denominator);	  return    new    ArithmeticException(   "The    numerator    must    not    be    numeric.   ");    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
144	[BUG]  [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  denominator. ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  throw  new  ArithmeticException( "The  numerator  must  not  be  denominator. ");  [BUGGY]      }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	throw  new  ArithmeticException( "The  numerator  must  not  be  denominator. ");	  throw    new    ArithmeticException(   "The    numerator    must    not    be    zero.   ");    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
145	[BUG]  [BUGGY]  if(denominator  <  0  ||  denominator  <  0)  {  return  ZERO;  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getReducedFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {      [BUGGY]  if(denominator  <  0  ||  denominator  <  0)  {  return  ZERO;  }  [BUGGY]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	if(denominator  <  0  ||  denominator  <  0)  {  return  ZERO;  }	  if(denominator    <    0)    {    return    numerator;    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
