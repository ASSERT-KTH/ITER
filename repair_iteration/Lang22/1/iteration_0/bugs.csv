bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] throw new ArithmeticException("The denominator must not be zero"); [FE] AssertionFailedError [CONTEXT] public static Fraction getReducedFraction(int numerator, int denominator) { if (denominator == 0) { [BUGGY] throw new ArithmeticException("The denominator must not be zero"); [BUGGY] } if (numerator==0) { return ZERO; // normalize zero. }  if (denominator==Integer.MIN_VALUE && (numerator&1)==0) { numerator/=2; denominator/=2; } if (denominator < 0) { if (numerator==Integer.MIN_VALUE || [CLASS] Fraction [METHOD] getReducedFraction [RETURN_TYPE] Fraction  int numerator int denominator [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String toProperString toString boolean long numeratorValue serialVersionUID int denominator gcd hashCode numerator whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static Fraction getReducedFraction(int numerator, int denominator) { if (denominator == 0) { [BUGGY] [BUGGY] throw new ArithmeticException("The denominator must not be zero"); } if (numerator==0) { return ZERO; // normalize zero. }  if (denominator==Integer.MIN_VALUE && (numerator&1)==0) { numerator/=2; denominator/=2; } if (denominator < 0) { if (numerator==Integer.MIN_VALUE || [CLASS] Fraction [METHOD] getReducedFraction [RETURN_TYPE] Fraction  int numerator int denominator [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String toProperString toString boolean long numeratorValue serialVersionUID int denominator gcd hashCode numerator whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	216	216	2	add	
