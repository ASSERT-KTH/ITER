bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  iter  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  iter  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  iter  =  options.getOption(token);	  Option    iter    =    options.getOption(pos);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
2	[BUG]  [BUGGY]  Option  iter  =  options.getOption(pos,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  iter  =  options.getOption(pos,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  iter  =  options.getOption(pos,  stopAtNonOption);	  Option    iter    =    options.getOption(pos);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
3	[BUG]  [BUGGY]  Option  iter  =  options.getOption(pos  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  iter  =  options.getOption(pos  +  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  iter  =  options.getOption(pos  +  1);	  Option    iter    =    options.getOption(pos);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
4	[BUG]  [BUGGY]  Iterator  <  Object>  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  Object>  iter  =  arguments.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  Object>  iter  =  arguments.iterator();	  if(stopAtNonOption)    {    Iterator    iter    =    arguments.iterator();    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
5	[BUG]  [BUGGY]  options.add(opt);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  options.add(opt);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	options.add(opt);	  if(stopAtNonOption)    {    processOptionToken(opt);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
6	[BUG]  [BUGGY]  bucketToken(opt);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  bucketToken(opt);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	bucketToken(opt);	  if(stopAtNonOption)    {    processOptionToken(opt);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
7	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  tryFallThrough(tokens,    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    else    if(stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
8	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  tryFallThrough(tokens,    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    else    if(stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
9	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tryFallThrough(tokens,  StopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tryFallThrough(tokens,  StopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  tryFallThrough(tokens,  StopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  tryFallThrough(tokens,    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    else    if(stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
10	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( ". ");  }	  tryFallThrough(tokens,    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    else    if(stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
11	[BUG]  [BUGGY]  tokens.add(pos);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tokens.add(pos);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tokens.add(pos);	  if(stopAtNonOption)    {    processOptionToken(opt);    }    else    {    tokens.add(pos);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
12	[BUG]  [BUGGY]  Option  options  =  options.getOption(opt);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  options  =  options.getOption(opt);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  options  =  options.getOption(opt);	  if(stopAtNonOption)    {    processOptionToken(opt);    }    else    {    tokens.add(pos);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
13	[BUG]  [BUGGY]  iter.set(0,  options.indexOf(opt));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.set(0,  options.indexOf(opt));  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter.set(0,  options.indexOf(opt));	  iter.set(pos,    options.indexOf(opt));    	non-compiled	[CE]  <identifier>  expected	66	None	replace
14	[BUG]  [BUGGY]  iter.set(pos,  options.indexOf(token));  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.set(pos,  options.indexOf(token));  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter.set(pos,  options.indexOf(token));	  iter.set(pos,    options.indexOf(opt));    	non-compiled	[CE]  <identifier>  expected	66	None	replace
15	[BUG]  [BUGGY]  iter.set(pos,  options.indexOf(arguments[pos]));  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.set(pos,  options.indexOf(arguments[pos]));  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter.set(pos,  options.indexOf(arguments[pos]));	  iter.set(pos,    options.indexOf(opt));    	non-compiled	[CE]  <identifier>  expected	66	None	replace
16	[BUG]  [BUGGY]  iter.set(pos,  options.size());  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.set(pos,  options.size());  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter.set(pos,  options.size());	  iter.set(pos,    options.size()    -    1);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
17	[BUG]  [BUGGY]  iter.set(0,  options.size());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.set(0,  options.size());  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter.set(0,  options.size());	  iter.set(pos,    options.size()    -    1);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
18	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator().next();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator().next();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  arguments.iterator().next();	  Iterator    <    String>    iter    =    options.iterator().next();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
19	[BUG]  [BUGGY]  Iterator  iter  =  options.iterator();  while(iter.hasNext())  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(options[pos]);  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =  options.iterator();  while(iter.hasNext())  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(options[pos]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  iter  =  options.iterator();  while(iter.hasNext())  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(options[pos]);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String[]    arguments    =(String[])iter.next();    for(int    pos    =    0;    pos    <    arguments.length;    pos++)    {    tokens.add(options[pos]);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
20	[BUG]  [BUGGY]  Iterator  iter  =  options.iterator();  if(iter.hasNext())  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(options[pos]);  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =  options.iterator();  if(iter.hasNext())  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(options[pos]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  iter  =  options.iterator();  if(iter.hasNext())  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(options[pos]);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String[]    arguments    =(String[])iter.next();    for(int    pos    =    0;    pos    <    arguments.length;    pos++)    {    tokens.add(options[pos]);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
21	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  while(iter.hasNext())  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(options[pos]);  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  while(iter.hasNext())  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(options[pos]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  options.iterator();  while(iter.hasNext())  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(options[pos]);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String[]    arguments    =(String[])iter.next();    for(int    pos    =    0;    pos    <    arguments.length;    pos++)    {    tokens.add(options[pos]);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
22	[BUG]  [BUGGY]  List  <  String>  tokens  =  options.iterator();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  List  <  String>  tokens  =  options.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	List  <  String>  tokens  =  options.iterator();	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String    opt    =(String)iter.next();    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
23	[BUG]  [BUGGY]  Option  options  =  options.get(pos);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  options  =  options.get(pos);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  options  =  options.get(pos);	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String    opt    =(String)iter.next();    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
24	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tokens.add( "- ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tokens.add( "- ");	  if(stopAtNonOption)    {    processOptionToken(opt);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
25	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  tokens.add(token);  }	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
26	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
27	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  for(int  pos  =  0;  pos  <  pos;  pos++)  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  for(int  pos  =  0;  pos  <  pos;  pos++)  {  tokens.add(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  for(int  pos  =  0;  pos  <  pos;  pos++)  {  tokens.add(opt);  }	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
28	[BUG]  [BUGGY]  iter  =  stopAtNonOption?  gobble(opt):  null;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter  =  stopAtNonOption?  gobble(opt):  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =  stopAtNonOption?  gobble(opt):  null;	  iter    =    stopAtNonOption?    gobble(iter):    null;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
29	[BUG]  [BUGGY]  iter  =  stopAtNonOption?  gobble(option):  null;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter  =  stopAtNonOption?  gobble(option):  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =  stopAtNonOption?  gobble(option):  null;	  iter    =    stopAtNonOption?    gobble(iter):    null;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
30	[BUG]  [BUGGY]  iter  =  stopAtNonOption?  gobble(token):  null;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter  =  stopAtNonOption?  gobble(token):  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =  stopAtNonOption?  gobble(token):  null;	  iter    =    stopAtNonOption?    gobble(iter):    null;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
31	[BUG]  [BUGGY]  Iterator  iter  =  stopAtNonOption?  gobble(opt):  null;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =  stopAtNonOption?  gobble(opt):  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  iter  =  stopAtNonOption?  gobble(opt):  null;	  iter    =    stopAtNonOption?    gobble(iter):    null;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
32	[BUG]  [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	List  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
33	[BUG]  [BUGGY]  for(String  opt  :  arguments.length)  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(String  opt  :  arguments.length)  {  tokens.add(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(String  opt  :  arguments.length)  {  tokens.add(opt);  }	  for(String    opt    :    arguments)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
34	[BUG]  [BUGGY]  for(String  opt  :  arguments.keySet())  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(String  opt  :  arguments.keySet())  {  tokens.add(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(String  opt  :  arguments.keySet())  {  tokens.add(opt);  }	  for(String    opt    :    arguments)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
35	[BUG]  [BUGGY]  for(String  opt  :  arguments.values())  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(String  opt  :  arguments.values())  {  tokens.add(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(String  opt  :  arguments.values())  {  tokens.add(opt);  }	  for(String    opt    :    arguments)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
36	[BUG]  [BUGGY]  for(String  option  :  arguments)  {  tokens.add(option);  }  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(String  option  :  arguments)  {  tokens.add(option);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(String  option  :  arguments)  {  tokens.add(option);  }	  for(String    opt    :    arguments)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
37	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  option  =  options.getOption(token);	  Option    option    =    options.getOption(pos);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
38	[BUG]  [BUGGY]  Option  option  =  options.getOption(pos,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(pos,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  option  =  options.getOption(pos,  stopAtNonOption);	  Option    option    =    options.getOption(pos);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
39	[BUG]  [BUGGY]  Option  option  =  options.getOption(pos  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(pos  +  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  option  =  options.getOption(pos  +  1);	  Option    option    =    options.getOption(pos);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
40	[BUG]  [BUGGY]  Option  option  =  options.getOption(tokens);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  option  =  options.getOption(tokens);	  Option    option    =    options.getOption(pos);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
41	[BUG]  [BUGGY]  Option  iter  =  options.getIterator(pos  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  iter  =  options.getIterator(pos  +  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  iter  =  options.getIterator(pos  +  1);	  Option    iter    =    options.getIterator(pos);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  Option  iter  =  options.getIterator(pos,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  iter  =  options.getIterator(pos,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  iter  =  options.getIterator(pos,  stopAtNonOption);	  Option    iter    =    options.getIterator(pos);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
43	[BUG]  [BUGGY]  Option  iter  =  options.getIterator(pos  -  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  iter  =  options.getIterator(pos  -  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  iter  =  options.getIterator(pos  -  1);	  Option    iter    =    options.getIterator(pos);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
44	[BUG]  [BUGGY]  iter.setPosition(pos  +  2);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.setPosition(pos  +  2);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter.setPosition(pos  +  2);	  iter.setPosition(pos    +    1);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
45	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  processStringToken(token);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  processStringToken(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  processStringToken(token);  }	  else    if(stopAtNonOption)    {    processOptionToken(token);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
46	[BUG]  [BUGGY]  else  if(stopTheRest)  {  processOptionToken(token);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopTheRest)  {  processOptionToken(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopTheRest)  {  processOptionToken(token);  }	  else    if(stopAtNonOption)    {    processOptionToken(token);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
47	[BUG]  [BUGGY]  tryFallThrough(options)  {  if(stopAtNonOption)  {  gobble(iter);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tryFallThrough(options)  {  if(stopAtNonOption)  {  gobble(iter);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tryFallThrough(options)  {  if(stopAtNonOption)  {  gobble(iter);  }	  tryFallThrough(tokens)    {    if(stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
48	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  tokens.add(opt);  }	  tokens.add(opt);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
49	[BUG]  [BUGGY]  iter.setPosition(pos  -  2);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.setPosition(pos  -  2);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter.setPosition(pos  -  2);	  iter.setPosition(pos    -    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
50	[BUG]  [BUGGY]  Iterator  iter  =  options.getOption(pos);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =  options.getOption(pos);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  iter  =  options.getOption(pos);	  Option    iter    =    options.getOption(opt);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
51	[BUG]  [BUGGY]  option  =  options.getOption(pos);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  option  =  options.getOption(pos);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	option  =  options.getOption(pos);	  Option    iter    =    options.getOption(opt);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
52	[BUG]  [BUGGY]  for(String  opt  :  arguments.length)  {  tokens.add(opt.toLowerCase());  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(String  opt  :  arguments.length)  {  tokens.add(opt.toLowerCase());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(String  opt  :  arguments.length)  {  tokens.add(opt.toLowerCase());  }	  for(String    opt    :    arguments)    {    tokens.add(opt.toLowerCase());    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
53	[BUG]  [BUGGY]  tokens.add(opt.toLowerCase());  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tokens.add(opt.toLowerCase());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tokens.add(opt.toLowerCase());	  for(String    opt    :    arguments)    {    tokens.add(opt.toLowerCase());    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
54	[BUG]  [BUGGY]  for(String  option  :  arguments)  {  tokens.add(option.toLowerCase());  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(String  option  :  arguments)  {  tokens.add(option.toLowerCase());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(String  option  :  arguments)  {  tokens.add(option.toLowerCase());  }	  for(String    opt    :    arguments)    {    tokens.add(opt.toLowerCase());    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
55	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  processStringToken(opt);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  processStringToken(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  processStringToken(opt);  }	  else    if(stopAtNonOption)    {    processOptionToken(opt);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
56	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  processRawToken(opt);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  processRawToken(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  processRawToken(opt);  }	  else    if(stopAtNonOption)    {    processOptionToken(opt);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
57	[BUG]  [BUGGY]  Iterator  <  Object>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  Object>  iter  =  options.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  Object>  iter  =  options.iterator();	  if(stopAtNonOption)    {    Iterator    iter    =    tokens.iterator();    }    else    {    for(int    pos    =    0;    pos    <    pos;    pos++)    {    tokens.add(pos);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
58	[BUG]  [BUGGY]  Iterator  <  Object>  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  Object>  iter  =  tokens.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  Object>  iter  =  tokens.iterator();	  if(stopAtNonOption)    {    Iterator    iter    =    tokens.iterator();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
59	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  opt.iterator();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  opt.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  opt.iterator();	  Iterator    <    String>    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
60	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.options!=  null)?  options.iterator()  :  null;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =(this.options!=  null)?  options.iterator()  :  null;  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =(this.options!=  null)?  options.iterator()  :  null;	  Iterator    <    String>    iter    =    this.options.iterator();    	non-compiled	[CE]  <identifier>  expected	62	None	replace
61	[BUG]  [BUGGY]  tryFallThrough(options,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tryFallThrough(options,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tryFallThrough(options,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  tryFallThrough(tokens,    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
62	[BUG]  [BUGGY]  while(stopAtNonOption  &&  tokens.size()  >  0)  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  while(stopAtNonOption  &&  tokens.size()  >  0)  {  tokens.add(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	while(stopAtNonOption  &&  tokens.size()  >  0)  {  tokens.add(token);	  tryFallThrough(tokens,    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
63	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  while(stopAtNonOption)  {  tokens.add(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	while(stopAtNonOption)  {  tokens.add(token);	  tryFallThrough(tokens,    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
64	[BUG]  [BUGGY]  Iterator  iter  =(options  ==  null)?  options.iterator()  :  null;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =(options  ==  null)?  options.iterator()  :  null;  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  iter  =(options  ==  null)?  options.iterator()  :  null;	  iter    =(options    ==    null)?    options.iterator()    :    null;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
65	[BUG]  [BUGGY]  iter  =(options!=  null)?  options.iterator()  :  null;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter  =(options!=  null)?  options.iterator()  :  null;  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =(options!=  null)?  options.iterator()  :  null;	  iter    =(options    ==    null)?    options.iterator()    :    null;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
66	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  Option>  iter  =  arguments.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  Option>  iter  =  arguments.iterator();	  Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
67	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  Option>  iter  =  options.values().iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  Option>  iter  =  options.values().iterator();	  Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
68	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  Option>  iter  =  tokens.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  Option>  iter  =  tokens.iterator();	  Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
69	[BUG]  [BUGGY]  tokens.add(opt.getValue());  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tokens.add(opt.getValue());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tokens.add(opt.getValue());	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String[]    arguments    =(String[])iter.next();    for(int    pos    =    0;    pos    <    arguments.length;    pos++)    {    tokens.add(opt.getValue());    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
70	[BUG]  [BUGGY]  tryFallThrough(options,  stopAtNonOption)  {  gobble(iter);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tryFallThrough(options,  stopAtNonOption)  {  gobble(iter);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tryFallThrough(options,  stopAtNonOption)  {  gobble(iter);  }	  tryFallThrough(tokens,    stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
71	[BUG]  [BUGGY]  tryFallThrough(optionTokens,  stopAtNonOption)  {  gobble(iter);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tryFallThrough(optionTokens,  stopAtNonOption)  {  gobble(iter);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tryFallThrough(optionTokens,  stopAtNonOption)  {  gobble(iter);  }	  tryFallThrough(tokens,    stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
72	[BUG]  [BUGGY]  Options  option  =  options.getOption(pos);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Options  option  =  options.getOption(pos);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Options  option  =  options.getOption(pos);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
73	[BUG]  [BUGGY]  Ilerator  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Ilerator  iter  =  arguments.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Ilerator  iter  =  arguments.iterator();	  if(stopAtNonOption)    {    Iterator    iter    =    arguments.iterator();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
74	[BUG]  [BUGGY]  List  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  List  <  String>  iter  =  options.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	List  <  String>  iter  =  options.iterator();	  Ilerator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
75	[BUG]  [BUGGY]  bucketToken(token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  bucketToken(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	bucketToken(token);	  if(stopAtNonOption)    {    processOptionToken(token);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
76	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Ilerator  <  String>  iter  =  options.values().iterator();	  Ilerator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
77	[BUG]  [BUGGY]  iter  =  options.iterator().next();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter  =  options.iterator().next();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =  options.iterator().next();	  iter    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
78	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  option  =  options.getOption(options);	  Option    option    =    options.getOption(pos);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
79	[BUG]  [BUGGY]  tokens.add(option);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tokens.add(option);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tokens.add(option);	  tokens.add(opt);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
80	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  options.iterator();  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  options.iterator();  }  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	if(stopAtNonOption)  {  Iterator  iter  =  options.iterator();  }	  if(stopAtNonOption)    {    Iterator    iter    =    tokens.iterator();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
81	[BUG]  [BUGGY]  if(stopAtNonOption)  {  iter  =  options.iterator();  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  iter  =  options.iterator();  }  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	if(stopAtNonOption)  {  iter  =  options.iterator();  }	  if(stopAtNonOption)    {    Iterator    iter    =    tokens.iterator();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
82	[BUG]  [BUGGY]  Ilerator  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Ilerator  iter  =  options.values().iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Ilerator  iter  =  options.values().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
83	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt.getValu  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt.getValu  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt.getValu	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String[]    arguments    =(String[])iter.next();    for(int    pos    =    0;    pos    <    arguments.length;    pos++)    {    tokens.add(opt.getValue());    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
84	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt.getValue  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt.getValue  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt.getValue	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String[]    arguments    =(String[])iter.next();    for(int    pos    =    0;    pos    <    arguments.length;    pos++)    {    tokens.add(opt.getValue());    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
85	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    Iterator    iter    =    tokens.iterator();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
86	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    Iterator    iter    =    tokens.iterator();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
87	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    Iterator    iter    =    tokens.iterator();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
88	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  options  =  options.getOptions();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  options  =  options.getOptions();	  if(options!=    null)    {    Iterator    iter    =    options.iterator();    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
89	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  tokens().iterator();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  tokens().iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  tokens().iterator();	  tryFallThrough(tokens)    {    if(stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
90	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  if(arguments!=  null)  {  tokens.add(arguments[pos]);  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  if(arguments!=  null)  {  tokens.add(arguments[pos]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  if(arguments!=  null)  {  tokens.add(arguments[pos]);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String    opt    =(String)iter.next();    if(opt!=    null)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
91	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  option  =(String)iter.next();  if(option!=  null)  {  tokens.add(option);  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  option  =(String)iter.next();  if(option!=  null)  {  tokens.add(option);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  option  =(String)iter.next();  if(option!=  null)  {  tokens.add(option);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String    opt    =(String)iter.next();    if(opt!=    null)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
92	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  pos  =(String)iter.next();  if(pos!=  null)  {  tokens.add(pos);  }  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  pos  =(String)iter.next();  if(pos!=  null)  {  tokens.add(pos);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  pos  =(String)iter.next();  if(pos!=  null)  {  tokens.add(pos);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String    opt    =(String)iter.next();    if(opt!=    null)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
93	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  iter.hasNext();)  {  String  opt  =(String)iter.next();  if(opt!=  null)  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  iter.hasNext();)  {  String  opt  =(String)iter.next();  if(opt!=  null)  {  tokens.add(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  options.iterator();  iter.hasNext();)  {  String  opt  =(String)iter.next();  if(opt!=  null)  {  tokens.add(opt);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String    opt    =(String)iter.next();    if(opt!=    null)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
94	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(iter);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(iter);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(iter);	  tryFallThrough(tokens,    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    else    if(stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
95	[BUG]  [BUGGY]  Option  options  =  options.getOptions(opt);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  options  =  options.getOptions(opt);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  options  =  options.getOptions(opt);	  if(stopAtNonOption)    {    processOptionToken(opt);    }    else    {    tokens.add(pos);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
96	[BUG]  [BUGGY]  final  Ilerator  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  final  Ilerator  <  String>  iter  =  options.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	final  Ilerator  <  String>  iter  =  options.iterator();	  Ilerator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
97	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  processPositionToken(opt);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  processPositionToken(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  processPositionToken(opt);  }	  else    if(stopAtNonOption)    {    processOptionToken(opt);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
98	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  processNonIdentifierToken(opt);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  processNonIdentifierToken(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  processNonIdentifierToken(opt);  }	  else    if(stopAtNonOption)    {    processOptionToken(opt);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
99	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  for(int  pos  =  0;  pos  <  options.size();  pos++)  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  for(int  pos  =  0;  pos  <  options.size();  pos++)  {  tokens.add(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  for(int  pos  =  0;  pos  <  options.size();  pos++)  {  tokens.add(opt);  }	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
100	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  pos  =(String)iter.next();  if(pos.equals( "   "))  {  tokens.add(pos);  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  pos  =(String)iter.next();  if(pos.equals( "   "))  {  tokens.add(pos);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  pos  =(String)iter.next();  if(pos.equals( "   "))  {  tokens.add(pos);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String    opt    =(String)iter.next();    if(opt.equals(   "   "))    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
101	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  iter.hasNext();)  {  String  opt  =(String)iter.next();  if(opt.equals( "   "))  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  iter.hasNext();)  {  String  opt  =(String)iter.next();  if(opt.equals( "   "))  {  tokens.add(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  options.iterator();  iter.hasNext();)  {  String  opt  =(String)iter.next();  if(opt.equals( "   "))  {  tokens.add(opt);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String    opt    =(String)iter.next();    if(opt.equals(   "   "))    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
102	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  option  =(String)iter.next();  if(option.equals( " "))  {  tokens.add(option);  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  option  =(String)iter.next();  if(option.equals( " "))  {  tokens.add(option);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  option  =(String)iter.next();  if(option.equals( " "))  {  tokens.add(option);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String    opt    =(String)iter.next();    if(opt.equals(   "   "))    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
103	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  processPositionToken(token);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  processPositionToken(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  processPositionToken(token);  }	  else    if(stopAtNonOption)    {    processOptionToken(token);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
104	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  processOpToken(token);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  processOpToken(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  processOpToken(token);  }	  else    if(stopAtNonOption)    {    processOptionToken(token);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
105	[BUG]  [BUGGY]  List  <  String>  iter  =  this.arguments.iterator();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  List  <  String>  iter  =  this.arguments.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	List  <  String>  iter  =  this.arguments.iterator();	  Iterator    <    String>    iter    =    this.arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	63	None	replace
106	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  if(!stopAtNonOption)  {  tokens.add(option);  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  if(!stopAtNonOption)  {  tokens.add(option);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  if(!stopAtNonOption)  {  tokens.add(option);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    if(!stopAtNonOption)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
107	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  if(!stopAtNonOption)  {  tokens.add(pos);  }  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  if(!stopAtNonOption)  {  tokens.add(pos);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  if(!stopAtNonOption)  {  tokens.add(pos);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    if(!stopAtNonOption)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
108	[BUG]  [BUGGY]  ArrayList  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  ArrayList  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	ArrayList  <  String>  iter  =  options.keySet().iterator();	  List    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
109	[BUG]  [BUGGY]  List  <  String>  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  List  <  String>  iter  =  tokens.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	List  <  String>  iter  =  tokens.iterator();	  Iterator    <    String>    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
110	[BUG]  [BUGGY]  for(String  opt  :  options)  {  tokens.add(opt.toLowerCase());  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(String  opt  :  options)  {  tokens.add(opt.toLowerCase());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(String  opt  :  options)  {  tokens.add(opt.toLowerCase());  }	  for(String    opt    :    arguments)    {    tokens.add(opt.toLowerCase());    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
111	[BUG]  [BUGGY]  for(String  opt  :  options)  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(String  opt  :  options)  {  tokens.add(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(String  opt  :  options)  {  tokens.add(opt);  }	  for(String    opt    :    arguments)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
112	[BUG]  [BUGGY]  for(String  opt  :  options.keySet())  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(String  opt  :  options.keySet())  {  tokens.add(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(String  opt  :  options.keySet())  {  tokens.add(opt);  }	  for(String    opt    :    arguments)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
113	[BUG]  [BUGGY]  if(options!=  null)  {  Iterator  <  Option>  iter  =  options.iterator();  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(options!=  null)  {  Iterator  <  Option>  iter  =  options.iterator();  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	if(options!=  null)  {  Iterator  <  Option>  iter  =  options.iterator();  }	  Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
114	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  Option>  iter  =  options.keySet().iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  Option>  iter  =  options.keySet().iterator();	  Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
115	[BUG]  [BUGGY]  Option  iter  =  options.getOptions(pos);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  iter  =  options.getOptions(pos);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  iter  =  options.getOptions(pos);	  Option    iter    =    options.getOption(opt);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
116	[BUG]  [BUGGY]  Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();	  Iterator    iter    =    this.tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
117	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(options[pos]);  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(options[pos]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(options[pos]);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String[]    arguments    =(String[])iter.next();    for(int    pos    =    0;    pos    <    arguments.length;    pos++)    {    tokens.add(options[pos]);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
118	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  option  =  options.getOption(opt,  stopAtNonOption);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
119	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  option  =  options.getOption(option);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
120	[BUG]  [BUGGY]  iter.set(pos,  options.indexOf(arguments[0]));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.set(pos,  options.indexOf(arguments[0]));  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter.set(pos,  options.indexOf(arguments[0]));	  iter.set(pos,    options.indexOf(opt));    	non-compiled	[CE]  <identifier>  expected	66	None	replace
121	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  option  =(String)iter.next();  tokens.add(option);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  option  =(String)iter.next();  tokens.add(option);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  option  =(String)iter.next();  tokens.add(option);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String    opt    =(String)iter.next();    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
122	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  pos  =(String)iter.next();  tokens.add(pos);  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  pos  =(String)iter.next();  tokens.add(pos);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  pos  =(String)iter.next();  tokens.add(pos);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String    opt    =(String)iter.next();    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
123	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator().next();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator().next();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  options.values().iterator().next();	  Iterator    <    String>    iter    =    options.iterator().next();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
124	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator().next();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator().next();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  options.keySet().iterator().next();	  Iterator    <    String>    iter    =    options.iterator().next();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
125	[BUG]  [BUGGY]  List  <  String>  iter  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  List  <  String>  iter  =  this.options.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	List  <  String>  iter  =  this.options.iterator();	  Iterator    <    String>    iter    =    this.options.iterator();    	non-compiled	[CE]  <identifier>  expected	62	None	replace
126	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String[]    arguments    =(String[])iter.next();    for(int    pos    =    0;    pos    <    arguments.length;    pos++)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
127	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String[]    arguments    =(String[])iter.next();    for(int    pos    =    0;    pos    <    arguments.length;    pos++)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
128	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =  iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =  iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =  iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String[]    arguments    =(String[])iter.next();    for(int    pos    =    0;    pos    <    arguments.length;    pos++)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
129	[BUG]  [BUGGY]  iter  =  options;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter  =  options;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =  options;	  iter    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
130	[BUG]  [BUGGY]  iter  =  options.emptyIterator();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter  =  options.emptyIterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =  options.emptyIterator();	  iter    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
131	[BUG]  [BUGGY]  while(stopAtNonOption  &&  tokens.contains(token))  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  while(stopAtNonOption  &&  tokens.contains(token))  {  tokens.add(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	while(stopAtNonOption  &&  tokens.contains(token))  {  tokens.add(token);	  tryFallThrough(tokens,    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
132	[BUG]  [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  gobble(opt);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  gobble(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tryFallThrough(tokens,  stopAtNonOption)  {  gobble(opt);  }	  tryFallThrough(tokens,    stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
133	[BUG]  [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  gobble(options);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  gobble(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tryFallThrough(tokens,  stopAtNonOption)  {  gobble(options);  }	  tryFallThrough(tokens,    stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
134	[BUG]  [BUGGY]  iter.setPosition(pos  -  1  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.setPosition(pos  -  1  +  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter.setPosition(pos  -  1  +  1);	  iter.setPosition(pos    -    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
135	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  Iterator  iter  =  tokens.add(tokens  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  Iterator  iter  =  tokens.add(tokens  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  Iterator  iter  =  tokens.add(tokens	  if(stopAtNonOption)    {    Iterator    iter    =    tokens.iterator();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
136	[BUG]  [BUGGY]  iter  =  stopAtNonOption?  gobbleToken(iter):  null;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter  =  stopAtNonOption?  gobbleToken(iter):  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =  stopAtNonOption?  gobbleToken(iter):  null;	  iter    =    stopAtNonOption?    gobble(iter):    null;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
137	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  pos);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(opt,  pos);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  option  =  options.getOption(opt,  pos);	  Option    option    =    options.getOption(pos);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
138	[BUG]  [BUGGY]  for(String  opt  :  arguments)  {  tokens.add(opt.toUpperCase());  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(String  opt  :  arguments)  {  tokens.add(opt.toUpperCase());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(String  opt  :  arguments)  {  tokens.add(opt.toUpperCase());  }	  for(String    opt    :    arguments)    {    tokens.add(opt.toLowerCase());    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
139	[BUG]  [BUGGY]  for(String  opt  :  options.keySet())  {  tokens.add(opt.toLowerCase());  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(String  opt  :  options.keySet())  {  tokens.add(opt.toLowerCase());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(String  opt  :  options.keySet())  {  tokens.add(opt.toLowerCase());  }	  for(String    opt    :    arguments)    {    tokens.add(opt.toLowerCase());    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
140	[BUG]  [BUGGY]  Option  iter  =  options.getOption(options);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  iter  =  options.getOption(options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  iter  =  options.getOption(options);	  Option    iter    =    options.getOption(pos);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
141	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  Iterator  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  Iterator  iter  =  arguments.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  Iterator  iter  =  arguments.iterator();	  if(stopAtNonOption)    {    Iterator    iter    =    arguments.iterator();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
142	[BUG]  [BUGGY]  else  {  stopAtNonOption  =  processOptionToken(token);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  {  stopAtNonOption  =  processOptionToken(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  {  stopAtNonOption  =  processOptionToken(token);  }	  else    if(stopAtNonOption)    {    processOptionToken(token);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
143	[BUG]  [BUGGY]  else  {  processOptionToken(token);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  {  processOptionToken(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  {  processOptionToken(token);  }	  else    if(stopAtNonOption)    {    processOptionToken(token);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
144	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.tokens.iterator();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  this.tokens.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  this.tokens.iterator();	  Iterator    <    String>    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
145	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  if(arguments.length  ==  0)  {  tokens.add(arguments[pos]);  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  if(arguments.length  ==  0)  {  tokens.add(arguments[pos]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  if(arguments.length  ==  0)  {  tokens.add(arguments[pos]);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String    opt    =(String)iter.next();    if(opt.equals(   "   "))    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
146	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  if(arguments.length!=  0)  {  tokens.add(arguments[pos]);  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  if(arguments.length!=  0)  {  tokens.add(arguments[pos]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  if(arguments.length!=  0)  {  tokens.add(arguments[pos]);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String    opt    =(String)iter.next();    if(opt.equals(   "   "))    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
147	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  Option>  iter  =  this.options.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  Option>  iter  =  this.options.iterator();	  Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
148	[BUG]  [BUGGY]  Set  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Set  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Set  <  String>  iter  =  options.keySet().iterator();	  List    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
149	[BUG]  [BUGGY]  iter  =(tokens.size()  ==  0)?  null  :  tokens.iterator();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter  =(tokens.size()  ==  0)?  null  :  tokens.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =(tokens.size()  ==  0)?  null  :  tokens.iterator();	  iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
150	[BUG]  [BUGGY]  iter  =  options.keySet().iterator().next();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter  =  options.keySet().iterator().next();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =  options.keySet().iterator().next();	  iter    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
151	[BUG]  [BUGGY]  Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  null;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  null;  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  null;	  Iterator    iter    =    this.tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
152	[BUG]  [BUGGY]  Option  iter  =  options.getOption(opt,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  iter  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  iter  =  options.getOption(opt,  stopAtNonOption);	  Option    iter    =    options.getOption(opt);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
153	[BUG]  [BUGGY]  Option  iter  =  options.getOption(option);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  iter  =  options.getOption(option);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  iter  =  options.getOption(option);	  Option    iter    =    options.getOption(opt);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
154	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =  iter.next();  if(arguments!=  null)  {  tokens.add(arguments[pos]);  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =  iter.next();  if(arguments!=  null)  {  tokens.add(arguments[pos]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =  iter.next();  if(arguments!=  null)  {  tokens.add(arguments[pos]);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String    opt    =(String)iter.next();    if(opt!=    null)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
155	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  argument  =(String[])iter.next();  if(arguments!=  null)  {  tokens.add(arguments[pos]);  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  argument  =(String[])iter.next();  if(arguments!=  null)  {  tokens.add(arguments[pos]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  argument  =(String[])iter.next();  if(arguments!=  null)  {  tokens.add(arguments[pos]);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String    opt    =(String)iter.next();    if(opt!=    null)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
156	[BUG]  [BUGGY]  Iterator  iter  =(this.options!=  null)?  this.options.iterator()  :  null;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =(this.options!=  null)?  this.options.iterator()  :  null;  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  iter  =(this.options!=  null)?  this.options.iterator()  :  null;	  Iterator    iter    =    this.options.iterator();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
157	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext())  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(options[pos]);  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext())  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(options[pos]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext())  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(options[pos]);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String[]    arguments    =(String[])iter.next();    for(int    pos    =    0;    pos    <    arguments.length;    pos++)    {    tokens.add(options[pos]);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
158	[BUG]  [BUGGY]  iter  =  tryFallThrough(tokens,  stopAtNonOption)  {  gobble(iter);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter  =  tryFallThrough(tokens,  stopAtNonOption)  {  gobble(iter);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =  tryFallThrough(tokens,  stopAtNonOption)  {  gobble(iter);  }	  tryFallThrough(tokens,    stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
159	[BUG]  [BUGGY]  iter  =  tryFallThrough(tokens,  stopAtNonOption)&  gobble(iter);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter  =  tryFallThrough(tokens,  stopAtNonOption)&  gobble(iter);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =  tryFallThrough(tokens,  stopAtNonOption)&  gobble(iter);	  tryFallThrough(tokens,    stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
160	[BUG]  [BUGGY]  iter  =  tryFallThrough(tokens,  stopAtNonOption)?  gobble(iter):  null;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter  =  tryFallThrough(tokens,  stopAtNonOption)?  gobble(iter):  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =  tryFallThrough(tokens,  stopAtNonOption)?  gobble(iter):  null;	  tryFallThrough(tokens,    stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
161	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt);  }	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
162	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  for(int  pos  =  0;  pos  <  arguments.size();  pos++)  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  for(int  pos  =  0;  pos  <  arguments.size();  pos++)  {  tokens.add(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  for(int  pos  =  0;  pos  <  arguments.size();  pos++)  {  tokens.add(opt);  }	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
163	[BUG]  [BUGGY]  tryFallThrough(tokens,  stopAtNonOption),  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tryFallThrough(tokens,  stopAtNonOption),  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tryFallThrough(tokens,  stopAtNonOption),  throw  new  IllegalArgumentException( " ");  }	  tryFallThrough(tokens,    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
164	[BUG]  [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  processOptionToken(token);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  processOptionToken(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tryFallThrough(tokens,  stopAtNonOption)  {  processOptionToken(token);  }	  if(stopAtNonOption)    {    processOptionToken(token);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
165	[BUG]  [BUGGY]  tryFallThrough(tokens.size())  {  processOptionToken(token);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tryFallThrough(tokens.size())  {  processOptionToken(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tryFallThrough(tokens.size())  {  processOptionToken(token);  }	  if(stopAtNonOption)    {    processOptionToken(token);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
166	[BUG]  [BUGGY]  tryFallThrough(tokens.iterator())  {  processOptionToken(token);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tryFallThrough(tokens.iterator())  {  processOptionToken(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tryFallThrough(tokens.iterator())  {  processOptionToken(token);  }	  if(stopAtNonOption)    {    processOptionToken(token);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
167	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  tokens.add(arguments[pos]);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  tokens.add(arguments[pos]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  tokens.add(arguments[pos]);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String    opt    =(String)iter.next();    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
168	[BUG]  [BUGGY]  else  {  processOptionToken(opt);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  {  processOptionToken(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  {  processOptionToken(opt);  }	  else    if(stopAtNonOption)    {    processOptionToken(opt);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
169	[BUG]  [BUGGY]  else  {  stopAtNonOption  =  processOptionToken(opt);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  {  stopAtNonOption  =  processOptionToken(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  {  stopAtNonOption  =  processOptionToken(opt);  }	  else    if(stopAtNonOption)    {    processOptionToken(opt);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
170	[BUG]  [BUGGY]  List  <  String>  tokens  =  options.list();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  List  <  String>  tokens  =  options.list();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	List  <  String>  tokens  =  options.list();	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    String[]    arguments    =(String[])iter.next();    for(int    pos    =    0;    pos    <    arguments.length;    pos++)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
171	[BUG]  [BUGGY]  iter  =(options  ==  null)?  options.iterator()  :  new  String[pos];  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter  =(options  ==  null)?  options.iterator()  :  new  String[pos];  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =(options  ==  null)?  options.iterator()  :  new  String[pos];	  iter    =(options    ==    null)?    options.iterator()    :    null;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
172	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.arguments!=  null)?  this.arguments.iterator()  :  null;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =(this.arguments!=  null)?  this.arguments.iterator()  :  null;  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =(this.arguments!=  null)?  this.arguments.iterator()  :  null;	  Iterator    <    String>    iter    =    this.arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	63	None	replace
173	[BUG]  [BUGGY]  pendOrder(opt,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  pendOrder(opt,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	pendOrder(opt,  stopAtNonOption);	  if(stopAtNonOption)    {    processOptionToken(opt);    }    else    {    tokens.add(pos);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
174	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.options!=  null)?  this.options.iterator()  :  null;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =(this.options!=  null)?  this.options.iterator()  :  null;  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =(this.options!=  null)?  this.options.iterator()  :  null;	  Iterator    <    String>    iter    =    this.options.iterator();    	non-compiled	[CE]  <identifier>  expected	62	None	replace
175	[BUG]  [BUGGY]  Iterator  iter  =  options.iterator();  pos.hasNext();)  {  if(!stopAtNonOption)  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =  options.iterator();  pos.hasNext();)  {  if(!stopAtNonOption)  {  tokens.add(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  iter  =  options.iterator();  pos.hasNext();)  {  if(!stopAtNonOption)  {  tokens.add(opt);  }	  for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    if(!stopAtNonOption)    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
176	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator().iterator();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  options.iterator().iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  options.iterator().iterator();	  Iterator    <    String>    iter    =    options.iterator().next();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
177	[BUG]  [BUGGY]  Option  iter  =  options.getIterator(opt);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  iter  =  options.getIterator(opt);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  iter  =  options.getIterator(opt);	  Option    iter    =    options.getIterator(pos);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
178	[BUG]  [BUGGY]  Option  iter  =  options.getIterator(optional);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  iter  =  options.getIterator(optional);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  iter  =  options.getIterator(optional);	  Option    iter    =    options.getIterator(pos);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
179	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processOptionToken(token);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processOptionToken(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	parent  ==  null  &&  stopAtNonOption)  {  processOptionToken(token);  }	  if(stopAtNonOption)    {    processOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
180	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	parent  ==  null  &&  stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    processOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
181	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(opt);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	parent  ==  null  &&  stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(opt);  }	  if(stopAtNonOption)    {    processOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
