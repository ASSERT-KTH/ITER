bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  options  =  options.get(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  Option  options  =  options.get(token,  stopAtNonOption);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	Option  options  =  options.get(token,  stopAtNonOption);	  Option    options    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
2	[BUG]  [BUGGY]  Option  options  =  options.get(token)+  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  Option  options  =  options.get(token)+  stopAtNonOption;  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	Option  options  =  options.get(token)+  stopAtNonOption;	  Option    options    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
3	[BUG]  [BUGGY]  tokens.add(token);  eatTheRest  =  StopAtNonOption;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token);  eatTheRest  =  StopAtNonOption;  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token);  eatTheRest  =  StopAtNonOption;	  if(stopAtNonOption)    {    tokens.add(token);    eatTheRest    =    stopAtNonOption;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
4	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption?  null  :  token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  stopAtNonOption?  null  :  token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  stopAtNonOption?  null  :  token);	  tokens.add(token,    stopAtNonOption?    stopAtNonOption    :    token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
5	[BUG]  [BUGGY]  tokens.add(Token.NAME,  stopAtNonOption?  null  :  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(Token.NAME,  stopAtNonOption?  null  :  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(Token.NAME,  stopAtNonOption?  null  :  stopAtNonOption);	  tokens.add(Token.NAME,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
6	[BUG]  [BUGGY]  tokens.add(Token.NAME,  stopAtNonOption  &&  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(Token.NAME,  stopAtNonOption  &&  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(Token.NAME,  stopAtNonOption  &&  stopAtNonOption);	  tokens.add(Token.NAME,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
7	[BUG]  [BUGGY]  tokens.add(token  + ",  stopAtNonOption,  ' "  +  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token  + ",  stopAtNonOption,  ' "  +  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token  + ",  stopAtNonOption,  ' "  +  stopAtNonOption);	  tokens.add(token    +   ",    stopAtNonOption,       "    +    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
8	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }	  if(stopAtNonOption)    {    tokens.add(token,    stopAtNonOption);    }    else    {    options.add(token);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
9	[BUG]  [BUGGY]  tokens.add(token  +  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token  +  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token  +  stopAtNonOption);	  tokens.add(stopAtNonOption    &&    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
10	[BUG]  [BUGGY]  tokens.add(token  &&  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token  &&  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token  &&  stopAtNonOption);	  tokens.add(stopAtNonOption    &&    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
11	[BUG]  [BUGGY]  tokens.add(token?  stopAtNonOption  :  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token?  stopAtNonOption  :  token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token?  stopAtNonOption  :  token,  stopAtNonOption);	  tokens.add(token?    stopAtNonOption    :    token);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
12	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  for(String  token  :  tokens)  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  for(String  token  :  tokens)  {  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  for(String  token  :  tokens)  {	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    List    <    String>    tokens    =    new    ArrayList    <    String>();    tokens.add(token);    for(String    token    :    tokens)    {    tokens    	non-compiled	[CE]  <identifier>  expected	27	None	replace
13	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  for(String  token  :  tokens)  {  token  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  for(String  token  :  tokens)  {  token  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  for(String  token  :  tokens)  {  token	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    List    <    String>    tokens    =    new    ArrayList    <    String>();    tokens.add(token);    for(String    token    :    tokens)    {    tokens    	non-compiled	[CE]  <identifier>  expected	27	None	replace
14	[BUG]  [BUGGY]  tokens.add(token,  StopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  StopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  StopAtNonOption);	  tokens.add(Token.EMPTY,    StopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
15	[BUG]  [BUGGY]  tokens.add(Token.EMPTY,  StopAtNonOption,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(Token.EMPTY,  StopAtNonOption,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(Token.EMPTY,  StopAtNonOption,  stopAtNonOption);	  tokens.add(Token.EMPTY,    StopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
16	[BUG]  [BUGGY]  while(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  while(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	while(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  }	  while(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
17	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  Collection  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens.add(token);  }  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  Collection  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens.add(token);  }  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  Collection  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens.add(token);  }  }	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    Collection    <    String>    tokens    =    new    ArrayList    <    String>();    for(String    token    :    tokens)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
18	[BUG]  [BUGGY]  tokens.add(token  +  stopAtNonOption?  token  :  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token  +  stopAtNonOption?  token  :  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token  +  stopAtNonOption?  token  :  stopAtNonOption);	  tokens.add(token    +    stopAtNonOption?    stopAtNonOption    :    token);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
19	[BUG]  [BUGGY]  tokens.add(token  +  StopAtNonOption?  stopAtNonOption  :  token);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token  +  StopAtNonOption?  stopAtNonOption  :  token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token  +  StopAtNonOption?  stopAtNonOption  :  token);	  tokens.add(token    +    stopAtNonOption?    stopAtNonOption    :    token);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
20	[BUG]  [BUGGY]  tokens.add(token  +  stopAtNonOption?  stopAtNonOption  :  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token  +  stopAtNonOption?  stopAtNonOption  :  token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token  +  stopAtNonOption?  stopAtNonOption  :  token,  stopAtNonOption);	  tokens.add(token    +    stopAtNonOption?    stopAtNonOption    :    token);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
21	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)&&!options.hasOption(token);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  options.put(token,  stopAtNonOption)&&!options.hasOption(token);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	options.put(token,  stopAtNonOption)&&!options.hasOption(token);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
22	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption  &&  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  options.put(token,  stopAtNonOption  &&  stopAtNonOption);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	options.put(token,  stopAtNonOption  &&  stopAtNonOption);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
23	[BUG]  [BUGGY]  Options  options  =(Option)options.get(token);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  Options  options  =(Option)options.get(token);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	Options  options  =(Option)options.get(token);	  options.put(token,    StopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
24	[BUG]  [BUGGY]  options.put(token,  StopAtNonOption.EMPTY);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  options.put(token,  StopAtNonOption.EMPTY);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	options.put(token,  StopAtNonOption.EMPTY);	  options.put(token,    StopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
25	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  ||  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  stopAtNonOption  ||  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  stopAtNonOption  ||  stopAtNonOption);	  tokens.add(token,    stopAtNonOption    &&    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
26	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    List    <    String>    tokens    =    new    ArrayList    <    String>();    for(String    token    :    tokens)    {    tokens.add    	non-compiled	[CE]  <identifier>  expected	34	None	replace
27	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)&&!options.hasValue(token);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  stopAtNonOption)&&!options.hasValue(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  stopAtNonOption)&&!options.hasValue(token);	  tokens.add(token,    stopAtNonOption)&&!options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
28	[BUG]  [BUGGY]  tokens.addAll(stopAtNonOption  &&  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.addAll(stopAtNonOption  &&  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.addAll(stopAtNonOption  &&  stopAtNonOption);	  tokens.addAll(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
29	[BUG]  [BUGGY]  tokens.addAll(stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.addAll(stopAtNonOption,  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.addAll(stopAtNonOption,  options);	  tokens.addAll(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
30	[BUG]  [BUGGY]  tokens.add(token)||  stopAtNonOption  ||  eatTheRest;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token)||  stopAtNonOption  ||  eatTheRest;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token)||  stopAtNonOption  ||  eatTheRest;	  tokens.add(token)||    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
31	[BUG]  [BUGGY]  tokens.add(token)||  stopAtNonOption  ||  options.hasOption(token);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token)||  stopAtNonOption  ||  options.hasOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token)||  stopAtNonOption  ||  options.hasOption(token);	  tokens.add(token)||    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
32	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  options);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  options);	  TokenBuffer    tokens    =    new    TokenBuffer(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
33	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  eatTheRest);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  eatTheRest);	  TokenBuffer    tokens    =    new    TokenBuffer(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
34	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  options.size());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  options.size());  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  options.size());	  TokenBuffer    tokens    =    new    TokenBuffer(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
35	[BUG]  [BUGGY]  tokens.add(token)||  eatTheRest;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token)||  eatTheRest;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token)||  eatTheRest;	  tokens.add(token)&&    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
36	[BUG]  [BUGGY]  tokens.add(token)/  eatTheRest;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token)/  eatTheRest;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token)/  eatTheRest;	  tokens.add(token)&&    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
37	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  +  1,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  +  1,  stopAtNonOption);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length()  +  1,  stopAtNonOption);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
38	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  -  1,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  -  1,  stopAtNonOption);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length()  -  1,  stopAtNonOption);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
39	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  token,  stopAtNonOption);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  token,  stopAtNonOption);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
40	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  stopAtNonOption,  options);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  stopAtNonOption,  options);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
41	[BUG]  [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	Option  options  =  options.getOption(token,  stopAtNonOption);	  Option    options    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
42	[BUG]  [BUGGY]  Option  options  =  stopAtNonOption?  options.getOption(token):  null;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  Option  options  =  stopAtNonOption?  options.getOption(token):  null;  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	Option  options  =  stopAtNonOption?  options.getOption(token):  null;	  Option    options    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
43	[BUG]  [BUGGY]  Option  options  =  stopAtNonOption?  options.getOption(token):  token;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  Option  options  =  stopAtNonOption?  options.getOption(token):  token;  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	Option  options  =  stopAtNonOption?  options.getOption(token):  token;	  Option    options    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
44	[BUG]  [BUGGY]  tokens.add( "-- ",  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add( "-- ",  stopAtNonOption);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add( "-- ",  stopAtNonOption);	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
45	[BUG]  [BUGGY]  tokens.add( "-- "  +  token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add( "-- "  +  token);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add( "-- "  +  token);	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
46	[BUG]  [BUGGY]  tokens.add( "-- "  +  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add( "-- "  +  stopAtNonOption);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add( "-- "  +  stopAtNonOption);	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
47	[BUG]  [BUGGY]  while(stopAtNonOption  &&  options.contains(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  while(stopAtNonOption  &&  options.contains(token))  {  tokens.add(token);  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	while(stopAtNonOption  &&  options.contains(token))  {  tokens.add(token);  }	  while(stopAtNonOption    &&    tokens.contains(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
48	[BUG]  [BUGGY]  while(stopAtNonOption  &&  options.containsKey(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  while(stopAtNonOption  &&  options.containsKey(token))  {  tokens.add(token);  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	while(stopAtNonOption  &&  options.containsKey(token))  {  tokens.add(token);  }	  while(stopAtNonOption    &&    tokens.contains(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
49	[BUG]  [BUGGY]  tokens.put(token,  stopAtNonOption)&&!options.hasOption(token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.put(token,  stopAtNonOption)&&!options.hasOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.put(token,  stopAtNonOption)&&!options.hasOption(token);	  tokens.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
50	[BUG]  [BUGGY]  tokens.put(token,  stopAtNonOption)&&  options.hasOption(token);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.put(token,  stopAtNonOption)&&  options.hasOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.put(token,  stopAtNonOption)&&  options.hasOption(token);	  tokens.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
51	[BUG]  [BUGGY]  while(stopAtNonOption  &&  options.contains(token))  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  while(stopAtNonOption  &&  options.contains(token))  {  tokens.add(token);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	while(stopAtNonOption  &&  options.contains(token))  {  tokens.add(token);	  while(stopAtNonOption    &&    tokens.contains(token))    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
52	[BUG]  [BUGGY]  while(stopAtNonOption  &&  options.containsKey(token))  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  while(stopAtNonOption  &&  options.containsKey(token))  {  tokens.add(token);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	while(stopAtNonOption  &&  options.containsKey(token))  {  tokens.add(token);	  while(stopAtNonOption    &&    tokens.contains(token))    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
53	[BUG]  [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token))  {  tokens.add(token);  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption  &&  tokens.contains(token))  {  tokens.add(token);  }	  while(stopAtNonOption    &&    tokens.contains(token))    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
54	[BUG]  [BUGGY]  tokens.add(token)&&  stopAtNonOption  =  false;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token)&&  stopAtNonOption  =  false;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token)&&  stopAtNonOption  =  false;	  tokens.add(token)&&    stopAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
55	[BUG]  [BUGGY]  tokens.add(token)||  stopAtNonOption  =  true;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token)||  stopAtNonOption  =  true;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token)||  stopAtNonOption  =  true;	  tokens.add(token)&&    stopAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
56	[BUG]  [BUGGY]  tokens.add(token)/&  stopAtNonOption  =  true;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token)/&  stopAtNonOption  =  true;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token)/&  stopAtNonOption  =  true;	  tokens.add(token)&&    stopAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
57	[BUG]  [BUGGY]  tokens.add(stopAtNonOption)&&  token  =  true;  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(stopAtNonOption)&&  token  =  true;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(stopAtNonOption)&&  token  =  true;	  tokens.add(token)&&    stopAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
58	[BUG]  [BUGGY]  if(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption    ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
59	[BUG]  [BUGGY]  if(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens.add(token);  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens.add(token);  }	  if(stopAtNonOption    ||    stopAtNonOption)    {    tokens.add(token);    }    else    {    List    <    String>    tokens    =    new    ArrayList    <    String>();    for(String    token    :    tokens)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
60	[BUG]  [BUGGY]  Option  token  =  options.get(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  Option  token  =  options.get(token,  stopAtNonOption);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	Option  token  =  options.get(token,  stopAtNonOption);	  Option    token    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
61	[BUG]  [BUGGY]  Option  token  =  options.get(token)+ "  - "  +  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  Option  token  =  options.get(token)+ "  - "  +  stopAtNonOption;  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	Option  token  =  options.get(token)+ "  - "  +  stopAtNonOption;	  Option    token    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
62	[BUG]  [BUGGY]  Option  token  =  options.get(token  +  1);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  Option  token  =  options.get(token  +  1);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	Option  token  =  options.get(token  +  1);	  Option    token    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
63	[BUG]  [BUGGY]  options.addOptionToken(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  options.addOptionToken(token,  stopAtNonOption);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	options.addOptionToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.addOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
64	[BUG]  [BUGGY]  tokens.add( "null ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add( "null ");  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add( "null ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	16	None	replace
65	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add( "- ");  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add( "- ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	16	None	replace
66	[BUG]  [BUGGY]  tokens.add( ": ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add( ": ");  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add( ": ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	16	None	replace
67	[BUG]  [BUGGY]  options.addOptionToken(token);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  options.addOptionToken(token);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	options.addOptionToken(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.addOptionToken(token);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
68	[BUG]  [BUGGY]  if(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  }	  if(stopAtNonOption    ||    stopAtNonOption)    {    tokens.add(token);    }    else    {    List    <    String>    tokens    =    new    ArrayList    <    String>();    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
69	[BUG]  [BUGGY]  tokens.add(token)&&  stopAtNonOption  ||  stopAtNonOption;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token)&&  stopAtNonOption  ||  stopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token)&&  stopAtNonOption  ||  stopAtNonOption;	  tokens.add(token)&&    stopAtNonOption    ||    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
70	[BUG]  [BUGGY]  tokens.add(token)&&  stopAtNonOption  &&  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token)&&  stopAtNonOption  &&  stopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token)&&  stopAtNonOption  &&  stopAtNonOption;	  tokens.add(token)&&    stopAtNonOption    ||    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
71	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  for(String  token  :  tokens)  {  tokens.  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  for(String  token  :  tokens)  {  tokens.  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  for(String  token  :  tokens)  {  tokens.	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    List    <    String>    tokens    =    new    ArrayList    <    String>();    tokens.add(token);    for(String    token    :    tokens)    {    tokens.add    	non-compiled	[CE]  <identifier>  expected	25	None	replace
72	[BUG]  [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption,  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(Token.EMPTY,  stopAtNonOption,  eatTheRest);	  tokens.add(Token.EMPTY,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
73	[BUG]  [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption  +  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption  +  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(Token.EMPTY,  stopAtNonOption  +  1);	  tokens.add(Token.EMPTY,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
74	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption?  Boolean.FALSE  :  Boolean.TRUE);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  stopAtNonOption?  Boolean.FALSE  :  Boolean.TRUE);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  stopAtNonOption?  Boolean.FALSE  :  Boolean.TRUE);	  tokens.add(token,    stopAtNonOption?    Boolean.TRUE    :    Boolean.FALSE);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
75	[BUG]  [BUGGY]  tokens.add(token,  StopAtNonOption?  Boolean.TRUE  :  Boolean.FALSE);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  StopAtNonOption?  Boolean.TRUE  :  Boolean.FALSE);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  StopAtNonOption?  Boolean.TRUE  :  Boolean.FALSE);	  tokens.add(token,    stopAtNonOption?    Boolean.TRUE    :    Boolean.FALSE);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
76	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption  &&  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption  &&  stopAtNonOption);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption  &&  stopAtNonOption);	  TokenBuffer    tokens    =    new    TokenBuffer(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
77	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  StopAtNonOption;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  StopAtNonOption;  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  StopAtNonOption;  }	  if(stopAtNonOption)    {    tokens.add(token);    eatTheRest    =    stopAtNonOption;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
78	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption?  null  :  stopAtNonOption)  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  stopAtNonOption?  null  :  stopAtNonOption)  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  stopAtNonOption?  null  :  stopAtNonOption)	  tokens.add(token,    stopAtNonOption?    null    :    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
79	[BUG]  [BUGGY]  tokens.add( "eatTheRest ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add( "eatTheRest ");  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add( "eatTheRest ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	16	None	replace
80	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption?  key  :  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  stopAtNonOption?  key  :  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  stopAtNonOption?  key  :  stopAtNonOption);	  tokens.add(token,    stopAtNonOption?    token    :    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
81	[BUG]  [BUGGY]  Option  options  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  Option  options  =  options.getOption(stopAtNonOption);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	Option  options  =  options.getOption(stopAtNonOption);	  Option    options    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
82	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)+  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  Option  options  =  options.getOption(token)+  stopAtNonOption;  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	Option  options  =  options.getOption(token)+  stopAtNonOption;	  Option    options    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
83	[BUG]  [BUGGY]  while(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  while(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	while(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }	  while(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
84	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption?  endAtNonOption  :  token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  stopAtNonOption?  endAtNonOption  :  token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  stopAtNonOption?  endAtNonOption  :  token);	  tokens.add(token,    stopAtNonOption?    stopAtNonOption    :    token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
85	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption?  stopAtNonOption  :  null);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  stopAtNonOption?  stopAtNonOption  :  null);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  stopAtNonOption?  stopAtNonOption  :  null);	  tokens.add(token,    stopAtNonOption?    stopAtNonOption    :    token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
86	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens.  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens.  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens.	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    List    <    String>    tokens    =    new    ArrayList    <    String>();    for(String    token    :    tokens)    {    tokens.add    	non-compiled	[CE]  <identifier>  expected	34	None	replace
87	[BUG]  [BUGGY]  tokens.add(Token.NAME,  StopAtNonOption.EXPR_RESULT);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(Token.NAME,  StopAtNonOption.EXPR_RESULT);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(Token.NAME,  StopAtNonOption.EXPR_RESULT);	  tokens.add(Token.NAME,    StopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
88	[BUG]  [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption?  null  :  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption?  null  :  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(Token.EMPTY,  stopAtNonOption?  null  :  stopAtNonOption);	  tokens.add(Token.EMPTY,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
89	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)&&!options.hasOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  stopAtNonOption)&&!options.hasOption(stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  stopAtNonOption)&&!options.hasOption(stopAtNonOption);	  tokens.add(token,    stopAtNonOption)&&!options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
90	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)&&!options.hasOption(eatTheRest);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  stopAtNonOption)&&!options.hasOption(eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  stopAtNonOption)&&!options.hasOption(eatTheRest);	  tokens.add(token,    stopAtNonOption)&&!options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
91	[BUG]  [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  }  else  {  Collection  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  }  else  {  Collection  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  }  else  {  Collection  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  }	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    Collection    <    String>    tokens    =    new    ArrayList    <    String>();    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
92	[BUG]  [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  for(String  token  :  tokens)  {  tokens  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  for(String  token  :  tokens)  {  tokens  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  for(String  token  :  tokens)  {  tokens	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    List    <    String>    tokens    =    new    ArrayList    <    String>();    tokens.add(token);    for(String    token    :    tokens)    {    tokens    	non-compiled	[CE]  <identifier>  expected	27	None	replace
93	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  StopAtNonOption;  }  else  {  options.put(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  StopAtNonOption;  }  else  {  options.put(token,  stopAtNonOption);  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  StopAtNonOption;  }  else  {  options.put(token,  stopAtNonOption);  }	  if(stopAtNonOption)    {    tokens.add(token);    eatTheRest    =    stopAtNonOption;    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
94	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)&&  stopAtNonOption;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  stopAtNonOption)&&  stopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  stopAtNonOption)&&  stopAtNonOption;	  tokens.add(token,    stopAtNonOption    &&    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
95	[BUG]  [BUGGY]  tokens.put(token,  stopAtNonOption  &&  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.put(token,  stopAtNonOption  &&  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.put(token,  stopAtNonOption  &&  stopAtNonOption);	  tokens.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
96	[BUG]  [BUGGY]  tokens.put(token,  stopAtNonOption)&&  eatTheRest;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.put(token,  stopAtNonOption)&&  eatTheRest;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.put(token,  stopAtNonOption)&&  eatTheRest;	  tokens.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
97	[BUG]  [BUGGY]  tokens.add(stopAtNonOption)&&  eatTheRest;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(stopAtNonOption)&&  eatTheRest;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(stopAtNonOption)&&  eatTheRest;	  tokens.add(token)&&    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
98	[BUG]  [BUGGY]  tokens.add(token)/&  eatTheRest;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token)/&  eatTheRest;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token)/&  eatTheRest;	  tokens.add(token)&&    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
99	[BUG]  [BUGGY]  tokens.add(token  + ",  stopAtNonOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token  + ",  stopAtNonOption,  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token  + ",  stopAtNonOption,  eatTheRest);	  tokens.add(token    +   ",    stopAtNonOption,       "    +    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
100	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  Option  option  =  options.getOption(token);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	Option  option  =  options.getOption(token);	  if(stopAtNonOption)    {    tokens.add(token,    stopAtNonOption);    }    else    {    options.add(token);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
101	[BUG]  [BUGGY]  Option  token  =  options.get(token)+  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  Option  token  =  options.get(token)+  stopAtNonOption;  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	Option  token  =  options.get(token)+  stopAtNonOption;	  Option    token    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
102	[BUG]  [BUGGY]  Option  token  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  Option  token  =  options.getOption(token);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	Option  token  =  options.getOption(token);	  Option    token    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
103	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption    ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
104	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)&&!stopAtNonOption;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  options.put(token,  stopAtNonOption)&&!stopAtNonOption;  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	options.put(token,  stopAtNonOption)&&!stopAtNonOption;	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
105	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)&&  tokens.contains(token);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  options.put(token,  stopAtNonOption)&&  tokens.contains(token);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	options.put(token,  stopAtNonOption)&&  tokens.contains(token);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
106	[BUG]  [BUGGY]  tokens.add(Token.NAME,  stopAtNonOption)&&!options.hasOption(token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(Token.NAME,  stopAtNonOption)&&!options.hasOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(Token.NAME,  stopAtNonOption)&&!options.hasOption(token);	  tokens.add(Token.NAME,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
107	[BUG]  [BUGGY]  Option  options  =  options.getOptions(token);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  Option  options  =  options.getOptions(token);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	Option  options  =  options.getOptions(token);	  Option    options    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
108	[BUG]  [BUGGY]  tokens.add(stopAtNonOption  +  token?  stopAtNonOption  :  token);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(stopAtNonOption  +  token?  stopAtNonOption  :  token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(stopAtNonOption  +  token?  stopAtNonOption  :  token);	  tokens.add(token    +    stopAtNonOption?    stopAtNonOption    :    token);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
109	[BUG]  [BUGGY]  while(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  while(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	while(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);	  while(stopAtNonOption    &&    tokens.contains(token))    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
110	[BUG]  [BUGGY]  tokens.addAll(stopAtNonOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.addAll(stopAtNonOption,  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.addAll(stopAtNonOption,  eatTheRest);	  tokens.addAll(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
111	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  Collection  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens.add  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  Collection  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens.add  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  Collection  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens.add	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    Collection    <    String>    tokens    =    new    ArrayList    <    String>();    for(String    token    :    tokens)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
112	[BUG]  [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  }  else  {  Collection  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  }  else  {  Collection  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens.add(token);  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  }  else  {  Collection  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens.add(token);  }	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    Collection    <    String>    tokens    =    new    ArrayList    <    String>();    for(String    token    :    tokens)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
113	[BUG]  [BUGGY]  tokens.add(token)||  stopAtNonOption  =  false;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token)||  stopAtNonOption  =  false;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token)||  stopAtNonOption  =  false;	  tokens.add(token)||    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
114	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eattheRest  =  stopAtNonOption;  }  else  {  options.addOptionToken(token);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eattheRest  =  stopAtNonOption;  }  else  {  options.addOptionToken(token);  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption)  {  tokens.add(token);  eattheRest  =  stopAtNonOption;  }  else  {  options.addOptionToken(token);  }	  if(stopAtNonOption)    {    tokens.add(token);    eatTheRest    =    stopAtNonOption;    }    else    {    options.addOptionToken(token);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
115	[BUG]  [BUGGY]  tokens.add(token)&&  eatTheRest  =  true;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token)&&  eatTheRest  =  true;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token)&&  eatTheRest  =  true;	  tokens.add(token)&&    stopAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
116	[BUG]  [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    tokens.add(token);    eatTheRest    =    stopAtNonOption;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
117	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  eatTheRest  =  stopAtNonOption;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  eatTheRest  =  stopAtNonOption;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  eatTheRest  =  stopAtNonOption;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    tokens.add(token);    eatTheRest    =    stopAtNonOption;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
118	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption?  token  :  null);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  stopAtNonOption?  token  :  null);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  stopAtNonOption?  token  :  null);	  tokens.add(token,    stopAtNonOption?    token    :    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
119	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption?  token  :  StopAtNonOption.EXPR_RESULT);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  stopAtNonOption?  token  :  StopAtNonOption.EXPR_RESULT);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  stopAtNonOption?  token  :  StopAtNonOption.EXPR_RESULT);	  tokens.add(token,    stopAtNonOption?    token    :    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
120	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption?  token  :  StopAtNonOption.EMPTY);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  stopAtNonOption?  token  :  StopAtNonOption.EMPTY);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  stopAtNonOption?  token  :  StopAtNonOption.EMPTY);	  tokens.add(token,    stopAtNonOption?    token    :    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
121	[BUG]  [BUGGY]  tokens.add(token)&&  stopAtNonOption  &&  eatTheRest;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token)&&  stopAtNonOption  &&  eatTheRest;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token)&&  stopAtNonOption  &&  eatTheRest;	  tokens.add(token)&&    stopAtNonOption    ||    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
122	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  for(String  token  :  tokens)  {  tokens.add(  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  for(String  token  :  tokens)  {  tokens.add(  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  for(String  token  :  tokens)  {  tokens.add(	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    List    <    String>    tokens    =    new    ArrayList    <    String>();    tokens.add(token);    for(String    token    :    tokens)    {    tokens.add(token);    }    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
123	[BUG]  [BUGGY]  tokens.add(token  + ",  stopAtNonOption,  eatTheRest, "  +  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token  + ",  stopAtNonOption,  eatTheRest, "  +  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token  + ",  stopAtNonOption,  eatTheRest, "  +  stopAtNonOption);	  tokens.add(token    +   ",    stopAtNonOption,       "    +    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
124	[BUG]  [BUGGY]  tokens.add(token?  StopAtNonOption  :  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token?  StopAtNonOption  :  token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token?  StopAtNonOption  :  token,  stopAtNonOption);	  tokens.add(token?    stopAtNonOption    :    token);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
125	[BUG]  [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption?  Boolean.TRUE  :  Boolean.FALSE);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption?  Boolean.TRUE  :  Boolean.FALSE);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(Token.EMPTY,  stopAtNonOption?  Boolean.TRUE  :  Boolean.FALSE);	  tokens.add(Token.EMPTY,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
126	[BUG]  [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption  &&  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption  &&  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(Token.EMPTY,  stopAtNonOption  &&  stopAtNonOption);	  tokens.add(Token.EMPTY,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
127	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)||  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  Option  options  =  options.getOption(token)||  stopAtNonOption;  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	Option  options  =  options.getOption(token)||  stopAtNonOption;	  Option    options    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
128	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)&&  options.hasOption(token);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  stopAtNonOption)&&  options.hasOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  stopAtNonOption)&&  options.hasOption(token);	  tokens.add(token,    stopAtNonOption)&&!options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
129	[BUG]  [BUGGY]  tokens.add(token,  StopAtNonOption)&&!options.hasOption(token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  StopAtNonOption)&&!options.hasOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  StopAtNonOption)&&!options.hasOption(token);	  tokens.add(token,    stopAtNonOption)&&!options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
130	[BUG]  [BUGGY]  ters.add(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  ters.add(token,  stopAtNonOption);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	ters.add(token,  stopAtNonOption);	  if(stopAtNonOption)    {    tokens.add(token,    stopAtNonOption);    }    else    {    options.add(token);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
131	[BUG]  [BUGGY]  tokens.add(Token.NAME,  stopAtNonOption?  Boolean.TRUE  :  Boolean.FALSE);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(Token.NAME,  stopAtNonOption?  Boolean.TRUE  :  Boolean.FALSE);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(Token.NAME,  stopAtNonOption?  Boolean.TRUE  :  Boolean.FALSE);	  tokens.add(Token.NAME,    StopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
132	[BUG]  [BUGGY]  Option  token  =  options.get(token)&  0xff;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  Option  token  =  options.get(token)&  0xff;  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	Option  token  =  options.get(token)&  0xff;	  Option    token    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
133	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption?  options.stopAtNonOption  :  token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  stopAtNonOption?  options.stopAtNonOption  :  token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  stopAtNonOption?  options.stopAtNonOption  :  token);	  tokens.add(token,    stopAtNonOption?    stopAtNonOption    :    token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
134	[BUG]  [BUGGY]  tokens.add(token)/  ||  stopAtNonOption;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token)/  ||  stopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token)/  ||  stopAtNonOption;	  tokens.add(token)||    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
135	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(stopAtNonOption);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(stopAtNonOption);	  if(stopAtNonOption    ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
136	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(stopAtNonOption,  token);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(stopAtNonOption,  token);  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(stopAtNonOption,  token);	  if(stopAtNonOption    ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
137	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  token.length());  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  token.length());  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  token.length());	  TokenBuffer    tokens    =    new    TokenBuffer(token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
138	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption?  null  :  endAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token,  stopAtNonOption?  null  :  endAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  stopAtNonOption?  null  :  endAtNonOption);	  tokens.add(token,    stopAtNonOption?    null    :    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
139	[BUG]  [BUGGY]  while(stopAtNonOption  &&  tokens.contains(token)||  tokens.contains(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  while(stopAtNonOption  &&  tokens.contains(token)||  tokens.contains(token))  {  tokens.add(token);  }  [BUGGY]      tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	while(stopAtNonOption  &&  tokens.contains(token)||  tokens.contains(token))  {  tokens.add(token);  }	  while(stopAtNonOption    &&    tokens.contains(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
140	[BUG]  [BUGGY]  tokens.add(token  +  StopAtNonOption?  stopAtNonOption  :  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token  +  StopAtNonOption?  stopAtNonOption  :  token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token  +  StopAtNonOption?  stopAtNonOption  :  token,  stopAtNonOption);	  tokens.add(token    +    stopAtNonOption?    stopAtNonOption    :    token);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
141	[BUG]  [BUGGY]  tokens.add(token  +  stopAtNonOption?  null  :  token);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }        [BUGGY]  tokens.add(token  +  stopAtNonOption?  null  :  token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token  +  stopAtNonOption?  null  :  token);	  tokens.add(token    +    stopAtNonOption?    stopAtNonOption    :    token);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
