bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>(options);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  LinkedList  <  Option>(options);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  LinkedList  <  Option>(options);	  tokens    =    new    ArrayList    <    Option>(options);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
2	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options,  options.size());  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  ArrayList  <  Option>(options,  options.size());  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  ArrayList  <  Option>(options,  options.size());	  tokens    =    new    ArrayList    <    Option>(options);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
3	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(tokens.size());  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(tokens.size());  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newArrayList(tokens.size());	  tokens    =    Lists.newArrayList(tokens);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
4	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(this.tokens);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(this.tokens);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newArrayList(this.tokens);	  tokens    =    Lists.newArrayList(tokens);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
5	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.ZERO,  tokens);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.ZERO,  tokens);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.ZERO,  tokens);	  TokenBuffer    tokens    =    new    TokenBuffer(TokenBuffer.ZERO);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
6	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.ZERO,  1);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.ZERO,  1);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.ZERO,  1);	  TokenBuffer    tokens    =    new    TokenBuffer(TokenBuffer.ZERO);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
7	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.ZERO,  Integer.MAX_VALUE);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.ZERO,  Integer.MAX_VALUE);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.ZERO,  Integer.MAX_VALUE);	  TokenBuffer    tokens    =    new    TokenBuffer(TokenBuffer.ZERO);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
8	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.EMPTY);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.EMPTY);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.EMPTY);	  TokenBuffer    tokens    =    new    TokenBuffer(TokenBuffer.ZERO);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
9	[BUG]  [BUGGY]  ||  eatTheRest)  {  eatTheRest  =  true;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  ||  eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	||  eatTheRest)  {  eatTheRest  =  true;  }	  if(eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
10	[BUG]  [BUGGY]  if(eatTheRest)  {  eatTheRest  =  false;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(eatTheRest)  {  eatTheRest  =  false;  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(eatTheRest)  {  eatTheRest  =  false;  }	  if(eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
11	[BUG]  [BUGGY]  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	||  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  if(eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
12	[BUG]  [BUGGY]  EATtheRest  =  true;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  EATtheRest  =  true;  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	EATtheRest  =  true;	  EATtheRest    =    false;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
13	[BUG]  [BUGGY]  Tokens  tokens  =  Lists.newLinkedList();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  Tokens  tokens  =  Lists.newLinkedList();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	Tokens  tokens  =  Lists.newLinkedList();	  Tokens    tokens    =    Lists.newArrayList();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
14	[BUG]  [BUGGY]  Tokens  tokens  =  Lists.newArrayList(0);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  Tokens  tokens  =  Lists.newArrayList(0);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	Tokens  tokens  =  Lists.newArrayList(0);	  Tokens    tokens    =    Lists.newArrayList();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
15	[BUG]  [BUGGY]  Tokens  tokens  =  Lists.newArrayList(this.options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  Tokens  tokens  =  Lists.newArrayList(this.options);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	Tokens  tokens  =  Lists.newArrayList(this.options);	  Tokens    tokens    =    Lists.newArrayList();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
16	[BUG]  [BUGGY]  eatTheRest  =  new  ArrayList  <  String>(tokens.size());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  eatTheRest  =  new  ArrayList  <  String>(tokens.size());  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	eatTheRest  =  new  ArrayList  <  String>(tokens.size());	  eatTheRest    =    new    ArrayList    <    String>();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
17	[BUG]  [BUGGY]  eatTheRest  =  new  LinkedList  <  String>();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  eatTheRest  =  new  LinkedList  <  String>();  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	eatTheRest  =  new  LinkedList  <  String>();	  eatTheRest    =    new    ArrayList    <    String>();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
18	[BUG]  [BUGGY]  this.eatTheRest  =  new  ArrayList  <  String>();  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  this.eatTheRest  =  new  ArrayList  <  String>();  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	this.eatTheRest  =  new  ArrayList  <  String>();	  eatTheRest    =    new    ArrayList    <    String>();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
19	[BUG]  [BUGGY]  tokens  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;	  tokens    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
20	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  EMPTY_LIST>();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  ArrayList  <  EMPTY_LIST>();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  ArrayList  <  EMPTY_LIST>();	  tokens    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
21	[BUG]  [BUGGY]  if(!tokens.isEmpty())  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!tokens.isEmpty())  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(!tokens.isEmpty())  {  eatTheRest  =  false;  tokens.clear();  }	  if(!tokens.isEmpty())    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
22	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(!tokens.isEmpty())  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens!=  null)  {  if(!tokens.isEmpty())  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens!=  null)  {  if(!tokens.isEmpty())  {  eatTheRest  =  true;  tokens.clear();  }	  if(!tokens.isEmpty())    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
23	[BUG]  [BUGGY]  if(tokens.isEmpty())  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens.isEmpty())  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens.isEmpty())  {  eatTheRest  =  true;  tokens.clear();  }	  if(!tokens.isEmpty())    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
24	[BUG]  [BUGGY]  EATTheRest  =  this;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  EATTheRest  =  this;  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	EATTheRest  =  this;	  EATTheRest    =    null;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
25	[BUG]  [BUGGY]  EATTheRest  =  new  HashMap  <  String,Object>();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  EATTheRest  =  new  HashMap  <  String,Object>();  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	EATTheRest  =  new  HashMap  <  String,Object>();	  EATTheRest    =    null;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
26	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  }	  if(eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
27	[BUG]  [BUGGY]  if(eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  }	  if(eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
28	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(!eatTheRest)  {  eatTheRest  =  true;  }	  if(eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
29	[BUG]  [BUGGY]  if(this.options!=  null)  {  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(this.options!=  null)  {  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(this.options!=  null)  {  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }	  if(eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
30	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }	  if(eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
31	[BUG]  [BUGGY]  if(this.options  ==  null)  {  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(this.options  ==  null)  {  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(this.options  ==  null)  {  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }	  if(eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
32	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(size()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(size()  -  1);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newArrayList(size()  -  1);	  tokens    =    Lists.newArrayList(size());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
33	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(size()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(size()  +  1);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newArrayList(size()  +  1);	  tokens    =    Lists.newArrayList(size());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
34	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(options),  true);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.addAll(Arrays.asList(options),  true);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens.addAll(Arrays.asList(options),  true);	  tokens.addAll(Arrays.asList(options));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
35	[BUG]  [BUGGY]  tokens.add(Arrays.asList(options));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.add(Arrays.asList(options));  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens.add(Arrays.asList(options));	  tokens.addAll(Arrays.asList(options));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
36	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(options),  options);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.addAll(Arrays.asList(options),  options);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens.addAll(Arrays.asList(options),  options);	  tokens.addAll(Arrays.asList(options));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
37	[BUG]  [BUGGY]  this.eattheRest  =  false;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  this.eattheRest  =  false;  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	this.eattheRest  =  false;	  eattheRest    =    false;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
38	[BUG]  [BUGGY]  tokens  =  new  LinkedList();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  LinkedList();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  LinkedList();	  tokens    =    new    ArrayList();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
39	[BUG]  [BUGGY]  tokens  =  new  java.util.ArrayList();  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  java.util.ArrayList();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  java.util.ArrayList();	  tokens    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
40	[BUG]  [BUGGY]  tokens  =  Lists.EMPTY_LIST;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.EMPTY_LIST;  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.EMPTY_LIST;	  if(tokens!=    null)    {    tokens    =    Lists.EMPTY_LIST;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
41	[BUG]  [BUGGY]  if(tokens  ==  null)  {  tokens  =  Lists.EMPTY_LIST;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens  ==  null)  {  tokens  =  Lists.EMPTY_LIST;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens  ==  null)  {  tokens  =  Lists.EMPTY_LIST;  }	  if(tokens!=    null)    {    tokens    =    Lists.EMPTY_LIST;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
42	[BUG]  [BUGGY]  Tokens  tokens  =  Lists.EMPTY_LIST;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  Tokens  tokens  =  Lists.EMPTY_LIST;  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	Tokens  tokens  =  Lists.EMPTY_LIST;	  if(tokens!=    null)    {    tokens    =    Lists.EMPTY_LIST;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
43	[BUG]  [BUGGY]  tokens.add(Arrays.asList(this));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.add(Arrays.asList(this));  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens.add(Arrays.asList(this));	  tokens.addAll(Arrays.asList(this));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
44	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this,  options));  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.addAll(Arrays.asList(this,  options));  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens.addAll(Arrays.asList(this,  options));	  tokens.addAll(Arrays.asList(this));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
45	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(new  ArrayList()));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.addAll(Arrays.asList(new  ArrayList()));  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens.addAll(Arrays.asList(new  ArrayList()));	  tokens.addAll(Arrays.asList(this));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
46	[BUG]  [BUGGY]  This.eatTheRest  =  false;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  This.eatTheRest  =  false;  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	This.eatTheRest  =  false;	  this.eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
47	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size()  -  1);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  ArrayList  <  Option>(tokens.size()  -  1);	  tokens    =    new    ArrayList    <    Option>(tokens.size());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
48	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size()  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size()  +  1);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  ArrayList  <  Option>(tokens.size()  +  1);	  tokens    =    new    ArrayList    <    Option>(tokens.size());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
49	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>(tokens.size());  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  LinkedList  <  Option>(tokens.size());  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  LinkedList  <  Option>(tokens.size());	  tokens    =    new    ArrayList    <    Option>(tokens.size());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
50	[BUG]  [BUGGY]  eatTheRest  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  eatTheRest  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	eatTheRest  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;	  eatTheRest    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
51	[BUG]  [BUGGY]  eatTheRest  =  Collections.EMPTY_LIST;  tokens.clear();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  eatTheRest  =  Collections.EMPTY_LIST;  tokens.clear();  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	eatTheRest  =  Collections.EMPTY_LIST;  tokens.clear();	  eatTheRest    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
52	[BUG]  [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens!=  null)  {  eatTheRest  =  false;  tokens.clear();  }	  eatTheRest    =    false;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
53	[BUG]  [BUGGY]  if(tokens.size()  >  0)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens.size()  >  0)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens.size()  >  0)  {  eatTheRest  =  false;  tokens.clear();  }	  eatTheRest    =    false;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
54	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  <identifier>  expected	47	None	replace
55	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  +  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  +  1);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  <identifier>  expected	47	None	replace
56	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  2);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  2);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  2);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  <identifier>  expected	47	None	replace
57	[BUG]  [BUGGY]  if(tokens  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }	  if(tokens!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
58	[BUG]  [BUGGY]  if(tokens  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }	  if(tokens!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
59	[BUG]  [BUGGY]  if(tokens  ==  null)  {  tokens  =  new  ArrayList  <  String>();  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens  ==  null)  {  tokens  =  new  ArrayList  <  String>();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens  ==  null)  {  tokens  =  new  ArrayList  <  String>();  }	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    String>();    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
60	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens  =  new  LinkedList  <  String>();  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens!=  null)  {  tokens  =  new  LinkedList  <  String>();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens!=  null)  {  tokens  =  new  LinkedList  <  String>();  }	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    String>();    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
61	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>(options.size());  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  LinkedList  <  Option>(options.size());  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  LinkedList  <  Option>(options.size());	  tokens    =    new    LinkedList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
62	[BUG]  [BUGGY]  tokens  =  new  TreeSet  <  Option>();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  TreeSet  <  Option>();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  TreeSet  <  Option>();	  tokens    =    new    LinkedList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
63	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
64	[BUG]  [BUGGY]  if(this.options!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(this.options!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(this.options!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
65	[BUG]  [BUGGY]  if(this.options!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(this.options!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(this.options!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
66	[BUG]  [BUGGY]  ArrayList  <  Option>  tokens  =  new  ArrayList  <  Option>();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  ArrayList  <  Option>  tokens  =  new  ArrayList  <  Option>();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	ArrayList  <  Option>  tokens  =  new  ArrayList  <  Option>();	  tokens    =    new    java.util.ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
67	[BUG]  [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>(1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>(1);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  java.util.ArrayList  <  Option>(1);	  tokens    =    new    java.util.ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
68	[BUG]  [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>(size());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>(size());  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  java.util.ArrayList  <  Option>(size());	  tokens    =    new    java.util.ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
69	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(this.options,  options);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(this.options,  options);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newArrayList(this.options,  options);	  tokens    =    Lists.newArrayList(this.options);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
70	[BUG]  [BUGGY]  Iterator.eatTheRest  =  false;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  Iterator.eatTheRest  =  false;  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	Iterator.eatTheRest  =  false;	  This.eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
71	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  String>();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  LinkedList  <  String>();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  LinkedList  <  String>();	  tokens    =    new    ArrayList    <    String>();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
72	[BUG]  [BUGGY]  tokens  =  new  java.util.ArrayList  <  String>();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  java.util.ArrayList  <  String>();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  java.util.ArrayList  <  String>();	  tokens    =    new    ArrayList    <    String>();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
73	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  String>(tokens.size());  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  ArrayList  <  String>(tokens.size());  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  ArrayList  <  String>(tokens.size());	  tokens    =    new    ArrayList    <    String>();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
74	[BUG]  [BUGGY]  if(this.options!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(this.options!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(this.options!=  null)  {  eatTheRest  =  false;  tokens.clear();  }	  if(this.options!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
75	[BUG]  [BUGGY]  if(this.options  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(this.options  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(this.options  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }	  if(this.options!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
76	[BUG]  [BUGGY]  if(this.options  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(this.options  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(this.options  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }	  if(this.options!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
77	[BUG]  [BUGGY]  this.eatTheRest  =  null;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  this.eatTheRest  =  null;  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	this.eatTheRest  =  null;	  eatTheRest    =    this;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
78	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size()  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size()  +  1);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  ArrayList  <  Option>(options.size()  +  1);	  tokens    =    new    ArrayList    <    Option>(options.size());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
79	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size()  -  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size()  -  1);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  ArrayList  <  Option>(options.size()  -  1);	  tokens    =    new    ArrayList    <    Option>(options.size());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
80	[BUG]  [BUGGY]  tokens.add( "null ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.add( "null ");  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens.add( "null ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	15	None	replace
81	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.add( "-- ");  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens.add( "-- ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	15	None	replace
82	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.add( "- ");  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens.add( "- ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	15	None	replace
83	[BUG]  [BUGGY]  this.eatTheRest  =  new  HashMap  <  String,Object>();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  this.eatTheRest  =  new  HashMap  <  String,Object>();  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	this.eatTheRest  =  new  HashMap  <  String,Object>();	  eatTheRest    =    new    HashMap    <    String,Object>();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
84	[BUG]  [BUGGY]  eatTheRest  =  new  TreeMap  <  String,Object>();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  eatTheRest  =  new  TreeMap  <  String,Object>();  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	eatTheRest  =  new  TreeMap  <  String,Object>();	  eatTheRest    =    new    HashMap    <    String,Object>();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
85	[BUG]  [BUGGY]  this.eatTheRest  =  Collections.emptyList();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  this.eatTheRest  =  Collections.emptyList();  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	this.eatTheRest  =  Collections.emptyList();	  eatTheRest    =    Collections.emptyList();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
86	[BUG]  [BUGGY]  eatTheRest  =  Lists.newArrayList();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  eatTheRest  =  Lists.newArrayList();  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	eatTheRest  =  Lists.newArrayList();	  eatTheRest    =    Collections.emptyList();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
87	[BUG]  [BUGGY]  tokens  =  Lists.newHashSet();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newHashSet();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newHashSet();	  tokens    =    Lists.newLinkedList();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
88	[BUG]  [BUGGY]  tokens  =  Lists.newStringList();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newStringList();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newStringList();	  tokens    =    Lists.newLinkedList();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
89	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(1);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newArrayList(1);	  tokens    =    Lists.newArrayList(0);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
90	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(2);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(2);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newArrayList(2);	  tokens    =    Lists.newArrayList(0);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
91	[BUG]  [BUGGY]  if(tokens  ==  null)  {  if(!tokens.isEmpty())  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens  ==  null)  {  if(!tokens.isEmpty())  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens  ==  null)  {  if(!tokens.isEmpty())  {  eatTheRest  =  true;  tokens.clear();  }	  if(!tokens.isEmpty())    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
92	[BUG]  [BUGGY]  EATTheRest  =  tokens;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  EATTheRest  =  tokens;  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	EATTheRest  =  tokens;	  EATTheRest    =    null;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
93	[BUG]  [BUGGY]  eatTheRest  =  Collections.EMPTY_LIST  +  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  eatTheRest  =  Collections.EMPTY_LIST  +  1;  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	eatTheRest  =  Collections.EMPTY_LIST  +  1;	  eatTheRest    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
94	[BUG]  [BUGGY]  this.tokens  =  Lists.newArrayList();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  this.tokens  =  Lists.newArrayList();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	this.tokens  =  Lists.newArrayList();	  if(tokens    ==    null)    {    tokens    =    Lists.newArrayList();    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
95	[BUG]  [BUGGY]  eatTheRest  =  new  ArrayList  <  Comparable>();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  eatTheRest  =  new  ArrayList  <  Comparable>();  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	eatTheRest  =  new  ArrayList  <  Comparable>();	  eatTheRest    =    this;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
96	[BUG]  [BUGGY]  Tokens  tokens  =  Lists.newArrayList(tokens);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  Tokens  tokens  =  Lists.newArrayList(tokens);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	Tokens  tokens  =  Lists.newArrayList(tokens);	  Tokens    tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
97	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  new  ArrayList  <  String>();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  Iterator  <  String>  tokens  =  new  ArrayList  <  String>();  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	Iterator  <  String>  tokens  =  new  ArrayList  <  String>();	  This.eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
98	[BUG]  [BUGGY]  ArrayList  <  Option>  tokens  =  new  java.util.ArrayList  <  Option>();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  ArrayList  <  Option>  tokens  =  new  java.util.ArrayList  <  Option>();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	ArrayList  <  Option>  tokens  =  new  java.util.ArrayList  <  Option>();	  tokens    =    new    java.util.ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
99	[BUG]  [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>(tokens);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>(tokens);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  java.util.ArrayList  <  Option>(tokens);	  tokens    =    new    java.util.ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
100	[BUG]  [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>(options);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>(options);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  java.util.ArrayList  <  Option>(options);	  tokens    =    new    java.util.ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
101	[BUG]  [BUGGY]  eatTheRest  =  new  HashMap  <  String,Object>(tokens);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  eatTheRest  =  new  HashMap  <  String,Object>(tokens);  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	eatTheRest  =  new  HashMap  <  String,Object>(tokens);	  eatTheRest    =    new    HashMap    <    String,Object>();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
102	[BUG]  [BUGGY]  tokens  =  Lists.newArrayListWithCapacity(this.options);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayListWithCapacity(this.options);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newArrayListWithCapacity(this.options);	  tokens    =    Lists.newArrayList(this.options);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
103	[BUG]  [BUGGY]  tokens  =  Lists.newLinkedList(tokens);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newLinkedList(tokens);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newLinkedList(tokens);	  tokens    =    Lists.newLinkedList();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
104	[BUG]  [BUGGY]  tokens  =  Lists.newLinkedList(0);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newLinkedList(0);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newLinkedList(0);	  tokens    =    Lists.newLinkedList();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
105	[BUG]  [BUGGY]  if(this.options  ==  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(this.options  ==  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(this.options  ==  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
106	[BUG]  [BUGGY]  if(tokens  ==  null)  {  tokens  =  new  LinkedList  <  String>();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens  ==  null)  {  tokens  =  new  LinkedList  <  String>();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens  ==  null)  {  tokens  =  new  LinkedList  <  String>();  }	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    String>();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
107	[BUG]  [BUGGY]  if(this.options!=  null)  {  if(eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(this.options!=  null)  {  if(eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(this.options!=  null)  {  if(eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }	  if(eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
108	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.START_PREFIX);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.START_PREFIX);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.START_PREFIX);	  TokenBuffer    tokens    =    new    TokenBuffer(TokenBuffer.ZERO);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
109	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.INCRDECR);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.INCRDECR);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.INCRDECR);	  TokenBuffer    tokens    =    new    TokenBuffer(TokenBuffer.ZERO);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
110	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Options>();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  ArrayList  <  Options>();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  ArrayList  <  Options>();	  tokens    =    new    ArrayList();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
111	[BUG]  [BUGGY]  eatTheRest  =  new  ArrayList  <  String>(tokens);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  eatTheRest  =  new  ArrayList  <  String>(tokens);  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	eatTheRest  =  new  ArrayList  <  String>(tokens);	  eatTheRest    =    new    ArrayList    <    String>();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
112	[BUG]  [BUGGY]  eatTheRest  =  Collections.emptyList(tokens);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  eatTheRest  =  Collections.emptyList(tokens);  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	eatTheRest  =  Collections.emptyList(tokens);	  eatTheRest    =    Collections.emptyList();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
113	[BUG]  [BUGGY]  tokens.add( "eatTheRest ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.add( "eatTheRest ");  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens.add( "eatTheRest ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	15	None	replace
114	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  String>(tokens);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  ArrayList  <  String>(tokens);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  ArrayList  <  String>(tokens);	  tokens    =    new    ArrayList    <    String>();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
115	[BUG]  [BUGGY]  tokens  =  Collections.EMPTY_LIST  +  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Collections.EMPTY_LIST  +  1;  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Collections.EMPTY_LIST  +  1;	  tokens    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
116	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this),  eatTheRest);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.addAll(Arrays.asList(this),  eatTheRest);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens.addAll(Arrays.asList(this),  eatTheRest);	  tokens.addAll(Arrays.asList(this));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
117	[BUG]  [BUGGY]  this.eatTheRest  =  Collections.EMPTY_LIST;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  this.eatTheRest  =  Collections.EMPTY_LIST;  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	this.eatTheRest  =  Collections.EMPTY_LIST;	  eatTheRest    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
118	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(tokens.values());  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(tokens.values());  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newArrayList(tokens.values());	  tokens    =    Lists.newArrayList(tokens);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
119	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this.options));  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.addAll(Arrays.asList(this.options));  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens.addAll(Arrays.asList(this.options));	  tokens.addAll(Arrays.asList(options));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
120	[BUG]  [BUGGY]  Tokens  tokens  =  Lists.newArrayList(tokens.size());  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  Tokens  tokens  =  Lists.newArrayList(tokens.size());  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	Tokens  tokens  =  Lists.newArrayList(tokens.size());	  Tokens    tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
121	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(this.options,  this.eatTheRest);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(this.options,  this.eatTheRest);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newArrayList(this.options,  this.eatTheRest);	  tokens    =    Lists.newArrayList(this.options);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
122	[BUG]  [BUGGY]  while(eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  while(eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	while(eatTheRest)  {  eatTheRest  =  true;  }	  if(eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
123	[BUG]  [BUGGY]  if(tokens.isEmpty())  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens.isEmpty())  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens.isEmpty())  {  eatTheRest  =  false;  tokens.clear();  }	  eatTheRest    =    false;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
124	[BUG]  [BUGGY]  if(eatTheRest!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(eatTheRest!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(eatTheRest!=  null)  {  eatTheRest  =  false;  tokens.clear();  }	  eatTheRest    =    false;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
125	[BUG]  [BUGGY]  if(eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  if(eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }	  if(eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
126	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.ZERO,  TokenBuffer.DEFAULT);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.ZERO,  TokenBuffer.DEFAULT);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.ZERO,  TokenBuffer.DEFAULT);	  TokenBuffer    tokens    =    new    TokenBuffer(TokenBuffer.ZERO);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
127	[BUG]  [BUGGY]  tokens  =  Collections.EMPTY_LIST?  Collections.EMPTY_LIST  :  Collections.EMPTY_LIST;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Collections.EMPTY_LIST?  Collections.EMPTY_LIST  :  Collections.EMPTY_LIST;  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Collections.EMPTY_LIST?  Collections.EMPTY_LIST  :  Collections.EMPTY_LIST;	  tokens    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
128	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  String>(Token.EMPTY);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  ArrayList  <  String>(Token.EMPTY);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  ArrayList  <  String>(Token.EMPTY);	  tokens    =    new    ArrayList    <    String>();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
129	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  String>(Token.BLOCK);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  ArrayList  <  String>(Token.BLOCK);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  ArrayList  <  String>(Token.BLOCK);	  tokens    =    new    ArrayList    <    String>();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
130	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(eatTheRest));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.addAll(Arrays.asList(eatTheRest));  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens.addAll(Arrays.asList(eatTheRest));	  tokens.addAll(Arrays.asList(this));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
131	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(new  ArrayList  <  String>()));  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.addAll(Arrays.asList(new  ArrayList  <  String>()));  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens.addAll(Arrays.asList(new  ArrayList  <  String>()));	  tokens.addAll(Arrays.asList(this));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
132	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  tokens.iterator().next();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  Iterator  <  String>  tokens  =  tokens.iterator().next();  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	Iterator  <  String>  tokens  =  tokens.iterator().next();	  This.eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
133	[BUG]  [BUGGY]  tokens  =  Collections.synchronizedList(this);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Collections.synchronizedList(this);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Collections.synchronizedList(this);	  tokens    =    Collections.emptyList();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
134	[BUG]  [BUGGY]  tokens  =  Lists.newLinkedList(Arrays.asList(eatTheRest));  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newLinkedList(Arrays.asList(eatTheRest));  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newLinkedList(Arrays.asList(eatTheRest));	  tokens    =    Lists.newLinkedList();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
135	[BUG]  [BUGGY]  tokens  =  Lists.newLinkedList(Arrays.asList(tokens));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newLinkedList(Arrays.asList(tokens));  [BUGGY]      eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newLinkedList(Arrays.asList(tokens));	  tokens    =    Lists.newLinkedList();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
