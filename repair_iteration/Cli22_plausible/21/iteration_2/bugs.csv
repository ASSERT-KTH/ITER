bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	Iterator  iter  =  this.arguments.iterator();	      Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
2	[BUG]  [BUGGY]  while  (iter.hasNext()  &&  iter.next().equals( "- "))  {  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  while  (iter.hasNext()  &&  iter.next().equals( "- "))  {  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	while  (iter.hasNext()  &&  iter.next().equals( "- "))  {	  while    (iter.hasNext()    &&    iter.next().startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
3	[BUG]  [BUGGY]  while  (iter.hasNext()  &&  iter.next().startsWith( "/ "))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  while  (iter.hasNext()  &&  iter.next().startsWith( "/ "))  {  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	while  (iter.hasNext()  &&  iter.next().startsWith( "/ "))  {	  while    (iter.hasNext()    &&    iter.next().startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
4	[BUG]  [BUGGY]  iter.remove();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  iter.remove();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	iter.remove();	      iter.next();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
5	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size()  -  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size()  -  1);  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size()  -  1);	      List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.size());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
6	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size()  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size()  +  1);  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size()  +  1);	      List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.size());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
7	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size());  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size());	      List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.size());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
8	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList();  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  Lists.newArrayList();	      List    <    String>    tokens    =    Lists.newArrayList(arguments);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
9	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption);  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption);	      List    <    String>    tokens    =    Lists.newArrayList(arguments);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
10	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments);  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments);	      List    <    String>    tokens    =    Lists.newArrayList(arguments);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
11	[BUG]  [BUGGY]  Iterator  iter  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  iter  =  this.options.iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	Iterator  iter  =  this.options.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
12	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments).iterator();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments).iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments).iterator();	      List    <    String>    tokens    =    Lists.newArrayList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
13	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(options).iterator();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(options).iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  Lists.newArrayList(options).iterator();	      List    <    String>    tokens    =    Lists.newArrayList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
14	[BUG]  [BUGGY]  while  (iter.hasNext()  ||  iter.hasNext())  {  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  while  (iter.hasNext()  ||  iter.hasNext())  {  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	while  (iter.hasNext()  ||  iter.hasNext())  {	  while    (iter.hasNext()    &&    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
15	[BUG]  [BUGGY]  Iterator  iter  =  Arrays.asList(this.options).iterator();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  iter  =  Arrays.asList(this.options).iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	Iterator  iter  =  Arrays.asList(this.options).iterator();	      Iterator    iter    =    Arrays.asList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
16	[BUG]  [BUGGY]  Iterator  iter  =  Arrays.asList(options).iterator();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  iter  =  Arrays.asList(options).iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	Iterator  iter  =  Arrays.asList(options).iterator();	      Iterator    iter    =    Arrays.asList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
17	[BUG]  [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	Iterator  iter  =  this.tokens.iterator();	      Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
18	[BUG]  [BUGGY]  String[]  arguments  =(String[])iter.next();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  String[]  arguments  =(String[])iter.next();  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	String[]  arguments  =(String[])iter.next();	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
19	[BUG]  [BUGGY]  List  <  String>  tokens  =(List  <  String>)iter.next();  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  List  <  String>  tokens  =(List  <  String>)iter.next();  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =(List  <  String>)iter.next();	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
20	[BUG]  [BUGGY]  while(iter.hasNext()  &&  iter.next().startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  while(iter.hasNext()  &&  iter.next().startsWith( "-- "))  {  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	while(iter.hasNext()  &&  iter.next().startsWith( "-- "))  {	  while    (iter.hasNext()    &&    iter.next().startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
21	[BUG]  [BUGGY]  while(iter.hasNext()  &&  iter.next())  {  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  while(iter.hasNext()  &&  iter.next())  {  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	while(iter.hasNext()  &&  iter.next())  {	  while    (iter.hasNext()    &&    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
22	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  String[]  {  }  );  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  String[]  {  }  );  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  String[]  {  }  );	      List    <    String>    tokens    =    Lists.newArrayList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
23	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  String[args.size()  ]);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  String[args.size()  ]);  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  String[args.size()  ]);	      List    <    String>    tokens    =    Lists.newArrayList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
