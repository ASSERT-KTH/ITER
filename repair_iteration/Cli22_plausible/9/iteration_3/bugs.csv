bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token)||  tokens.contains(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token)||  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  tokens.contains(token)||  tokens.contains(token))  {	  if(stopAtNonOption    &&    options.contains(token)||    tokens.contains(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
2	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.contains(token)||  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.contains(token)||  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  options.contains(token)||  tokens.contains(token))  {	  if(stopAtNonOption    &&    options.contains(token)||    tokens.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token)||  options.contains(token))  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token)||  options.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  tokens.contains(token)||  options.contains(token))  {	  if(stopAtNonOption    &&    options.contains(token)||    tokens.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
4	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  token.length()  ==  0)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  token.length()  ==  0)  {	  if(stopAtNonOption    &&    token.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
5	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  token.length()  >  0)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  token.length()  >  0)  {	  if(stopAtNonOption    &&    token.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
6	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.length()!=  0)  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  token.length()!=  0)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  token.length()!=  0)  {	  if(stopAtNonOption    &&    token.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
7	[BUG]  [BUGGY]  Option  options  =  option.getOptions();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  option.getOptions();  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  option.getOptions();	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
8	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.put(token,  stopAtNonOption,  eatTheRest);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	options.put(token,  stopAtNonOption,  eatTheRest);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
9	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption  &&  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.put(token,  stopAtNonOption  &&  stopAtNonOption);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	options.put(token,  stopAtNonOption  &&  stopAtNonOption);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
10	[BUG]  [BUGGY]  if(stopAtNonOption  &&  tokens.containsKey(token))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  tokens.containsKey(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  tokens.containsKey(token))  {	  if(stopAtNonOption    ||    tokens.containsKey(token))    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
11	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens.containsKey(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  tokens.containsKey(token)&&  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  tokens.containsKey(token)&&  stopAtNonOption)  {	  if(stopAtNonOption    ||    tokens.containsKey(token))    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
12	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  tokens.containsKey(token))  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!stopAtNonOption  &&  tokens.containsKey(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(!stopAtNonOption  &&  tokens.containsKey(token))  {	  if(stopAtNonOption    ||    tokens.containsKey(token))    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
13	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.hasOption(token)||  stopAtNonOption;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  boolean  stopAtNonOption  =  options.hasOption(token)||  stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	boolean  stopAtNonOption  =  options.hasOption(token)||  stopAtNonOption;	  boolean    stopAtNonOption    =    options.hasOption(token)&&    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
14	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  token,  stopAtNonOption);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  token,  stopAtNonOption);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
15	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  +  1,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  +  1,  stopAtNonOption);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length()  +  1,  stopAtNonOption);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
16	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  -  1,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  -  1,  stopAtNonOption);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length()  -  1,  stopAtNonOption);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
17	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  stopAtNonOption,  options);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  stopAtNonOption,  options);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
18	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.containsKey(token))  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.containsKey(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  options.containsKey(token))  {	  if(stopAtNonOption    ||    options.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
19	[BUG]  [BUGGY]  Options  options  =  options.getOptions(token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Options  options  =  options.getOptions(token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Options  options  =  options.getOptions(token);	  if(stopAtNonOption    &&    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
20	[BUG]  [BUGGY]  Options  options  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Options  options  =  options.getOption(token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Options  options  =  options.getOption(token);	  if(stopAtNonOption    &&    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
21	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)&&  stopAtNonOption  ||  tokens.contains(token);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)&&  stopAtNonOption  ||  tokens.contains(token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOption(token)&&  stopAtNonOption  ||  tokens.contains(token);	  Option    options    =    options.getOption(token)&&    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
22	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)&&  eatTheRest;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)&&  eatTheRest;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOption(token)&&  eatTheRest;	  Option    options    =    options.getOption(token)&&    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
23	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)/  stopAtNonOption;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)/  stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOption(token)/  stopAtNonOption;	  Option    options    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
24	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)+  StopAtNonOption;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)+  StopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOption(token)+  StopAtNonOption;	  Option    options    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
25	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)+  stopAtNonOption  +  token;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)+  stopAtNonOption  +  token;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOption(token)+  stopAtNonOption  +  token;	  Option    options    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
26	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  &&  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token,  stopAtNonOption  &&  stopAtNonOption);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	tokens.add(token,  stopAtNonOption  &&  stopAtNonOption);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
27	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)&&  options.hasOption(token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token,  stopAtNonOption)&&  options.hasOption(token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	tokens.add(token,  stopAtNonOption)&&  options.hasOption(token);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
28	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  options.hasOption(token)||  stopAtNonOption)  {	  if(stopAtNonOption    &&    options.hasOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
29	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  options.getOption(token)||  stopAtNonOption)  {	  if(stopAtNonOption    &&    options.hasOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
30	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(!stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {	  if(stopAtNonOption    &&    options.hasOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
31	[BUG]  [BUGGY]  options.add(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.add(token,  stopAtNonOption);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	options.add(token,  stopAtNonOption);	  options.add(token);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
32	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token,  stopAtNonOption)&&  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token,  stopAtNonOption)&&  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  options.hasOption(token,  stopAtNonOption)&&  tokens.contains(token))  {	  if(stopAtNonOption    ||    options.hasOption(token,    stopAtNonOption))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
33	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(token,  stopAtNonOption))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(token,  stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(!stopAtNonOption  &&  options.hasOption(token,  stopAtNonOption))  {	  if(stopAtNonOption    ||    options.hasOption(token,    stopAtNonOption))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  While(stopAtNonOption  &&  token  <  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption  &&  token  <  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	While(stopAtNonOption  &&  token  <  null)  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption    &&    token    <    =    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
35	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(Token.length());  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(Token.length());  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(Token.length());	  TokenBuffer    tokens    =    new    TokenBuffer(token.length()    -    2);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
36	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption.length());  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption.length());  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption.length());	  TokenBuffer    tokens    =    new    TokenBuffer(token.length()    -    2);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
37	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  options);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  options);	  TokenBuffer    tokens    =    new    TokenBuffer(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
38	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  option);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  option);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  option);	  TokenBuffer    tokens    =    new    TokenBuffer(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
39	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token);	  TokenBuffer    tokens    =    new    TokenBuffer(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
40	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.hasOption(token)&&  options.hasOption(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  boolean  stopAtNonOption  =  options.hasOption(token)&&  options.hasOption(token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	boolean  stopAtNonOption  =  options.hasOption(token)&&  options.hasOption(token);	  boolean    stopAtNonOption    =    options.hasOption(token)||    options.hasOption(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
41	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.hasOption(token)||  options.hasOption(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  boolean  stopAtNonOption  =  options.hasOption(token)||  options.hasOption(token,  stopAtNonOption);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	boolean  stopAtNonOption  =  options.hasOption(token)||  options.hasOption(token,  stopAtNonOption);	  boolean    stopAtNonOption    =    options.hasOption(token)||    options.hasOption(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
42	[BUG]  [BUGGY]  Option  options  =  options.getOptions(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOptions(token,  stopAtNonOption);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOptions(token,  stopAtNonOption);	  Option    options    =    options.getOptions(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
43	[BUG]  [BUGGY]  Option  options  =  options.getOptions(token)+  stopAtNonOption;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOptions(token)+  stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOptions(token)+  stopAtNonOption;	  Option    options    =    options.getOptions(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
44	[BUG]  [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " "  +  token.toString());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " "  +  token.toString());  }  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " "  +  token.toString());  }	  While(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ".equals(token));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
45	[BUG]  [BUGGY]  tokens.add(token)/  stopAtNonOption;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token)/  stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	tokens.add(token)/  stopAtNonOption;	  tokens.add(token)+    stopAtNonOption;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
46	[BUG]  [BUGGY]  tokens.add(token)+  stopAtNonOption  &&  options.hasOption(token);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token)+  stopAtNonOption  &&  options.hasOption(token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	tokens.add(token)+  stopAtNonOption  &&  options.hasOption(token);	  tokens.add(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
47	[BUG]  [BUGGY]  tokens.add(token)+  stopAtNonOption  + ", ";  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token)+  stopAtNonOption  + ", ";  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	tokens.add(token)+  stopAtNonOption  + ", ";	  tokens.add(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
48	[BUG]  [BUGGY]  Option  options  =  options.get(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.get(token,  stopAtNonOption);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.get(token,  stopAtNonOption);	  Option    options    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
49	[BUG]  [BUGGY]  Option  options  =  options.get(token)+  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.get(token)+  stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.get(token)+  stopAtNonOption;	  Option    options    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
50	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.hasOption(token,  stopAtNonOption)&&  tokens.contains(token);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  boolean  stopAtNonOption  =  options.hasOption(token,  stopAtNonOption)&&  tokens.contains(token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	boolean  stopAtNonOption  =  options.hasOption(token,  stopAtNonOption)&&  tokens.contains(token);	  boolean    stopAtNonOption    =    options.hasOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
51	[BUG]  [BUGGY]  While(stopAtNonOption  &&  options.hasOption(token))  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption  &&  options.hasOption(token))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	While(stopAtNonOption  &&  options.hasOption(token))  {  throw  new  IllegalStateException( " ");  }	  While(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
52	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.equals(token)||  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  token.equals(token)||  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  token.equals(token)||  tokens.contains(token))  {	  if(stopAtNonOption    &&    token.equals(token))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
53	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token)||  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token)||  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  options.hasOption(token)||  tokens.contains(token))  {	  if(stopAtNonOption    &&    options.hasOption(token)||    tokens.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
54	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)||  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)||  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  options.getOption(token)||  tokens.contains(token))  {	  if(stopAtNonOption    &&    options.hasOption(token)||    tokens.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
55	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)&&  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)&&  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  options.hasOption(token)&&  tokens.contains(token))  {	  if(stopAtNonOption    &&    options.hasOption(token)||    tokens.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
56	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens.size()  ==  0)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  tokens.size()  ==  0)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  tokens.size()  ==  0)  {	  if(stopAtNonOption    ||    token.length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
57	[BUG]  [BUGGY]  if(tokens.contains(token)||  stopAtNonOption  ||  token.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(tokens.contains(token)||  stopAtNonOption  ||  token.length()  ==  0)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(tokens.contains(token)||  stopAtNonOption  ||  token.length()  ==  0)  {	  if(stopAtNonOption    ||    token.length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
58	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  /  2);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  /  2);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length()  /  2);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length()    *    2);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
59	[BUG]  [BUGGY]  Options  options  =  options.get(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Options  options  =  options.get(token,  stopAtNonOption);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Options  options  =  options.get(token,  stopAtNonOption);	  Options    options    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
60	[BUG]  [BUGGY]  Options  options  =  options.get(token)+  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Options  options  =  options.get(token)+  stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Options  options  =  options.get(token)+  stopAtNonOption;	  Options    options    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
61	[BUG]  [BUGGY]  Option  options  =  stopAtNonOption?  options.get(token):  tokens;  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  stopAtNonOption?  options.get(token):  tokens;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  stopAtNonOption?  options.get(token):  tokens;	  Option    options    =    stopAtNonOption?    options.get(token):    token;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
62	[BUG]  [BUGGY]  Option  options  =  stopAtNonOption?  options.get(token):  token,  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  stopAtNonOption?  options.get(token):  token,  stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  stopAtNonOption?  options.get(token):  token,  stopAtNonOption;	  Option    options    =    stopAtNonOption?    options.get(token):    token;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
63	[BUG]  [BUGGY]  tokens.add(token)||  stopAtNonOption;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token)||  stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	tokens.add(token)||  stopAtNonOption;	  tokens.add(token)&&    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
64	[BUG]  [BUGGY]  tokens.add(token)&&  stopAtNonOption  =  true;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token)&&  stopAtNonOption  =  true;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	tokens.add(token)&&  stopAtNonOption  =  true;	  tokens.add(token)&&    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
65	[BUG]  [BUGGY]  tokens.add(token)&&  stopAtNonOption  =  false;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token)&&  stopAtNonOption  =  false;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	tokens.add(token)&&  stopAtNonOption  =  false;	  tokens.add(token)&&    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
66	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  option  =  options.getOption(token,  stopAtNonOption);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
67	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)+  stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  option  =  options.getOption(token)+  stopAtNonOption;	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
68	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)&&  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)&&  stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  option  =  options.getOption(token)&&  stopAtNonOption;	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
69	[BUG]  [BUGGY]  While(stopAtNonOption  &&  options.contains(token))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption  &&  options.contains(token))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	While(stopAtNonOption  &&  options.contains(token))  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption    &&    tokens.contains(token))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
70	[BUG]  [BUGGY]  while(stopAtNonOption  &&  tokens.contains(token))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  while(stopAtNonOption  &&  tokens.contains(token))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	while(stopAtNonOption  &&  tokens.contains(token))  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption    &&    tokens.contains(token))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
71	[BUG]  [BUGGY]  Option  option  =  options.get(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.get(token);  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  option  =  options.get(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
72	[BUG]  [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token)||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  tokens.contains(token)||  stopAtNonOption)  {	  if(stopAtNonOption    ||    tokens.contains(token)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
73	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  tokens.contains(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!stopAtNonOption  &&  tokens.contains(token)||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(!stopAtNonOption  &&  tokens.contains(token)||  stopAtNonOption)  {	  if(stopAtNonOption    ||    tokens.contains(token)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
74	[BUG]  [BUGGY]  if(tokens.contains(token)||  options.hasOption(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(tokens.contains(token)||  options.hasOption(token)&&  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(tokens.contains(token)||  options.hasOption(token)&&  stopAtNonOption)  {	  if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
75	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption)  {	  if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
76	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(!stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption)  {	  if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
77	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token,  stopAtNonOption)||  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token,  stopAtNonOption)||  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  options.hasOption(token,  stopAtNonOption)||  tokens.contains(token))  {	  if(stopAtNonOption    &&    options.hasOption(token,    stopAtNonOption))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
78	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(token,  stopAtNonOption))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.getOption(token,  stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  options.getOption(token,  stopAtNonOption))  {	  if(stopAtNonOption    &&    options.hasOption(token,    stopAtNonOption))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
79	[BUG]  [BUGGY]  tokens.add(token);  this.eatTheRest  =  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token);  this.eatTheRest  =  stopAtNonOption;  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	tokens.add(token);  this.eatTheRest  =  stopAtNonOption;	  tokens.add(token);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
80	[BUG]  [BUGGY]  tokens.add(token);  stopAtNonOption  =  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token);  stopAtNonOption  =  stopAtNonOption;  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	tokens.add(token);  stopAtNonOption  =  stopAtNonOption;	  tokens.add(token);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
81	[BUG]  [BUGGY]  Option  options  =  stopAtNonOption?  tokens.get(token):  null;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  stopAtNonOption?  tokens.get(token):  null;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  stopAtNonOption?  tokens.get(token):  null;	  Option    options    =    stopAtNonOption?    options.get(token):    null;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
82	[BUG]  [BUGGY]  Option  options  =  stopAtNonOption?  options.get(0):  null;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  stopAtNonOption?  options.get(0):  null;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  stopAtNonOption?  options.get(0):  null;	  Option    options    =    stopAtNonOption?    options.get(token):    null;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
83	[BUG]  [BUGGY]  if(tokens.contains(token)||  stopAtNonOption  ||  token.equals(token))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(tokens.contains(token)||  stopAtNonOption  ||  token.equals(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(tokens.contains(token)||  stopAtNonOption  ||  token.equals(token))  {	  if(stopAtNonOption    ||    token.equals(token))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
84	[BUG]  [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token)&&  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  tokens.contains(token)&&  stopAtNonOption)  {	  if(stopAtNonOption    ||    tokens.contains(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
85	[BUG]  [BUGGY]  if(tokens.contains(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(tokens.contains(token)&&  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(tokens.contains(token)&&  stopAtNonOption)  {	  if(stopAtNonOption    ||    tokens.contains(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
86	[BUG]  [BUGGY]  if(tokens.contains(token)||  stopAtNonOption)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(tokens.contains(token)||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(tokens.contains(token)||  stopAtNonOption)  {	  if(stopAtNonOption    ||    tokens.contains(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
87	[BUG]  [BUGGY]  MutableMap.this.processOptionToken(token,  stopAtNonOption,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  MutableMap.this.processOptionToken(token,  stopAtNonOption,  options);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	MutableMap.this.processOptionToken(token,  stopAtNonOption,  options);	  MutableMap.this.processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
88	[BUG]  [BUGGY]  MutableMap.this.processOptionToken(token,  stopAtNonOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  MutableMap.this.processOptionToken(token,  stopAtNonOption,  eatTheRest);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	MutableMap.this.processOptionToken(token,  stopAtNonOption,  eatTheRest);	  MutableMap.this.processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
89	[BUG]  [BUGGY]  MutableMap.this.processOptionToken(token,  stopAtNonOption,  option);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  MutableMap.this.processOptionToken(token,  stopAtNonOption,  option);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	MutableMap.this.processOptionToken(token,  stopAtNonOption,  option);	  MutableMap.this.processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
90	[BUG]  [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption    &&    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
91	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.hasOption(token)||  tokens.contains(token);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  boolean  stopAtNonOption  =  options.hasOption(token)||  tokens.contains(token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	boolean  stopAtNonOption  =  options.hasOption(token)||  tokens.contains(token);	  boolean    stopAtNonOption    =    options.hasOption(token)&&    tokens.contains(token);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
92	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.hasOption(token)&&  tokens.contains(stopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  boolean  stopAtNonOption  =  options.hasOption(token)&&  tokens.contains(stopAtNonOption);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	boolean  stopAtNonOption  =  options.hasOption(token)&&  tokens.contains(stopAtNonOption);	  boolean    stopAtNonOption    =    options.hasOption(token)&&    tokens.contains(token);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
93	[BUG]  [BUGGY]  while(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  while(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	while(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);	  While(stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
94	[BUG]  [BUGGY]  While(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	While(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);	  While(stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
95	[BUG]  [BUGGY]  While(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	While(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  }	  While(stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
96	[BUG]  [BUGGY]  tokens.add(Token.NAME,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(Token.NAME,  stopAtNonOption);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	tokens.add(Token.NAME,  stopAtNonOption);	  tokens.add(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
97	[BUG]  [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token,  stopAtNonOption))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token,  stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  tokens.contains(token,  stopAtNonOption))  {	  if(stopAtNonOption    &&    tokens.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
98	[BUG]  [BUGGY]  while(stopAtNonOption  &&  options.hasOption(token))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  while(stopAtNonOption  &&  options.hasOption(token))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	while(stopAtNonOption  &&  options.hasOption(token))  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption    &&    options.hasOption(token))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
99	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token);	  Option    options    =    options.getOption(token)||    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
100	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)||  stopAtNonOption  &&  tokens.contains(token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)||  stopAtNonOption  &&  tokens.contains(token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOption(token)||  stopAtNonOption  &&  tokens.contains(token);	  Option    options    =    options.getOption(token)||    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
101	[BUG]  [BUGGY]  if(stopAtNonOption  &&  tokens.size()  ==  0)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  tokens.size()  ==  0)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  tokens.size()  ==  0)  {	  if(stopAtNonOption    &&    tokens.size()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
102	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens.size()  >  0)  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  tokens.size()  >  0)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  tokens.size()  >  0)  {	  if(stopAtNonOption    &&    tokens.size()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
103	[BUG]  [BUGGY]  if(stopAtNonOption  &&  tokens.size()  >  1)  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  tokens.size()  >  1)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  tokens.size()  >  1)  {	  if(stopAtNonOption    &&    tokens.size()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
104	[BUG]  [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption,  token);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption,  token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOption(token,  stopAtNonOption,  token);	  Option    options    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
105	[BUG]  [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption,  true);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption,  true);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOption(token,  stopAtNonOption,  true);	  Option    options    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
106	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  *  2  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  *  2  +  1);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length()  *  2  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length()    *    2);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
107	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)||  stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  option  =  options.getOption(token)||  stopAtNonOption;	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
108	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.contains(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.contains(token)&&  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  options.contains(token)&&  stopAtNonOption)  {	  if(stopAtNonOption    ||    options.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
109	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token,  stopAtNonOption)&&  tokens.containsKey(token))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token,  stopAtNonOption)&&  tokens.containsKey(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  options.hasOption(token,  stopAtNonOption)&&  tokens.containsKey(token))  {	  if(stopAtNonOption    ||    options.hasOption(token,    stopAtNonOption))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
110	[BUG]  [BUGGY]  while(stopAtNonOption  &&  options.contains(token))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  while(stopAtNonOption  &&  options.contains(token))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	while(stopAtNonOption  &&  options.contains(token))  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption    &&    tokens.contains(token))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
111	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens.contains(token)&&  StopAtNonOption)  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  tokens.contains(token)&&  StopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  tokens.contains(token)&&  StopAtNonOption)  {	  if(stopAtNonOption    ||    tokens.contains(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
112	[BUG]  [BUGGY]  tokens.add(token)+  stopAtNonOption  &&  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token)+  stopAtNonOption  &&  stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	tokens.add(token)+  stopAtNonOption  &&  stopAtNonOption;	  tokens.add(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
113	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.getOption(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.getOption(token)&&  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  options.getOption(token)&&  stopAtNonOption)  {	  if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
114	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)||  stopAtNonOption  &&  stopAtNonOption;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)||  stopAtNonOption  &&  stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOption(token)||  stopAtNonOption  &&  stopAtNonOption;	  Option    options    =    options.getOption(token)||    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
115	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.hasOption(token)&&  stopAtNonOption  ||  options.hasOption(token);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  boolean  stopAtNonOption  =  options.hasOption(token)&&  stopAtNonOption  ||  options.hasOption(token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	boolean  stopAtNonOption  =  options.hasOption(token)&&  stopAtNonOption  ||  options.hasOption(token);	  boolean    stopAtNonOption    =    options.hasOption(token)&&    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
116	[BUG]  [BUGGY]  Options  options  =  stopAtNonOption?  options.get(token):  null;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Options  options  =  stopAtNonOption?  options.get(token):  null;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Options  options  =  stopAtNonOption?  options.get(token):  null;	  Option    options    =    stopAtNonOption?    options.get(token):    null;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
117	[BUG]  [BUGGY]  Option  options  =  null?  options.get(token):  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  null?  options.get(token):  stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  null?  options.get(token):  stopAtNonOption;	  Option    options    =    stopAtNonOption?    options.get(token):    null;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
118	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length();  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length();	  TokenBuffer    tokens    =    new    TokenBuffer(token.length()    -    2);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
119	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.length()  ==  1)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  token.length()  ==  1)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  token.length()  ==  1)  {	  if(stopAtNonOption    ||    token.length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
120	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  tokens.length()  ==  0)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  tokens.length()  ==  0)  {	  if(stopAtNonOption    ||    token.length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
121	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)&&!options.hasOption(token);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token,  stopAtNonOption)&&!options.hasOption(token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	tokens.add(token,  stopAtNonOption)&&!options.hasOption(token);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
122	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)&&!stopAtNonOption;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)&&!stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOption(token)&&!stopAtNonOption;	  Option    options    =    options.getOption(token)&&    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
123	[BUG]  [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " "  +  token);  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " "  +  token);  }  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " "  +  token);  }	  While(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ".equals(token));    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
124	[BUG]  [BUGGY]  While(stopAtNonOption  &&  options.hasOption(token))  {  throw  new  IllegalArgumentException( " "  +  token);  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption  &&  options.hasOption(token))  {  throw  new  IllegalArgumentException( " "  +  token);  }  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	While(stopAtNonOption  &&  options.hasOption(token))  {  throw  new  IllegalArgumentException( " "  +  token);  }	  While(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ".equals(token));    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
125	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.equals(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  token.equals(token)&&  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  token.equals(token)&&  stopAtNonOption)  {	  if(stopAtNonOption    ||    token.equals(token))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
126	[BUG]  [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption)+  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption)+  1;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOption(token,  stopAtNonOption)+  1;	  Option    options    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
127	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  options);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  options);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  options);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
128	[BUG]  [BUGGY]  Options  options  =  options.getOptions(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Options  options  =  options.getOptions(token,  stopAtNonOption);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Options  options  =  options.getOptions(token,  stopAtNonOption);	  Option    options    =    options.getOptions(token);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
129	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token,  stopAtNonOption)&&  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token,  stopAtNonOption)&&  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  options.hasOption(token,  stopAtNonOption)&&  tokens.contains(token))  {	  if(stopAtNonOption    &&    options.hasOption(token,    stopAtNonOption))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
130	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.containsKey(token)||  tokens.containsKey(token))  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.containsKey(token)||  tokens.containsKey(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  options.containsKey(token)||  tokens.containsKey(token))  {	  if(stopAtNonOption    &&    options.contains(token)||    tokens.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
131	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)&&!stopAtNonOption;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.put(token,  stopAtNonOption)&&!stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	options.put(token,  stopAtNonOption)&&!stopAtNonOption;	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
132	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  token.startsWith( "- "))  {	  if(stopAtNonOption    &&    token.equals(token))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
133	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.equals( "-- "))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  token.equals( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  token.equals( "-- "))  {	  if(stopAtNonOption    ||    token.equals(token))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
134	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.equals( "__ "))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  token.equals( "__ "))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  token.equals( "__ "))  {	  if(stopAtNonOption    ||    token.equals(token))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
135	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)+  stopAtNonOption  &&  stopAtNonOption;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)+  stopAtNonOption  &&  stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOption(token)+  stopAtNonOption  &&  stopAtNonOption;	  Option    options    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
136	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)-  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)-  stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOption(token)-  stopAtNonOption;	  Option    options    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
137	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)&&  stopAtNonOption  &&  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)&&  stopAtNonOption  &&  stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOption(token)&&  stopAtNonOption  &&  stopAtNonOption;	  Option    options    =    options.getOption(token)&&    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
138	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token)&&  StopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token)&&  StopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  options.hasOption(token)&&  StopAtNonOption)  {	  if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
139	[BUG]  [BUGGY]  while(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  while(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	while(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
140	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  while(stopAtNonOption)  {  tokens.add(token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	while(stopAtNonOption)  {  tokens.add(token);	  While(stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
141	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }	  tokens.add(token);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
142	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  options.hasOption(token))  {  tokens.add(token);  }	  if(stopAtNonOption    &&    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
143	[BUG]  [BUGGY]  options.addOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.addOption(token,  stopAtNonOption);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	options.addOption(token,  stopAtNonOption);	  options.add(token);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
144	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.contains(token)&&  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.contains(token)&&  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  options.contains(token)&&  tokens.contains(token))  {	  if(stopAtNonOption    ||    options.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
145	[BUG]  [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);	  Option    options    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
146	[BUG]  [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption)&&!stopAtNonOption;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption)&&!stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	Option  options  =  options.getOption(token,  stopAtNonOption)&&!stopAtNonOption;	  Option    options    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
147	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens.contains(token)||  endAtNonOption)  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  tokens.contains(token)||  endAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  tokens.contains(token)||  endAtNonOption)  {	  if(stopAtNonOption    ||    tokens.contains(token)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
148	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)&&!stopAtNonOption;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token,  stopAtNonOption)&&!stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	tokens.add(token,  stopAtNonOption)&&!stopAtNonOption;	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
149	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token,  stopAtNonOption)&&  tokens.isEmpty())  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token,  stopAtNonOption)&&  tokens.isEmpty())  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  ||  options.hasOption(token,  stopAtNonOption)&&  tokens.isEmpty())  {	  if(stopAtNonOption    ||    options.hasOption(token,    stopAtNonOption))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
150	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  processOptionToken(token,  stopAtNonOption);  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	processOptionToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
151	[BUG]  [BUGGY]  tokens.add(token)&&!stopAtNonOption;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token)&&!stopAtNonOption;  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	tokens.add(token)&&!stopAtNonOption;	  tokens.add(token)&&    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
152	[BUG]  [BUGGY]  While(stopAtNonOption  &&  token  <  =  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption  &&  token  <  =  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	While(stopAtNonOption  &&  token  <  =  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption    &&    token    <    =    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
153	[BUG]  [BUGGY]  While(stopAtNonOption  &&  token  <  =  StopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption  &&  token  <  =  StopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	While(stopAtNonOption  &&  token  <  =  StopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption    &&    token    <    =    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
154	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)&&  tokens.contains(token);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.put(token,  stopAtNonOption)&&  tokens.contains(token);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	options.put(token,  stopAtNonOption)&&  tokens.contains(token);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
155	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption?  null  :  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.put(token,  stopAtNonOption?  null  :  stopAtNonOption);  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	options.put(token,  stopAtNonOption?  null  :  stopAtNonOption);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
156	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.contains(token)&&  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.contains(token)&&  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	if(stopAtNonOption  &&  options.contains(token)&&  tokens.contains(token))  {	  if(stopAtNonOption    &&    options.contains(token)||    tokens.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
157	[BUG]  [BUGGY]  while(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  while(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (stopAtNonOption  &&  !options.hasOption(token))  {  {  eatTheRest  =  true;  }  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	while(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  While(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
