bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.contains(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.contains(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  options.contains(token))  {	  else    if(stopAtNonOption    ||    options.contains(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
2	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.contains(option))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.contains(option))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  options.contains(option))  {	  else    if(stopAtNonOption    ||    options.contains(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
3	[BUG]  [BUGGY]  Iterator  iter  =  options.getOptionIterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  iter  =  options.getOptionIterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  iter  =  options.getOptionIterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
4	[BUG]  [BUGGY]  Iterator  iter  =  options.getOptionIterator().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  iter  =  options.getOptionIterator().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  iter  =  options.getOptionIterator().iterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
5	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.get(arguments.iterator(),  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.get(arguments.iterator(),  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.get(arguments.iterator(),  stopAtNonOption);	  Iterator    <    String>    iter    =    options.get(arguments.iterator());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
6	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.get(options.iterator());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.get(options.iterator());  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.get(options.iterator());	  Iterator    <    String>    iter    =    options.get(arguments.iterator());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
7	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)||  options.hasOption(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)||  options.hasOption(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  options.hasOption(token)||  options.hasOption(token))  {	  else    if(stopAtNonOption    &&    options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
8	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  options.hasOption(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  options.hasOption(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  options.hasOption(token)&&  options.hasOption(token))  {	  else    if(stopAtNonOption    &&    options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
9	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(opt)||  options.hasOption(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(opt)||  options.hasOption(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  options.hasOption(opt)||  options.hasOption(token))  {	  else    if(stopAtNonOption    &&    options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
10	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasArg(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasArg(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  options.hasArg(token))  {	  else    if(stopAtNonOption    ||    options.hasArg(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
11	[BUG]  [BUGGY]  else  if(options.hasArg(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.hasArg(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(options.hasArg(token))  {	  else    if(stopAtNonOption    ||    options.hasArg(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
12	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasArg(option))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasArg(option))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  options.hasArg(option))  {	  else    if(stopAtNonOption    ||    options.hasArg(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
13	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Ilerator  <  String>  iter  =  options.values().iterator();	  Ilerator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
14	[BUG]  [BUGGY]  List  <  String>  iter  =  options.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  List  <  String>  iter  =  options.iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	List  <  String>  iter  =  options.iterator();	  Ilerator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
15	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(arguments))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(arguments))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  tokens.contains(arguments))  {	  else    if(stopAtNonOption    ||    tokens.contains(arguments))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
16	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  arguments.contains(token))  {	  else    if(stopAtNonOption    ||    tokens.contains(arguments))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
17	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains(arguments))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains(arguments))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  arguments.contains(arguments))  {	  else    if(stopAtNonOption    ||    tokens.contains(arguments))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
18	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.contains(arguments))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.contains(arguments))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  options.contains(arguments))  {	  else    if(stopAtNonOption    ||    tokens.contains(arguments))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
19	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  arguments.contains(token))  {	  else    if(stopAtNonOption    &&    tokens.contains(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
20	[BUG]  [BUGGY]  List  <  String>  iter  =  options.iterator();  tokens.add(option);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  List  <  String>  iter  =  options.iterator();  tokens.add(option);  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	List  <  String>  iter  =  options.iterator();  tokens.add(option);	  Iterator    <    String>    iter    =    options.iterator();    tokens.add(option);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
21	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption  ==  null)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption  ==  null)  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption  ==  null)  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption!=    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
22	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  null)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  null)  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(options.hasOption(token)&&  stopAtNonOption!=  null)  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption!=    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
23	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  option!=  null)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  option!=  null)  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  options.hasOption(token)&&  option!=  null)  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption!=    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
24	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  tokens.contains(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  tokens.contains(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  options.hasOption(token)&&  tokens.contains(token))  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    tokens.contains(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
25	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  arguments.contains(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  arguments.contains(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  options.hasOption(token)&&  arguments.contains(token))  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    tokens.contains(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
26	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  tokens.contains(option))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  tokens.contains(option))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  options.hasOption(token)&&  tokens.contains(option))  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    tokens.contains(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
27	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(option))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(option))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  tokens.contains(option))  {	  else    if(stopAtNonOption    ||    tokens.contains(option))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
28	[BUG]  [BUGGY]  else  if(option  ||  tokens.contains(stopAtNonOption))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(option  ||  tokens.contains(stopAtNonOption))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(option  ||  tokens.contains(stopAtNonOption))  {	  else    if(stopAtNonOption    ||    tokens.contains(option))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
29	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  tokens.add(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  tokens.add(token);  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.iterator();  tokens.add(token);	  if(options!=    null)    {    Iterator    <    String>    iter    =    options.iterator();    tokens.add(opt);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
30	[BUG]  [BUGGY]  tokens.add(opt,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  tokens.add(opt,  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	tokens.add(opt,  stopAtNonOption);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
31	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)+  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  tokens.add(token,  stopAtNonOption)+  1;  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	tokens.add(token,  stopAtNonOption)+  1;	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
32	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().keySet().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().keySet().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.getOptions().keySet().iterator();	  Iterator    <    String>    iter    =    options.getOptions().values().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
33	[BUG]  [BUGGY]  List  <  String>  iter  =  options.getOptions().values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  List  <  String>  iter  =  options.getOptions().values().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	List  <  String>  iter  =  options.getOptions().values().iterator();	  Iterator    <    String>    iter    =    options.getOptions().values().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
34	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)||  tokens.contains(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)||  tokens.contains(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  options.hasOption(token)||  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    options.hasOption(token)||    tokens.contains(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
35	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getAllIterators().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.getAllIterators().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.getAllIterators().iterator();	  Iterator    <    String>    iter    =    options.getAllOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
36	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getIterables();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.getIterables();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.getIterables();	  Iterator    <    String>    iter    =    options.getIterables().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
37	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getAllIterables().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.getAllIterables().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.getAllIterables().iterator();	  Iterator    <    String>    iter    =    options.getIterables().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
38	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOption(pos).iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.getOption(pos).iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.getOption(pos).iterator();	  Iterator    <    String>    iter    =    options.getOption(options).iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
39	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOption(opt).iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.getOption(opt).iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.getOption(opt).iterator();	  Iterator    <    String>    iter    =    options.getOption(options).iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
40	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(options.hasOption(token)||  options.hasOption(token))  {	  else    if(options.hasOption(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
41	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(options.hasOption(token)&&  stopAtNonOption)  {	  else    if(options.hasOption(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
42	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.contains(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.hasOption(token)&&  options.contains(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(options.hasOption(token)&&  options.contains(token))  {	  else    if(options.hasOption(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
43	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  arguments.contains(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.hasOption(token)||  arguments.contains(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(options.hasOption(token)||  arguments.contains(token))  {	  else    if(options.hasOption(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
44	[BUG]  [BUGGY]  tokens.add(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  tokens.add(pos);  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	tokens.add(pos);	  tokens.add(option);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
45	[BUG]  [BUGGY]  Iterator  iter  =  options.getIterator(pos  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  iter  =  options.getIterator(pos  +  1);  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  iter  =  options.getIterator(pos  +  1);	  Iterator    iter    =    options.getIterator(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
46	[BUG]  [BUGGY]  Iterator  iter  =  options.getIterator(pos  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  iter  =  options.getIterator(pos  -  1);  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  iter  =  options.getIterator(pos  -  1);	  Iterator    iter    =    options.getIterator(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
47	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains(opt))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains(opt))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  arguments.contains(opt))  {	  else    if(stopAtNonOption    ||    arguments.contains(opt))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
48	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains(option))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains(option))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  arguments.contains(option))  {	  else    if(stopAtNonOption    ||    arguments.contains(opt))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
49	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator(2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator(2);  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.getOptions().iterator(2);	  Iterator    <    String>    iter    =    options.getOptions().iterator(0);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
50	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator(1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator(1);  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.getOptions().iterator(1);	  Iterator    <    String>    iter    =    options.getOptions().iterator(0);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
51	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator(pos);  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.getOptions().iterator(pos);	  Iterator    <    String>    iter    =    options.getOptions().iterator(0);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
52	[BUG]  [BUGGY]  iter  =  options.values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter  =  options.values().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	iter  =  options.values().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
53	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  options.contains(option))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  options.contains(option))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  options.hasOption(token)&&  options.contains(option))  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    tokens.contains(opt))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
54	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  tokens.contains(opt))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  tokens.contains(opt))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  options.hasOption(token)&&  tokens.contains(opt))  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    tokens.contains(opt))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
55	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  arguments.contains(opt))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  arguments.contains(opt))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  options.hasOption(token)&&  arguments.contains(opt))  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    tokens.contains(opt))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
56	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  tokens.contains(pos))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  tokens.contains(pos))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  options.hasOption(token)&&  tokens.contains(pos))  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    tokens.contains(opt))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
57	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.contains(opt))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.contains(opt))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  options.contains(opt))  {	  else    if(stopAtNonOption    ||    options.contains(opt))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
58	[BUG]  [BUGGY]  else  if(options.contains(opt))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.contains(opt))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(options.contains(opt))  {	  else    if(stopAtNonOption    ||    options.contains(opt))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
59	[BUG]  [BUGGY]  iter  =  options.keySet().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter  =  options.keySet().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	iter  =  options.keySet().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
60	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(pos))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(pos))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  tokens.contains(pos))  {	  else    if(stopAtNonOption    &&    tokens.contains(opt))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
61	[BUG]  [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	List  <  String>  iter  =  options.values().iterator();	  List    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
62	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  eatTheRest)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  eatTheRest)  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  eatTheRest)  {	  else    if(eatTheRest    ||    stopAtNonOption)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
63	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens.size()  ==  2)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  tokens.size()  ==  2)  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  tokens.size()  ==  2)  {	  else    if(eatTheRest    ||    stopAtNonOption)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
64	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptIterator().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.getOptIterator().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.getOptIterator().iterator();	  Iterator    <    String>    iter    =    options.getOptOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
65	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOpt().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.getOpt().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.getOpt().iterator();	  Iterator    <    String>    iter    =    options.getOptOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
66	[BUG]  [BUGGY]  else  if(stopTheRest  ||  options.hasOption(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopTheRest  ||  options.hasOption(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopTheRest  ||  options.hasOption(token))  {	  else    if(stopTheRest    &&    options.hasOption(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
67	[BUG]  [BUGGY]  else  if(stopTheRest  &&  options.hasOption(token)||  options.hasOption(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopTheRest  &&  options.hasOption(token)||  options.hasOption(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopTheRest  &&  options.hasOption(token)||  options.hasOption(token))  {	  else    if(stopTheRest    &&    options.hasOption(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
68	[BUG]  [BUGGY]  else  if(options.contains(token)||  tokens.contains(stopAtNonOption))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.contains(token)||  tokens.contains(stopAtNonOption))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(options.contains(token)||  tokens.contains(stopAtNonOption))  {	  else    if(opt    ||    tokens.contains(stopAtNonOption))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
69	[BUG]  [BUGGY]  else  if(options.contains(token)||  options.contains(stopAtNonOption))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.contains(token)||  options.contains(stopAtNonOption))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(options.contains(token)||  options.contains(stopAtNonOption))  {	  else    if(opt    ||    tokens.contains(stopAtNonOption))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
70	[BUG]  [BUGGY]  else  if(options.contains(token)||  stopAtNonOption.contains(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.contains(token)||  stopAtNonOption.contains(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(options.contains(token)||  stopAtNonOption.contains(token))  {	  else    if(opt    ||    tokens.contains(stopAtNonOption))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
71	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.contains(pos))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.contains(pos))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  options.contains(pos))  {	  else    if(stopAtNonOption    ||    tokens.contains(pos))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
72	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains(pos))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains(pos))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  arguments.contains(pos))  {	  else    if(stopAtNonOption    ||    tokens.contains(pos))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
73	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption  ==  true)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption  ==  true)  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption  ==  true)  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption    ==    false)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
74	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ==  false)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ==  false)  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ==  false)  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption    ==    false)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
75	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption!=  false)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption!=  false)  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption!=  false)  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption    ==    false)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
76	[BUG]  [BUGGY]  else  if(!stopAtNonOption)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(!stopAtNonOption)  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(!stopAtNonOption)  {	  else    if(eatTheRest)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
77	[BUG]  [BUGGY]  else  if(tokens.size()  ==  2  ||  options.hasOption(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(tokens.size()  ==  2  ||  options.hasOption(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(tokens.size()  ==  2  ||  options.hasOption(token))  {	  else    if(eatTheRest    ||    options.hasOption(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
78	[BUG]  [BUGGY]  Option  iter  =  options.getOption(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.getOption(pos);  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Option  iter  =  options.getOption(pos);	  Option    iter    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
79	[BUG]  [BUGGY]  Option  iter  =  options.getOption(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.getOption(token);  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Option  iter  =  options.getOption(token);	  Option    iter    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
80	[BUG]  [BUGGY]  Option  iter  =  options.getOption(option);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.getOption(option);  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Option  iter  =  options.getOption(option);	  Option    iter    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
81	[BUG]  [BUGGY]  Options  iter  =  options.getOption(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Options  iter  =  options.getOption(pos);  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Options  iter  =  options.getOption(pos);	  Option    iter    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
82	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  arguments.contains(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  arguments.contains(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  options.hasOption(token)&&  arguments.contains(token))  {	  else    if(stopAtNonOption    &&    options.hasOption(token)||    arguments.contains(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
83	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)||  arguments.contains(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)||  arguments.contains(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  options.hasOption(token)||  arguments.contains(token))  {	  else    if(stopAtNonOption    &&    options.hasOption(token)||    arguments.contains(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
84	[BUG]  [BUGGY]  tokens.add(arguments[pos]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  tokens.add(arguments[pos]);  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	tokens.add(arguments[pos]);	  tokens.add(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
85	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption!=  null)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption!=  null)  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption!=  null)  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption!=    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
86	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.contains(option))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.contains(option))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  options.contains(option))  {	  else    if(stopAtNonOption    ||    tokens.contains(option))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
87	[BUG]  [BUGGY]  else  if(haltAtNonOption  ||  options.hasOption(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(haltAtNonOption  ||  options.hasOption(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(haltAtNonOption  ||  options.hasOption(token))  {	  else    if(eatTheRest    ||    options.hasOption(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
88	[BUG]  [BUGGY]  else  if(opt  ||  options.contains(stopAtNonOption))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(opt  ||  options.contains(stopAtNonOption))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(opt  ||  options.contains(stopAtNonOption))  {	  else    if(stopAtNonOption    ||    options.contains(opt))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
89	[BUG]  [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Ilerator  iter  =  options.keySet().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
90	[BUG]  [BUGGY]  else  if(options.contains(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.contains(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(options.contains(token))  {	  else    if(stopAtNonOption    ||    options.contains(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
91	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  options.hasArg(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(!stopAtNonOption  &&  options.hasArg(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(!stopAtNonOption  &&  options.hasArg(token))  {	  else    if(stopAtNonOption    ||    options.hasArg(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
92	[BUG]  [BUGGY]  if(options!=  null)  {  Iterator  <  String>  iter  =  options.iterator();  tokens.add(option);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  if(options!=  null)  {  Iterator  <  String>  iter  =  options.iterator();  tokens.add(option);  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	if(options!=  null)  {  Iterator  <  String>  iter  =  options.iterator();  tokens.add(option);  }	  Iterator    <    String>    iter    =    options.iterator();    tokens.add(option);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
93	[BUG]  [BUGGY]  if(options!=  null)  {  Iterator  <  String>  iter  =  options.iterator();  tokens.add(option);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  if(options!=  null)  {  Iterator  <  String>  iter  =  options.iterator();  tokens.add(option);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	if(options!=  null)  {  Iterator  <  String>  iter  =  options.iterator();  tokens.add(option);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Iterator    <    String>    iter    =    options.iterator();    tokens.add(option);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
94	[BUG]  [BUGGY]  else  if(opt  &&  tokens.contains(stopAtNonOption))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(opt  &&  tokens.contains(stopAtNonOption))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(opt  &&  tokens.contains(stopAtNonOption))  {	  else    if(opt    ||    tokens.contains(stopAtNonOption))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
95	[BUG]  [BUGGY]  else  if(eatTheRest  ||  tokens.contains(stopAtNonOption))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(eatTheRest  ||  tokens.contains(stopAtNonOption))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(eatTheRest  ||  tokens.contains(stopAtNonOption))  {	  else    if(opt    ||    tokens.contains(stopAtNonOption))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
96	[BUG]  [BUGGY]  List  <  String>  iter  =  tokens.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  List  <  String>  iter  =  tokens.iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	List  <  String>  iter  =  tokens.iterator();	  Iterator    <    String>    iter    =    tokens.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
97	[BUG]  [BUGGY]  Iterator  <  String>  options  =  options.iterator();  tokens.add(opt);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  options  =  options.iterator();  tokens.add(opt);  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  options  =  options.iterator();  tokens.add(opt);	  if(options!=    null)    {    Iterator    <    String>    iter    =    options.iterator();    tokens.add(opt);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
98	[BUG]  [BUGGY]  Iterator  <  String>  options  =  options.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  options  =  options.iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  options  =  options.iterator();	  if(options!=    null)    {    Iterator    <    String>    iter    =    options.iterator();    tokens.add(opt);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
99	[BUG]  [BUGGY]  Iterator  iter  =  options.getIterator(options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  iter  =  options.getIterator(options);  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  iter  =  options.getIterator(options);	  Iterator    iter    =    options.getIterator(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
100	[BUG]  [BUGGY]  Iterator  iter  =  options.getOptions().values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  iter  =  options.getOptions().values().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  iter  =  options.getOptions().values().iterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
101	[BUG]  [BUGGY]  Iterator  iter  =  options.getOptOptions().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  iter  =  options.getOptOptions().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  iter  =  options.getOptOptions().iterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
102	[BUG]  [BUGGY]  Ilerator  iter  =  options.getOptions().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Ilerator  iter  =  options.getOptions().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Ilerator  iter  =  options.getOptions().iterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
103	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  tokens.contains(opt))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.hasOption(token)&&  tokens.contains(opt))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(options.hasOption(token)&&  tokens.contains(opt))  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    tokens.contains(opt))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
104	[BUG]  [BUGGY]  else  if(opt  ||  options.hasOption(token)&&  tokens.contains(stopAtNonOption))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(opt  ||  options.hasOption(token)&&  tokens.contains(stopAtNonOption))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(opt  ||  options.hasOption(token)&&  tokens.contains(stopAtNonOption))  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    tokens.contains(opt))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
105	[BUG]  [BUGGY]  Ilerator  iter  =  options.values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Ilerator  iter  =  options.values().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Ilerator  iter  =  options.values().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
106	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getIterables().values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.getIterables().values().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.getIterables().values().iterator();	  Iterator    <    String>    iter    =    options.getIterables().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
107	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getIterables().iterator(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.getIterables().iterator(pos);  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.getIterables().iterator(pos);	  Iterator    <    String>    iter    =    options.getIterables().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
108	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  eattheRest)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  eattheRest)  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  eattheRest)  {	  else    if(eatTheRest    ||    stopAtNonOption)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
109	[BUG]  [BUGGY]  else  if(eatTheRest  &&  stopAtNonOption)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(eatTheRest  &&  stopAtNonOption)  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(eatTheRest  &&  stopAtNonOption)  {	  else    if(eatTheRest    ||    stopAtNonOption)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
110	[BUG]  [BUGGY]  else  if(haltAtNonOption  ||  eatTheRest)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(haltAtNonOption  ||  eatTheRest)  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(haltAtNonOption  ||  eatTheRest)  {	  else    if(eatTheRest    ||    stopAtNonOption)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
111	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(options.hasOption(token)||  stopAtNonOption)  {	  else    if(options.hasOption(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
112	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption  ==  false)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption  ==  false)  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption  ==  false)  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption    ==    false)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
113	[BUG]  [BUGGY]  else  if(opt  ||  arguments.contains(stopAtNonOption))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(opt  ||  arguments.contains(stopAtNonOption))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(opt  ||  arguments.contains(stopAtNonOption))  {	  else    if(stopAtNonOption    ||    arguments.contains(opt))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
114	[BUG]  [BUGGY]  Option  iter  =  options.getOption(opt,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Option  iter  =  options.getOption(opt,  stopAtNonOption);	  Option    iter    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
115	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getAllOptions().values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.getAllOptions().values().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.getAllOptions().values().iterator();	  Iterator    <    String>    iter    =    options.getAllOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
116	[BUG]  [BUGGY]  else  if(eatTheRest  &&  options.hasOption(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(eatTheRest  &&  options.hasOption(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(eatTheRest  &&  options.hasOption(token))  {	  else    if(stopTheRest    &&    options.hasOption(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
117	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.getOptions().values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Ilerator  <  String>  iter  =  options.getOptions().values().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Ilerator  <  String>  iter  =  options.getOptions().values().iterator();	  Iterator    <    String>    iter    =    options.getOptions().values().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
118	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(p))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(p))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  tokens.contains(p))  {	  else    if(stopAtNonOption    ||    tokens.contains(pos))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
119	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||  tokens.contains(opt))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||  tokens.contains(opt))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  options.hasOption(token)||  tokens.contains(opt))  {	  else    if(stopAtNonOption    &&    options.hasOption(token)||    tokens.contains(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
120	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.get(opt.iterator());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.get(opt.iterator());  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.get(opt.iterator());	  Iterator    <    String>    iter    =    options.get(arguments.iterator());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
121	[BUG]  [BUGGY]  ArrayList  <  String>  iter  =  options.keySet().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  ArrayList  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	ArrayList  <  String>  iter  =  options.keySet().iterator();	  List    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
122	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(options.hasOption(token)&&  options.hasOption(token))  {	  else    if(options.hasOption(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
123	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(opt))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(opt))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(options.hasOption(token)&&  options.hasOption(opt))  {	  else    if(options.hasOption(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
124	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains(arguments))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains(arguments))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  &&  arguments.contains(arguments))  {	  else    if(stopAtNonOption    ||    tokens.contains(arguments))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
125	[BUG]  [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  iter  =  this.tokens.iterator();	  Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
126	[BUG]  [BUGGY]  Iterator  iter  =  options.list().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  iter  =  options.list().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  iter  =  options.list().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
127	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.get(arguments.iterator()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.get(arguments.iterator()  -  1);  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.get(arguments.iterator()  -  1);	  Iterator    <    String>    iter    =    options.get(arguments.iterator());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
128	[BUG]  [BUGGY]  tokens.add(chomp,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  tokens.add(chomp,  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	tokens.add(chomp,  stopAtNonOption);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
129	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptIterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.getOptIterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.getOptIterator();	  Iterator    <    String>    iter    =    options.getOptOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
130	[BUG]  [BUGGY]  Iterator  iter  =  options.allOptions().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  iter  =  options.allOptions().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  iter  =  options.allOptions().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
131	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptions(options).iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.getOptions(options).iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.getOptions(options).iterator();	  Iterator    <    String>    iter    =    options.getOption(options).iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
132	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  options.hasOption(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  options.hasOption(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(stopAtNonOption  ||  options.hasOption(token)&&  options.hasOption(token))  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption!=    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
133	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().entrySet().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().entrySet().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.getOptions().entrySet().iterator();	  Iterator    <    String>    iter    =    options.getOptions().values().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
134	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getValues().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.getValues().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  <  String>  iter  =  options.getValues().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
135	[BUG]  [BUGGY]  Iterator  iter  =  options.getOption(opt).iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  iter  =  options.getOption(opt).iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	Iterator  iter  =  options.getOption(opt).iterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
136	[BUG]  [BUGGY]  else  if(token.length()  ==  2  ||  options.hasOption(token))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]      {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	else  if(token.length()  ==  2  ||  options.hasOption(token))  {	  else    if(eatTheRest    ||    options.hasOption(token))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
