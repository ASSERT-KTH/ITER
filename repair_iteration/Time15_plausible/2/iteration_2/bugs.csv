bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
2	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
3	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	54	None	add
4	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1.length);  }  [CE]  long  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1.length);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1.length);  }	  	non-compiled	[CE]  long  cannot  be  dereferenced	54	None	add
5	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  CategoryUtils.safeMultiply(val1,  val2);  }  [CE]  cannot  find  symbol  CategoryUtils  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  CategoryUtils.safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  CategoryUtils.safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  cannot  find  symbol  CategoryUtils	54	None	add
6	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  CategoryUtils.safeMultiply(val1,  val2,  val1);  }  [CE]  cannot  find  symbol  CategoryUtils  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  CategoryUtils.safeMultiply(val1,  val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  CategoryUtils.safeMultiply(val1,  val2,  val1);  }	  	non-compiled	[CE]  cannot  find  symbol  CategoryUtils	54	None	add
7	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  1,  val2,  0,  val1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  1,  val2,  0,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  1,  val2,  0,  val1);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	54	None	add
8	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  1,  val1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  1,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  1,  val1);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	54	None	add
9	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1);	  	non-compiled	[CE]  orphaned  case	54	None	add
10	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	39	1	add
11	[BUG]  [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	39	1	add
12	[BUG]  [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  [CE]  incompatible  types  [FE]      ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }	  	non-compiled	[CE]  incompatible  types	39	None	add
13	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	39	1	add
14	[BUG]  [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	39	1	add
15	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	39	1	add
16	[BUG]  [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	39	1	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	52	1	add
18	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	52	1	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	52	1	add
20	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	52	1	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	52	1	add
22	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	52	1	add
23	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    if(val1  >>  val2)  {  return  -1;  }	  	non-compiled	[CE]  incompatible  types	52	None	add
24	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  [Delete]  val2)  {  return  -1;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  [Delete]  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    if(val1  [Delete]  val2)  {  return  -1;  }	  	non-compiled	[CE]  ')'  expected	52	None	add
25	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  {  val2)  {  return  -1;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  {  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    if(val1  {  val2)  {  return  -1;  }	  	non-compiled	[CE]  ')'  expected	52	None	add
26	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  [BUGGY]  val2)  {  return  -1;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  [BUGGY]  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    if(val1  [BUGGY]  val2)  {  return  -1;  }	  	non-compiled	[CE]  ')'  expected	52	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val1)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -1;    }    if(val2  ==  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	52	1	add
28	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val1)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val1)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    if(val2  ==  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	52	1	add
29	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  If(val1  ==  val2)  {  return  -1;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  If(val1  ==  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    If(val1  ==  val2)  {  return  -1;  }	  	non-compiled	[CE]  ';'  expected	52	None	add
30	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	6	None	replace
31	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
32	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
33	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
34	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	6	None	replace
35	[BUG]  [BUGGY]  int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	6	None	replace
36	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
38	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
39	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  incompatible  types	23	None	add
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
41	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
43	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
44	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [Delete]  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [Delete]  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  [Delete]  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  ')'  expected	23	None	add
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
46	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
48	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
49	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [BUGGY]  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [BUGGY]  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  [BUGGY]  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  ')'  expected	23	None	add
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  >=  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  >=  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
51	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  >=  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  >=  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  >=  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
52	[BUG]  [BUGGY]  return  -1;  if(val1  ==  val2)  {  return  -1;  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1;  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1;    if(val1  ==  val2)  {  return  -1;  }	  	non-compiled	[CE]  unreachable  statement	11	None	add
53	[BUG]  [BUGGY]  return  -1;  if(val1  >=  val2)  {  return  -1;  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1;  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1;    if(val1  >=  val2)  {  return  -1;  }	  	non-compiled	[CE]  unreachable  statement	11	None	add
54	[BUG]  [BUGGY]  return  -1;  if(val1!=  val2)  {  return  -1;  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1;  if(val1!=  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1;    if(val1!=  val2)  {  return  -1;  }	  	non-compiled	[CE]  unreachable  statement	11	None	add
55	[BUG]  [BUGGY]  return  -1;  long  return  -1;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1;  long  return  -1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1;    long  return  -1;	  	non-compiled	[CE]  not  a  statement	11	None	add
56	[BUG]  [BUGGY]  return  -1;  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1;  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1;    if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  unreachable  statement	11	None	add
57	[BUG]  [BUGGY]  return  -1;  if(val1  <  val2)  {  return  -1;  }  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1;  if(val1  <  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1;    if(val1  <  val2)  {  return  -1;  }	  	non-compiled	[CE]  unreachable  statement	11	None	add
58	[BUG]  [BUGGY]  return  -1;  return  -1;  [CE]  unreachable  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1;  return  -1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1;    return  -1;	  	non-compiled	[CE]  unreachable  statement	11	None	add
59	[BUG]  [BUGGY]  return  -1;  long  val2  =  val1.longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1;  long  val2  =  val1.longValue();  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1;    long  val2  =  val1.longValue();	  	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	11	None	add
60	[BUG]  [BUGGY]  return  -1;  int  val2  =(int)Math.floor(val1);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1;  int  val2  =(int)Math.floor(val1);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1;    int  val2  =(int)Math.floor(val1);	  	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	11	None	add
61	[BUG]  [BUGGY]  return  -1;  int  val2  =  getValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1;  int  val2  =  getValue();  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1;    int  val2  =  getValue();	  	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	11	None	add
62	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safeMultiply(val1,  val2);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	safeMultiply(val1,  val2);	  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  StackOverflowError  	30	1	replace
63	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safeMultiply(val1,  val2);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1,  val2);	  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  StackOverflowError  	30	1	replace
64	[BUG]  [BUGGY]  SafeMultiply.safeMultiply(val1,  val2);  [CE]  cannot  find  symbol  SafeMultiply  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  SafeMultiply.safeMultiply(val1,  val2);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	SafeMultiply.safeMultiply(val1,  val2);	  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  cannot  find  symbol  SafeMultiply	30	None	replace
65	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1);  [CE]  no  suitable  method  found  for  safeMultiply(long,int,long)  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safeMultiply(val1,  val2,  val1);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1,  val2,  val1);	  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long,int,long)	30	None	replace
66	[BUG]  [BUGGY]  safelyMultiply(val1,  val2);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safelyMultiply(val1,  val2);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safelyMultiply(val1,  val2);	  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safeMultiply(val2,  val1);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	safeMultiply(val2,  val1);	  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	30	1	replace
68	[BUG]  [BUGGY]  safeMultiply(val2,  val1);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safeMultiply(val2,  val1);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val2,  val1);	  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	30	1	replace
69	[BUG]  [BUGGY]  safeMultiply(val1,  val2).returnValue;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safeMultiply(val1,  val2).returnValue;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1,  val2).returnValue;	  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	30	None	replace
70	[BUG]  [BUGGY]  safeMultiply(val1,  val2).returnValue();  [CE]  long  cannot  be  dereferenced  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safeMultiply(val1,  val2).returnValue();  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1,  val2).returnValue();	  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  long  cannot  be  dereferenced	30	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
72	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
73	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  <identifier>  expected	21	None	add
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
75	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
77	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
79	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
80	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1)  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1)  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1)  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
81	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  If(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  If(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    If(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  ';'  expected	21	None	add
82	[BUG]  [BUGGY]  vice(val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  vice(val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	vice(val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	16	1	replace
84	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	16	1	replace
85	[BUG]  [BUGGY]  vice(val1)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  vice(val1)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	vice(val1)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	16	1	replace
87	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	16	1	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  0;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  ==  val2)  {  return  0;  }	  if(val1    ==    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
89	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  0;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  0;  }	  if(val1    ==    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  0;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >=  val2)  {  return  0;  }	  if(val1    ==    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
91	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  0;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  0;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  0;  }	  if(val1    ==    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  ==  val2)  {  return  0L;  }	  if(val1    ==    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
93	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  0L;  }	  if(val1    ==    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  0;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=  val2)  {  return  0;  }	  if(val1    ==    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
95	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  0;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  0;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=  val2)  {  return  0;  }	  if(val1    ==    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >=  val2)  {  return  0L;  }	  if(val1    ==    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
97	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  0L;  }	  if(val1    ==    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val2  ==  val1)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val2  ==  val1)  {  return  -1;  }	  if(val1    ==    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
99	[BUG]  [BUGGY]  if(val2  ==  val1)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val2  ==  val1)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val2  ==  val1)  {  return  -1;  }	  if(val1    ==    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  <  val2)  {  return  -1;  }	  if(val1    ==    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
101	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  return  -1;  }	  if(val1    ==    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  0L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=  val2)  {  return  0L;  }	  if(val1    ==    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
103	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  0L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=  val2)  {  return  0L;  }	  if(val1    ==    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
104	[BUG]  [BUGGY]  if(val1  <  =  val2)  {  return  -val1;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  =  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  =  val2)  {  return  -val1;  }	  if(val1    >    val2)    {    return    -val1;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  <  val2)  {  return  -val1;  }	  if(val1    >    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	47	1	replace
106	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  return  -val1;  }	  if(val1    >    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	47	1	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  ==  val2)  {  return  -val1;  }	  if(val1    >    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	47	1	replace
108	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -val1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -val1;  }	  if(val1    >    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	47	1	replace
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  <  val2)  {  return  -val2;  }	  if(val1    >    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	47	1	replace
110	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  return  -val2;  }	  if(val1    >    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	47	1	replace
111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  0;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >  val2)  {  return  0;  }	  if(val1    >    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	47	1	replace
112	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  0;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  0;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >  val2)  {  return  0;  }	  if(val1    >    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	47	1	replace
113	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
114	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
115	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
116	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  >  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  >  expected	33	None	replace
117	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2;  val1++)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val2;  val1++)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2;  val1++)  {  if(val1  >  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
118	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  >  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  >  expected	33	None	replace
119	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2,  val1)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val2,  val1)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2,  val1)  {  if(val1  >  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
120	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1)  {  if(val1  >  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
121	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	8	None	replace
122	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	8	None	replace
123	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	8	None	replace
124	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	8	None	replace
125	[BUG]  [BUGGY]  int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	8	None	replace
126	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	8	None	replace
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
128	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
130	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
131	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  incompatible  types	29	None	add
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
133	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
134	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [Delete]  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [Delete]  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  [Delete]  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  ')'  expected	29	None	add
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
136	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
138	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
139	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [BUGGY]  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [BUGGY]  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  [BUGGY]  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  ')'  expected	29	None	add
140	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	25	1	add
141	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	25	1	add
142	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  <identifier>  expected  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  <identifier>  expected	25	None	add
143	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	25	1	add
144	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	25	1	add
145	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	25	1	add
146	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	25	1	add
147	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	25	1	add
148	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	25	1	add
149	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	25	1	add
150	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	25	1	add
151	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	25	1	add
152	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	25	1	add
153	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  If(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                  StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  If(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    If(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  ';'  expected	25	None	add
154	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	38	None	replace
155	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	38	None	replace
156	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	38	None	replace
157	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + ",  *   "  +  val2);  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + ",  *   "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + ",  *   "  +  val2);  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	38	None	replace
158	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	45	None	replace
159	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	45	None	replace
160	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
161	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	45	None	replace
162	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	45	None	replace
163	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  >  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  >  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  >  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	45	None	replace
164	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
165	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
166	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  	41	None	replace
167	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	41	None	replace
168	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	41	None	replace
169	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  [CE]  >  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  >  expected	41	None	replace
170	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	41	None	replace
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  0;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  <  val2)  {  return  0;  }	  if(val1    >=    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	51	1	replace
172	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  0;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  return  0;  }	  if(val1    >=    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	51	1	replace
173	[BUG]  [BUGGY]  if(val1  <  =  val2)  {  return  -1;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  =  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  =  val2)  {  return  -1;  }	  if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
174	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >=  val2)  {  return  -1;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >=  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
175	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
176	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
177	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2,  val1)  {  if(val1  >=  val2)  {  return  -1;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val2,  val1)  {  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2,  val1)  {  if(val1  >=  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
178	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
179	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }  [CE]  >  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  >  expected	36	None	replace
180	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2.length)  {  return  -1;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2.length)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2.length)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
181	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2;  val1++)  {  if(val1  >=  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val2;  val1++)  {  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2;  val1++)  {  if(val1  >=  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
182	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -1;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	34	None	replace
183	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [CE]  >  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  >  expected	34	None	replace
184	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -1;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	34	None	replace
185	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0L;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0L;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0L;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	34	None	replace
186	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	34	None	replace
187	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	34	None	replace
188	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [CE]  >  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  >  expected	34	None	replace
189	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >=  0)  {  return  -1;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >=  0)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >=  0)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	34	None	replace
190	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
191	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >  val2)  {  return  -val2;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
192	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
193	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  >  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  >  expected	35	None	replace
194	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
195	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  <  val2)  {  return  -val2;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  <  val2)  {  return  -val2;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  <  val2)  {  return  -val2;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
196	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  >  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  >  expected	35	None	replace
197	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
198	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
199	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
200	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
201	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	1	None	replace
202	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
203	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
204	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	1	None	replace
205	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	19	1	add
206	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	19	1	add
207	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	19	1	add
208	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	19	1	add
209	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	19	1	add
210	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	19	1	add
211	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	19	1	add
212	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	19	1	add
213	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  incompatible  types  [FE]            StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  incompatible  types	19	None	add
214	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	19	1	add
215	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	19	1	add
216	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	19	1	add
217	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	19	1	add
218	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	19	1	add
219	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	19	1	add
220	[BUG]  [BUGGY]  return  -1L;  return  -1L;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L;  return  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1L;    return  -1L;	  	non-compiled	[CE]  unreachable  statement	13	None	add
221	[BUG]  [BUGGY]  return  -1L;  if(val1  ==  val2)  {  return  -1L;  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L;  if(val1  ==  val2)  {  return  -1L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1L;    if(val1  ==  val2)  {  return  -1L;  }	  	non-compiled	[CE]  unreachable  statement	13	None	add
222	[BUG]  [BUGGY]  return  -1L;  if(val1  >=  val2)  {  return  -1L;  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L;  if(val1  >=  val2)  {  return  -1L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1L;    if(val1  >=  val2)  {  return  -1L;  }	  	non-compiled	[CE]  unreachable  statement	13	None	add
223	[BUG]  [BUGGY]  return  -1L;  if(val1!=  val2)  {  return  -1L;  }  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L;  if(val1!=  val2)  {  return  -1L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1L;    if(val1!=  val2)  {  return  -1L;  }	  	non-compiled	[CE]  unreachable  statement	13	None	add
224	[BUG]  [BUGGY]  return  -1L;  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L;  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1L;    if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  unreachable  statement	13	None	add
225	[BUG]  [BUGGY]  return  -1L;  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L;  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1L;    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  unreachable  statement	13	None	add
226	[BUG]  [BUGGY]  return  -1L;  long  val2  =  -1L;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L;  long  val2  =  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1L;    long  val2  =  -1L;	  	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	13	None	add
227	[BUG]  [BUGGY]  return  -1L;  long  return  -1L;  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L;  long  return  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1L;    long  return  -1L;	  	non-compiled	[CE]  not  a  statement	13	None	add
228	[BUG]  [BUGGY]  return  -1L;  if(val1  <  val2)  {  return  -1L;  }  [CE]  unreachable  statement  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L;  if(val1  <  val2)  {  return  -1L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1L;    if(val1  <  val2)  {  return  -1L;  }	  	non-compiled	[CE]  unreachable  statement	13	None	add
229	[BUG]  [BUGGY]  return  -1L;  int  val2  =(int)Math.floor(val1);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L;  int  val2  =(int)Math.floor(val1);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1L;    int  val2  =(int)Math.floor(val1);	  	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	13	None	add
230	[BUG]  [BUGGY]  while(val1  <  val2)  {  val2  >  val1)  {  return  -val2;  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  <  val2)  {  val2  >  val1)  {  return  -val2;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  val2  >  val1)  {  return  -val2;  }	  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	22	None	replace
231	[BUG]  [BUGGY]  while(val1  <  val2)  {  val2  >  val1;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  <  val2)  {  val2  >  val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  val2  >  val1;	  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	22	None	replace
232	[BUG]  [BUGGY]  while(val1  <  val2)  {  val2  >  val1)  {  return  -1;  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  <  val2)  {  val2  >  val1)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  val2  >  val1)  {  return  -1;  }	  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	22	None	replace
233	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  ==  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  return    -1L;    	compilable	  [FE]  StackOverflowError  	14	1	replace
234	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  return    -1L;    	compilable	  [FE]  StackOverflowError  	14	1	replace
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
236	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
237	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
238	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
240	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
241	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
242	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	31	None	replace
243	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	31	None	replace
244	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	31	None	replace
245	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	31	None	replace
246	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	31	None	replace
247	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2,  val1)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val2,  val1)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2,  val1)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
248	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
249	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
250	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	5	None	replace
251	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
252	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	5	None	replace
253	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
254	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
255	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
256	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
257	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
258	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	7	None	replace
259	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	7	None	replace
260	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2;  val1++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val2;  val1++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2;  val1++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
261	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
262	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2,  val1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val2,  val1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2,  val1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
263	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
264	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
265	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val1;  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val1;    }    if(val1  >>  val2)  {  return  -val1;  }	  	non-compiled	[CE]  incompatible  types	48	None	add
266	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
267	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val1;    }    if(val1  ==  val2)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
269	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val1;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val1;    }    if(val1  ==  val2)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
270	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  [Delete]  val2)  {  return  -val1;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  [Delete]  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val1;    }    if(val1  [Delete]  val2)  {  return  -val1;  }	  	non-compiled	[CE]  ')'  expected	48	None	add
271	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  [BUGGY]  val2)  {  return  -val1;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  [BUGGY]  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val1;    }    if(val1  [BUGGY]  val2)  {  return  -val1;  }	  	non-compiled	[CE]  ')'  expected	48	None	add
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
273	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
274	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  [PATCH]  val2)  {  return  -val1;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  [PATCH]  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val1;    }    if(val1  [PATCH]  val2)  {  return  -val1;  }	  	non-compiled	[CE]  ')'  expected	48	None	add
275	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	3	None	replace
276	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	3	None	replace
277	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	3	None	replace
278	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	3	None	replace
279	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	3	None	replace
280	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  0;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  0;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  0;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
281	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }  [CE]  >  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    0;    }    	non-compiled	[CE]  >  expected	37	None	replace
282	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  0;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  0;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  0;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
283	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
284	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
285	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  0;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  0;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  0;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
286	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
287	[BUG]  [BUGGY]  long  val2  =  val1.doubleValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val2  =  val1.doubleValue();  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1.doubleValue();	      long    val2    =    val1.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	10	None	replace
288	[BUG]  [BUGGY]  long  val2  =  val1.longValue()  +  1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val2  =  val1.longValue()  +  1;  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1.longValue()  +  1;	      long    val2    =    val1.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	10	None	replace
289	[BUG]  [BUGGY]  long  val2  =  val1.longValue()  *  val2.longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val2  =  val1.longValue()  *  val2.longValue();  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1.longValue()  *  val2.longValue();	      long    val2    =    val1.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	10	None	replace
290	[BUG]  [BUGGY]  int  val2  =  val1.longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  int  val2  =  val1.longValue();  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  val1.longValue();	      long    val2    =    val1.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	10	None	replace
291	[BUG]  [BUGGY]  long  val2  =  val1.longValue()  +  val2.longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val2  =  val1.longValue()  +  val2.longValue();  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1.longValue()  +  val2.longValue();	      long    val2    =    val1.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	10	None	replace
292	[BUG]  [BUGGY]  long  val2  =  val2.longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val2  =  val2.longValue();  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val2.longValue();	      long    val2    =    val1.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	10	None	replace
293	[BUG]  [BUGGY]  long  val2  =  val1.longValue().longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val2  =  val1.longValue().longValue();  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1.longValue().longValue();	      long    val2    =    val1.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	10	None	replace
294	[BUG]  [BUGGY]  long  val2  =  val1.longValue()  +  2;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val2  =  val1.longValue()  +  2;  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1.longValue()  +  2;	      long    val2    =    val1.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	10	None	replace
295	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -val1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -val1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
296	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
297	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -val1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -val1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
298	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }  [CE]  >  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  >  expected	44	None	replace
299	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
300	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }  [CE]  >  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  >  expected	44	None	replace
301	[BUG]  [BUGGY]  int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }  [CE]  >  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  >  expected	44	None	replace
302	[BUG]  [BUGGY]  long  val2  =  safeMultiply(val1,  val2);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val2  =  safeMultiply(val1,  val2);  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  safeMultiply(val1,  val2);	      int    val2    =    safeMultiply(val1,    val2);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	32	None	replace
303	[BUG]  [BUGGY]  int  val2  =  safeMultiply(val2,  val1);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  int  val2  =  safeMultiply(val2,  val1);  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  safeMultiply(val2,  val1);	      int    val2    =    safeMultiply(val1,    val2);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	32	None	replace
304	[BUG]  [BUGGY]  int  val2  =  safeMultiply(val1,  val2)-  1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  int  val2  =  safeMultiply(val1,  val2)-  1;  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  safeMultiply(val1,  val2)-  1;	      int    val2    =    safeMultiply(val1,    val2);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	32	None	replace
305	[BUG]  [BUGGY]  int  val2  =  safeMultiply(val1,  val2,  val1);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  int  val2  =  safeMultiply(val1,  val2,  val1);  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  safeMultiply(val1,  val2,  val1);	      int    val2    =    safeMultiply(val1,    val2);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	32	None	replace
306	[BUG]  [BUGGY]  boolean  val2  =  safeMultiply(val1,  val2);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  boolean  val2  =  safeMultiply(val1,  val2);  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	boolean  val2  =  safeMultiply(val1,  val2);	      int    val2    =    safeMultiply(val1,    val2);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	32	None	replace
307	[BUG]  [BUGGY]  int  val2  =  safeMultiply(val1,  val2)+  1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  int  val2  =  safeMultiply(val1,  val2)+  1;  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  safeMultiply(val1,  val2)+  1;	      int    val2    =    safeMultiply(val1,    val2);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	32	None	replace
308	[BUG]  [BUGGY]  val2  =  safeMultiply(val1,  val2);  [CE]  possible  loss  of  precision  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  val2  =  safeMultiply(val1,  val2);  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	val2  =  safeMultiply(val1,  val2);	      int    val2    =    safeMultiply(val1,    val2);    	non-compiled	[CE]  possible  loss  of  precision	32	None	replace
309	[BUG]  [BUGGY]  double  val2  =  safeMultiply(val1,  val2);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  double  val2  =  safeMultiply(val1,  val2);  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	double  val2  =  safeMultiply(val1,  val2);	      int    val2    =    safeMultiply(val1,    val2);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	32	None	replace
310	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
311	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
312	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
313	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
314	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
315	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	2	None	replace
316	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
317	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
318	[BUG]  [BUGGY]  while(val1  <  val2)  {  if(val2  >  val1)  {  return  -1;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  <  val2)  {  if(val2  >  val1)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  if(val2  >  val1)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
319	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=  val2)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	55	1	replace
320	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=  val2)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	55	1	replace
321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  0L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >  val2)  {  return  0L;  }	  if(val1    >    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	55	1	replace
322	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  0L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >  val2)  {  return  0L;  }	  if(val1    >    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	55	1	replace
323	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	17	1	add
324	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	17	1	add
325	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	17	1	add
326	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	17	1	add
327	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	17	1	add
328	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	17	1	add
329	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  incompatible  types  [FE]          StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >>  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  incompatible  types	17	None	add
330	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  <identifier>  expected  [FE]            StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  <identifier>  expected	17	None	add
331	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	17	1	add
332	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	17	1	add
333	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	17	1	add
334	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	17	1	add
335	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	17	1	add
336	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	17	1	add
337	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	while(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  ArithmeticException  	40	1	replace
338	[BUG]  [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  ArithmeticException  	40	1	replace
339	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  throw  new  ArithmeticException( " ");  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	throw  new  ArithmeticException( " ");	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  ArithmeticException  	40	1	replace
340	[BUG]  [BUGGY]  throw  new  ArithmeticException( " ");  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  throw  new  ArithmeticException( " ");  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	throw  new  ArithmeticException( " ");	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  ArithmeticException  	40	1	replace
341	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	while(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	40	1	replace
342	[BUG]  [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	40	1	replace
343	[BUG]  [BUGGY]  tryFallThrough(val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]          ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  tryFallThrough(val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	tryFallThrough(val1)  {  throw  new  ArithmeticException( " ");  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	40	None	replace
344	[BUG]  [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( " ");  [CE]  orphaned  case  [FE]            ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( " ");  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  throw  new  ArithmeticException( " ");	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	40	None	replace
345	[BUG]  [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  [CE]  orphaned  case  [FE]              ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  >=  val2)  {  throw  new  ArithmeticException( " ");	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	40	None	replace
346	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]                ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  reason:  throw  new  ArithmeticException( " ");  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	reason:  throw  new  ArithmeticException( " ");	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  ArithmeticException  	40	1	replace
347	[BUG]  [BUGGY]  reason:  throw  new  ArithmeticException( " ");  [FE]  ArithmeticException  [FE]                ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  reason:  throw  new  ArithmeticException( " ");  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	reason:  throw  new  ArithmeticException( " ");	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  ArithmeticException  	40	1	replace
348	[BUG]  [BUGGY]  while(val1  >=  val2)  {  [CE]  orphaned  case  [FE]                  ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  >=  val2)  {  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  >=  val2)  {	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	40	None	replace
349	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  StackOverflowError  	26	1	replace
350	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  StackOverflowError  	26	1	replace
351	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	26	1	replace
352	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	26	1	replace
353	[BUG]  [BUGGY]  while(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  'else'  without  'if'  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
354	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	26	1	replace
355	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]          StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	26	1	replace
356	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	compilable	  [FE]  ArithmeticException  	43	1	replace
357	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	compilable	  [FE]  ArithmeticException  	43	1	replace
358	[BUG]  [BUGGY]  try  {  [Delete]  catch(RuntimeException  e)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  try  {  [Delete]  catch(RuntimeException  e)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	try  {  [Delete]  catch(RuntimeException  e)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
359	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	while(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	compilable	  [FE]  ArithmeticException  	43	1	replace
360	[BUG]  [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	compilable	  [FE]  ArithmeticException  	43	1	replace
361	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	compilable	  [FE]  AssertionFailedError  	43	1	replace
362	[BUG]  [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [FE]  AssertionFailedError  [FE]          ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	compilable	  [FE]  AssertionFailedError  	43	1	replace
363	[BUG]  [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  [CE]  orphaned  case  [FE]            ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	43	None	replace
364	[BUG]  [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  [CE]  orphaned  case  [FE]              ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	43	None	replace
365	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
366	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
367	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >>  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  incompatible  types	15	None	add
368	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
369	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
370	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
371	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
372	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [Delete]  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [Delete]  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  [Delete]  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  ')'  expected	15	None	add
373	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  <identifier>  expected	15	None	add
374	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [BUGGY]  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [BUGGY]  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  [BUGGY]  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  ')'  expected	15	None	add
375	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
376	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
377	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
378	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
379	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >=  val2)  {  return  -val2;  }	  if(val1    >=    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	49	1	replace
380	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -val2;  }	  if(val1    >=    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	49	1	replace
381	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >=  val2)  {  return  -1L;  }	  if(val1    >=    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	49	1	replace
382	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -1L;  }	  if(val1    >=    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	49	1	replace
383	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  ==  val2)  {  return  -val2;  }	  if(val1    >=    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	49	1	replace
384	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -val2;  }	  if(val1    >=    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	49	1	replace
385	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val2  >=  val1)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val2  >=  val1)  {  return  -val1;  }	  if(val1    >=    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	49	1	replace
386	[BUG]  [BUGGY]  if(val2  >=  val1)  {  return  -val1;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val2  >=  val1)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val2  >=  val1)  {  return  -val1;  }	  if(val1    >=    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	49	1	replace
387	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  long  val1  =  val2)?  -1  :  -val1;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  long  val1  =  val2)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    long  val1  =  val2)?  -1  :  -val1;	  	non-compiled	[CE]  ';'  expected	56	None	add
388	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  if(val1  >=  val2)?  -1  :  -val1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  if(val1  >=  val2)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    if(val1  >=  val2)?  -1  :  -val1;	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
389	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  (val1  >=  val2)?  -1  :  -val1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  (val1  >=  val2)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    (val1  >=  val2)?  -1  :  -val1;	  	non-compiled	[CE]  not  a  statement	56	None	add
390	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  return(val1  >=  val2)?  -1  :  -val1;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  return(val1  >=  val2)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    return(val1  >=  val2)?  -1  :  -val1;	  	non-compiled	[CE]  unreachable  statement	56	None	add
391	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  int  val2  =(val1  >=  val2)?  -1  :  -val1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  int  val2  =(val1  >=  val2)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    int  val2  =(val1  >=  val2)?  -1  :  -val1;	  	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	56	None	add
392	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  ||(val1  >=  val2)?  -1  :  -val1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  ||(val1  >=  val2)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    ||(val1  >=  val2)?  -1  :  -val1;	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
393	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  long  val1  =  val2;  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  long  val1  =  val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    long  val1  =  val2;	  	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	56	None	add
394	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  int  val2  =(val1  >>  val2)?  -1  :  -val1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  int  val2  =(val1  >>  val2)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    int  val2  =(val1  >>  val2)?  -1  :  -val1;	  	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	56	None	add
395	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  long  val1  =  val2  ||  val1  >=  val2)?  -1  :  -val1;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  long  val1  =  val2  ||  val1  >=  val2)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    long  val1  =  val2  ||  val1  >=  val2)?  -1  :  -val1;	  	non-compiled	[CE]  ';'  expected	56	None	add
396	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  0;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return  0;	  return    -1;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
397	[BUG]  [BUGGY]  return  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  0;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return  0;	  return    -1;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
398	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  0L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return  0L;	  return    -1;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
399	[BUG]  [BUGGY]  return  0L;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  0L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return  0L;	  return    -1;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
400	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  1L  :  -1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  >=  val2)?  1L  :  -1;	  return    -1;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
401	[BUG]  [BUGGY]  return(val1  >=  val2)?  1L  :  -1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  1L  :  -1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  1L  :  -1;	  return    -1;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
402	[BUG]  [BUGGY]  return(val1  <  =  val2)?  1L  :  -1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  <  =  val2)?  1L  :  -1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  =  val2)?  1L  :  -1;	  return    -1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
403	[BUG]  [BUGGY]  return(val1  <  =  val2)?  -1  :  -1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  <  =  val2)?  -1  :  -1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  =  val2)?  -1  :  -1;	  return    -1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
404	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
405	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
406	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
407	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
408	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
409	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
410	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  --1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  unexpected  type  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  --1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  --1;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  unexpected  type	27	None	add
411	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
412	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
413	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  If(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  If(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    If(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  ';'  expected	27	None	add
414	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1)  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1)  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1)  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
415	[BUG]  [BUGGY]  vice(val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  vice(val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	vice(val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
416	[BUG]  [BUGGY]  vice(val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  vice(val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	vice(val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
417	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
418	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
419	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
420	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
421	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1.;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1.;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1.;  }	  	non-compiled	[CE]  <identifier>  expected	46	None	add
422	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1);  }	  	non-compiled	[CE]  ';'  expected	46	None	add
423	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
424	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
425	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  <  return  -val1;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  <  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  <  return  -val1;  }	  	non-compiled	[CE]  illegal  start  of  type	46	None	add
426	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  If(val1  >  val2)  {  return  -val1;  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  If(val1  >  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val1;    }    If(val1  >  val2)  {  return  -val1;  }	  	non-compiled	[CE]  ';'  expected	46	None	add
427	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
428	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
429	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  >=  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
430	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
431	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  >  val2)?  -1  :  -val1;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
432	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >  val2)?  -1  :  -val1;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
433	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  >=  val2)?  -1  :  -1;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
434	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  -1  :  -1;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
435	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val2  >=  val1)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val2  >=  val1)?  -1  :  -val1;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
436	[BUG]  [BUGGY]  return(val2  >=  val1)?  -1  :  -val1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val2  >=  val1)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val2  >=  val1)?  -1  :  -val1;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
437	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  <  val2)?  -1  :  -val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  <  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
438	[BUG]  [BUGGY]  return(val1  <  val2)?  -1  :  -val2;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  <  val2)?  -1  :  -val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
439	[BUG]  [BUGGY]  return(val1  +  val2)?  -1  :  -val2;  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  +  val2)?  -1  :  -val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  +  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    	non-compiled	[CE]  incompatible  types	57	None	replace
440	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  <  val2)?  -1  :  -1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  <  val2)?  -1  :  -1;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
441	[BUG]  [BUGGY]  return(val1  <  val2)?  -1  :  -1;  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  <  val2)?  -1  :  -1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  val2)?  -1  :  -1;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
442	[BUG]  [BUGGY]  return(val1  >>  val2)?  -1  :  -val2;  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >>  val2)?  -1  :  -val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >>  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    	non-compiled	[CE]  incompatible  types	57	None	replace
443	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  ==  val2)?  -1  :  -val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  ==  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
444	[BUG]  [BUGGY]  return(val1  ==  val2)?  -1  :  -val2;  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  ==  val2)?  -1  :  -val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  ==  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
445	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
446	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
447	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
448	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
449	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  safeMultiply(val1,  val2);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  safeMultiply(val1,  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  safeMultiply(val1,  val2);  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	9	None	replace
450	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  safeMultiply(val2,  val1);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  safeMultiply(val2,  val1);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  safeMultiply(val2,  val1);  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	9	None	replace
451	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	9	None	replace
452	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  safeMultiply(val1,  val2);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  safeMultiply(val1,  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  safeMultiply(val1,  val2);  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	9	None	replace
453	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  safeMultiply(val1,  val2);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  safeMultiply(val1,  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  safeMultiply(val1,  val2);  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	9	None	replace
454	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  safeMultiply(val1,  val2);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  safeMultiply(val1,  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  safeMultiply(val1,  val2);  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	9	None	replace
455	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2);  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	9	None	replace
456	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2.long);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2.long);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2.long);  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
457	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	50	1	add
458	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	50	1	add
459	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    if(val1  >>  val2)  {  return  -1;  }	  	non-compiled	[CE]  incompatible  types	50	None	add
460	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	50	1	add
461	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	50	1	add
462	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	50	1	add
463	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	50	1	add
464	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  [Delete]  val2)  {  return  -1;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  [Delete]  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    if(val1  [Delete]  val2)  {  return  -1;  }	  	non-compiled	[CE]  ')'  expected	50	None	add
465	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  [BUGGY]  val2)  {  return  -1;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  [BUGGY]  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    if(val1  [BUGGY]  val2)  {  return  -1;  }	  	non-compiled	[CE]  ')'  expected	50	None	add
466	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  [PATCH]  val2)  {  return  -1;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  [PATCH]  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    if(val1  [PATCH]  val2)  {  return  -1;  }	  	non-compiled	[CE]  ')'  expected	50	None	add
467	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  [BUG]  val2)  {  return  -1;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  [BUG]  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    if(val1  [BUG]  val2)  {  return  -1;  }	  	non-compiled	[CE]  ')'  expected	50	None	add
468	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }	  	compilable	  [FE]  ArithmeticException  	42	1	add
469	[BUG]  [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }	  	compilable	  [FE]  ArithmeticException  	42	1	add
470	[BUG]  [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  [CE]  incompatible  types  [FE]      ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    if(val1  >>  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }	  	non-compiled	[CE]  incompatible  types	42	None	add
471	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1!=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }	  	compilable	  [FE]  ArithmeticException  	42	1	add
472	[BUG]  [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1!=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1!=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }	  	compilable	  [FE]  ArithmeticException  	42	1	add
473	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  StackOverflowError  	25	1	add
474	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  StackOverflowError  	25	1	add
475	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1.  val2);  }  [CE]  long  cannot  be  dereferenced  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1.  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1.  val2);  }	  	non-compiled	[CE]  long  cannot  be  dereferenced	25	None	add
476	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1);  }  [CE]  no  suitable  method  found  for  safeMultiply(long)  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1);  }	  	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long)	25	None	add
477	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >  val2)  {  return  -val2;  }	  if(val1    >    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	47	1	replace
478	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >  val2)  {  return  -val2;  }	  if(val1    >    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	47	1	replace
479	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >  val2)  {  return  -1L;  }	  if(val1    >    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	47	1	replace
480	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1L;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >  val2)  {  return  -1L;  }	  if(val1    >    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	47	1	replace
481	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val2  >=  val1)  {  return  -1;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val2  >=  val1)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val2  >=  val1)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
482	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  >=  val2)  {  return  -1;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  >=  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
483	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  >  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
484	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  <  val2)  {  return  -1;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  <  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  <  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
485	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
486	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
487	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
488	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
489	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  safeMultiply(val2,  val1);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  safeMultiply(val2,  val1);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  safeMultiply(val2,  val1);  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	9	None	replace
490	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  safeMultiply(val2,  val1);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  safeMultiply(val2,  val1);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  safeMultiply(val2,  val1);  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	9	None	replace
491	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  safeMultiply(val2,  val1);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  safeMultiply(val2,  val1);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  safeMultiply(val2,  val1);  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	9	None	replace
492	[BUG]  [BUGGY]  int  val1  =  safeMultiply(val1,  val2);  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  int  val1  =  safeMultiply(val1,  val2);  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  safeMultiply(val1,  val2);	      int    val2    =    safeMultiply(val1,    val2);    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	32	None	replace
493	[BUG]  [BUGGY]  Integer  val2  =  safeMultiply(val1,  val2);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  Integer  val2  =  safeMultiply(val1,  val2);  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	Integer  val2  =  safeMultiply(val1,  val2);	      int    val2    =    safeMultiply(val1,    val2);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	32	None	replace
494	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  {  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ')'  expected  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  {  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  {  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  ')'  expected	19	None	add
495	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1);  }  [CE]  no  suitable  method  found  for  safeMultiply(long)  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1);  }	  	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long)	19	None	add
496	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	45	None	replace
497	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  *=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  *=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  *=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
498	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1);  }  [CE]  no  suitable  method  found  for  safeMultiply(long)  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1);  }	  	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long)	29	None	add
499	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	2	None	replace
500	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
501	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	3	None	replace
502	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
503	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
504	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1);  }  [CE]  no  suitable  method  found  for  safeMultiply(long)  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1);  }	  	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long)	23	None	add
505	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	8	None	replace
506	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	8	None	replace
507	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	8	None	replace
508	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	8	None	replace
509	[BUG]  [BUGGY]  safely(val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
510	[BUG]  [BUGGY]  safely(val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
511	[BUG]  [BUGGY]  safely(val1,  val2);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1,  val2);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1,  val2);	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
512	[BUG]  [BUGGY]  safeMultiply(val1.doubleValue(),  val2.doubleValue());  [CE]  long  cannot  be  dereferenced  [FE]          StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safeMultiply(val1.doubleValue(),  val2.doubleValue());  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1.doubleValue(),  val2.doubleValue());	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  long  cannot  be  dereferenced	20	None	replace
513	[BUG]  [BUGGY]  safely(val1)  {  return  -1;  }  else  {  safeMultiply(val2);  }  [CE]  ';'  expected  [FE]            StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1)  {  return  -1;  }  else  {  safeMultiply(val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1)  {  return  -1;  }  else  {  safeMultiply(val2);  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
514	[BUG]  [BUGGY]  safely(val1)  {  return  -1;  }  [CE]  ';'  expected  [FE]              StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1)  {  return  -1;  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
515	[BUG]  [BUGGY]  safely(val1)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
516	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  int  val1  >  val2)  {  return  -val1;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  int  val1  >  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val1;    }    int  val1  >  val2)  {  return  -val1;  }	  	non-compiled	[CE]  ';'  expected	46	None	add
517	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1)  >  val2)  {  return  -val1;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1)  >  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val1;    }    if(val1)  >  val2)  {  return  -val1;  }	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
518	[BUG]  [BUGGY]  safely(val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
519	[BUG]  [BUGGY]  safely(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
520	[BUG]  [BUGGY]  safely(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
521	[BUG]  [BUGGY]  safely(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
522	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	22	1	replace
523	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	22	1	replace
524	[BUG]  [BUGGY]  safely(val1  >  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1  >  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1  >  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
525	[BUG]  [BUGGY]  safely(val1  >  val2))  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1  >  val2))  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1  >  val2))  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
526	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	40	None	replace
527	[BUG]  [BUGGY]  allowMultiply(val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]      ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  allowMultiply(val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	allowMultiply(val1)  {  throw  new  ArithmeticException( " ");  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	40	None	replace
528	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	while(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  ArithmeticException  	40	1	replace
529	[BUG]  [BUGGY]  while(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  ArithmeticException  	40	1	replace
530	[BUG]  [BUGGY]  allowMultiply(val1,  val2);  [CE]  cannot  find  symbol  [FE]          ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  allowMultiply(val1,  val2);  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	allowMultiply(val1,  val2);	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
531	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  --1;  }  [CE]  unexpected  type  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  --1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  --1;  }	  	non-compiled	[CE]  unexpected  type	52	None	add
532	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  {  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ')'  expected  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  {  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  {  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  ')'  expected	17	None	add
533	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1);  }  [CE]  no  suitable  method  found  for  safeMultiply(long)  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1);  }	  	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long)	17	None	add
534	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  int  val1  =(val1  >=  val2)?  -1  :  -val1;  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  int  val1  =(val1  >=  val2)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    int  val1  =(val1  >=  val2)?  -1  :  -val1;	  	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	56	None	add
535	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  long  val1  =  val1  +  val2)?  -1  :  -val1;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  long  val1  =  val1  +  val2)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    long  val1  =  val1  +  val2)?  -1  :  -val1;	  	non-compiled	[CE]  ';'  expected	56	None	add
536	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  long  val1  =  val1  *  val2)?  -1  :  -val1;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  long  val1  =  val1  *  val2)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    long  val1  =  val1  *  val2)?  -1  :  -val1;	  	non-compiled	[CE]  ';'  expected	56	None	add
537	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  val1  >=  val2)?  -1  :  -val1;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  val1  >=  val2)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    val1  >=  val2)?  -1  :  -val1;	  	non-compiled	[CE]  not  a  statement	56	None	add
538	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  int  val1  =(val1  >=  val2)?  -1  :  -val2;  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  int  val1  =(val1  >=  val2)?  -1  :  -val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    int  val1  =(val1  >=  val2)?  -1  :  -val2;	  	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	56	None	add
539	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  0L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  <  val2)  {  return  0L;  }	  if(val1    >=    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	51	1	replace
540	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  0L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  return  0L;  }	  if(val1    >=    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	51	1	replace
541	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  ==  val2)  {  return  -1L;  }	  if(val1    ==    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
542	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -1L;  }	  if(val1    ==    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
543	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  {  return  -1;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safeMultiply(val1,  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1,  val2)  {  return  -1;  }	  if(val1    ==    val2)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
544	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	7	None	replace
545	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
546	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
547	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -1L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  <  val2)  {  return  -1L;  }	  if(val1    >    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	55	1	replace
548	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -1L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  return  -1L;  }	  if(val1    >    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	55	1	replace
549	[BUG]  [BUGGY]  return  -1L;  if(val1  >=  val2)  {  return  -1L;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L;  if(val1  >=  val2)  {  return  -1L;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1L;    if(val1  >=  val2)  {  return  -1L;  }  else  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  unreachable  statement	13	None	add
550	[BUG]  [BUGGY]  return  -1L;  int  val2  =  safeMultiply(val1,  val2);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L;  int  val2  =  safeMultiply(val1,  val2);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1L;    int  val2  =  safeMultiply(val1,  val2);	  	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	13	None	add
551	[BUG]  [BUGGY]  return  -1L;  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L;  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1L;    if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  unreachable  statement	13	None	add
552	[BUG]  [BUGGY]  return  -1L;  if(val1  ==  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L;  if(val1  ==  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1L;    if(val1  ==  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  unreachable  statement	13	None	add
553	[BUG]  [BUGGY]  safely(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
554	[BUG]  [BUGGY]  safely(val1  <  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1  <  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1  <  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
555	[BUG]  [BUGGY]  safely(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
556	[BUG]  [BUGGY]  safely(val1  <  val2))  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]          StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1  <  val2))  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1  <  val2))  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
557	[BUG]  [BUGGY]  safely(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]            StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
558	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  >  val2)  {  return  -val2;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
559	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
560	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
561	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
562	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  return  -val2;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  return  -val2;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
563	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
564	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
565	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -1L;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -1L;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -1L;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
566	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  <  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  <  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  <  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
567	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1;    }    if(val1  <  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	50	1	add
568	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    if(val1  <  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	50	1	add
569	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
570	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	4	None	replace
571	[BUG]  [BUGGY]  long  val2  =  val1  *  val2.longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  long  val2  =  val1  *  val2.longValue();  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1  *  val2.longValue();	      long    val2    =    val1.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	10	None	replace
572	[BUG]  [BUGGY]  safely(val1  +  val2);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1  +  val2);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1  +  val2);	  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
573	[BUG]  [BUGGY]  safely(val1  >>  val2);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1  >>  val2);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1  >>  val2);	  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
574	[BUG]  [BUGGY]  aughtException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  [CE]  cannot  find  symbol  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  aughtException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	aughtException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
575	[BUG]  [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2;  }  [CE]  [FE]      ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2;  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  	43	None	replace
576	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
577	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  -1;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	34	None	replace
578	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	34	None	replace
579	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	34	None	replace
580	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -1;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	34	None	replace
581	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  --1;  }  [CE]  unexpected  type  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  --1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  --1;  }	  	non-compiled	[CE]  unexpected  type	54	None	add
582	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  If(val1  >  val2)  {  return  -1;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  If(val1  >  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    If(val1  >  val2)  {  return  -1;  }	  	non-compiled	[CE]  ';'  expected	54	None	add
583	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1)  >  val2)  {  return  -1;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1)  >  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1)  >  val2)  {  return  -1;  }	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
584	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  0;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  0;  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
585	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  0;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  0;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  0;  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
586	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  <  return  -1;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  <  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  <  return  -1;  }	  	non-compiled	[CE]  illegal  start  of  type	54	None	add
587	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  1;  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
588	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  1;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  1;  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
589	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  when(val1  >  val2)  {  return  -1;  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  when(val1  >  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    when(val1  >  val2)  {  return  -1;  }	  	non-compiled	[CE]  ';'  expected	54	None	add
590	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L  +  safeMultiply(val1,  val2);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return  -1L  +  safeMultiply(val1,  val2);	  return    -1L;    	compilable	  [FE]  StackOverflowError  	14	1	replace
591	[BUG]  [BUGGY]  return  -1L  +  safeMultiply(val1,  val2);  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L  +  safeMultiply(val1,  val2);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return  -1L  +  safeMultiply(val1,  val2);	  return    -1L;    	compilable	  [FE]  StackOverflowError  	14	1	replace
592	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L  +  1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return  -1L  +  1;	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
593	[BUG]  [BUGGY]  return  -1L  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L  +  1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return  -1L  +  1;	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
594	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L  *  val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return  -1L  *  val2;	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
595	[BUG]  [BUGGY]  return  -1L  *  val2;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L  *  val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return  -1L  *  val2;	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
596	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L  +(val1  *  val2);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return  -1L  +(val1  *  val2);	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
597	[BUG]  [BUGGY]  return  -1L  +(val1  *  val2);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L  +(val1  *  val2);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return  -1L  +(val1  *  val2);	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
598	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L  +(val1  *  val2)*  val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return  -1L  +(val1  *  val2)*  val2;	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
599	[BUG]  [BUGGY]  return  -1L  +(val1  *  val2)*  val2;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L  +(val1  *  val2)*  val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return  -1L  +(val1  *  val2)*  val2;	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
600	[BUG]  [BUGGY]  return  -1L  *  val2.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L  *  val2.doubleValue();  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return  -1L  *  val2.doubleValue();	  return    -1L;    	non-compiled	[CE]  int  cannot  be  dereferenced	14	None	replace
601	[BUG]  [BUGGY]  safely(val1  >  val2);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1  >  val2);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1  >  val2);	  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
602	[BUG]  [BUGGY]  safely(val1  >  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1  >  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1  >  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
603	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	38	None	replace
604	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	38	None	replace
605	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
606	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1);  }	  	non-compiled	[CE]  ';'  expected	48	None	add
607	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1.;  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1.;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1.;  }	  	non-compiled	[CE]  <identifier>  expected	48	None	add
608	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	31	None	replace
609	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	31	None	replace
610	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	31	None	replace
611	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	31	None	replace
612	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	41	None	replace
613	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
614	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	41	None	replace
615	[BUG]  [BUGGY]  return  -1;  int  val2  =  safeMultiply(val1,  val2);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1;  int  val2  =  safeMultiply(val1,  val2);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1;    int  val2  =  safeMultiply(val1,  val2);	  	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	11	None	add
616	[BUG]  [BUGGY]  return  -1;  if(val1  >  val2)  {  return  -1;  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1;  if(val1  >  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1;    if(val1  >  val2)  {  return  -1;  }	  	non-compiled	[CE]  unreachable  statement	11	None	add
617	[BUG]  [BUGGY]  return  -1;  int  val2  =  getValue(val1,  val2);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1;  int  val2  =  getValue(val1,  val2);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1;    int  val2  =  getValue(val1,  val2);	  	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	11	None	add
618	[BUG]  [BUGGY]  return  -1;  int  val2  =  safeMultiply(val1);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1;  int  val2  =  safeMultiply(val1);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1;    int  val2  =  safeMultiply(val1);	  	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	11	None	add
619	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  >  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
620	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
621	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  >=  val2)?  -1  :  -1L;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
622	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1L;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  -1  :  -1L;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
623	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1L  :  -val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  >=  val2)?  -1L  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
624	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1L  :  -val2;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1L  :  -val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  -1L  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
625	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  <  val2)?  -1L  :  -val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  <  val2)?  -1L  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
626	[BUG]  [BUGGY]  return(val1  <  val2)?  -1L  :  -val2;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  <  val2)?  -1L  :  -val2;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  val2)?  -1L  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
627	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  <  val2)?  -1  :  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  <  val2)?  -1  :  -1L;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
628	[BUG]  [BUGGY]  return(val1  <  val2)?  -1  :  -1L;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  <  val2)?  -1  :  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  val2)?  -1  :  -1L;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
629	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  -val1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  -val1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
630	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -val1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -val1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
631	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
632	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >=  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >=  0)  {  return  -val1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >=  0)  {  return  -val1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
633	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  0;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  0;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  0;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
634	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
635	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1);  }  [CE]  no  suitable  method  found  for  safeMultiply(long)  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1);  }	  	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long)	27	None	add
636	[BUG]  [BUGGY]  safely(val1)  {  return  -val1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1)  {  return  -val1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1)  {  return  -val1;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
637	[BUG]  [BUGGY]  safely(val1)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
638	[BUG]  [BUGGY]  safely(val1)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  safely(val1)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
639	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
640	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
641	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
642	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
643	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val1,  0,  val2);  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val1,  0,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val1,  0,  val2);  }	  	non-compiled	[CE]  unreachable  statement	54	None	add
644	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1);  case  1:  return  0L;  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1);  case  1:  return  0L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1);  case  1:  return  0L;	  	non-compiled	[CE]  orphaned  case	54	None	add
645	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  case  0L:  return  0L;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  case  0L:  return  0L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  case  0L:  return  0L;	  	non-compiled	[CE]  possible  loss  of  precision	54	None	add
646	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val1,  0,  val2);  case  0L:  return  0L;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val1,  0,  val2);  case  0L:  return  0L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val1,  0,  val2);  case  0L:  return  0L;	  	non-compiled	[CE]  orphaned  case	54	None	add
647	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val1,  0,  val2);  case  1:  return  0L;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val1,  0,  val2);  case  1:  return  0L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  System.arraycopy(val1,  0,  val1,  0,  val2);  case  1:  return  0L;	  	non-compiled	[CE]  orphaned  case	54	None	add
648	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
649	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
650	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  ==  return  -val1;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  ==  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  ==  return  -val1;  }	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
651	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1,;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1,;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1,;  }	  	non-compiled	[CE]  ';'  expected	46	None	add
652	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  safeMultiply(val1,  val2);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  safeMultiply(val1,  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  safeMultiply(val1,  val2);  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	9	None	replace
653	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
654	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
655	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
656	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	34	None	replace
657	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >>  0)  {  return  -1;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >>  0)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >>  0)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	34	None	replace
658	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  <  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  <  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  <  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
659	[BUG]  [BUGGY]  parent.replaceChild(val1,  val2);  [CE]  cannot  find  symbol  parent  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  parent.replaceChild(val1,  val2);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	parent.replaceChild(val1,  val2);	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  cannot  find  symbol  parent	20	None	replace
660	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >=  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	20	1	replace
661	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	20	1	replace
662	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >=  val2)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	20	1	replace
663	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	20	1	replace
664	[BUG]  [BUGGY]  parent.replace(val1,  val2);  [CE]  cannot  find  symbol  parent  [FE]          StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  parent.replace(val1,  val2);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	parent.replace(val1,  val2);	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  cannot  find  symbol  parent	20	None	replace
665	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	31	None	replace
666	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	31	None	replace
667	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	17	1	add
668	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	17	1	add
669	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
670	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
671	[BUG]  [BUGGY]  tryFailure(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  tryFailure(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	tryFailure(val1,  val2)  {  throw  new  ArithmeticException( " ");  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	40	None	replace
672	[BUG]  [BUGGY]  tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]      ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( " ");  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	40	None	replace
673	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	while(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	40	1	replace
674	[BUG]  [BUGGY]  while(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	40	1	replace
675	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  StackOverflowError  	18	1	replace
676	[BUG]  [BUGGY]  if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  StackOverflowError  	18	1	replace
677	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1.  val2);  }  [CE]  long  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1.  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1.  val2);  }	  	non-compiled	[CE]  long  cannot  be  dereferenced	27	None	add
678	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1.  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1.  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1.  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  <identifier>  expected	27	None	add
679	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
680	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
681	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
682	[BUG]  [BUGGY]  return(val1  +  val2)?  -1  :  -val1;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  +  val2)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  +  val2)?  -1  :  -val1;	  return(val1    >=    val2)?    -1    :    -val1;    	non-compiled	[CE]  incompatible  types	57	None	replace
683	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1L  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  >=  val2)?  -1L  :  -val1;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
684	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1L  :  -val1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1L  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  -1L  :  -val1;	  return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
685	[BUG]  [BUGGY]  if(val1  <  =  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  =  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  =  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
686	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	8	None	replace
687	[BUG]  [BUGGY]  return  -1L;  if(val1  ==  val2)  {  return  -1L;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L;  if(val1  ==  val2)  {  return  -1L;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1L;    if(val1  ==  val2)  {  return  -1L;  }  else  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  unreachable  statement	13	None	add
688	[BUG]  [BUGGY]  return  -1L;  if(val1  >  val2)  {  return  -1L;  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1L;  if(val1  >  val2)  {  return  -1L;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1L;    if(val1  >  val2)  {  return  -1L;  }	  	non-compiled	[CE]  unreachable  statement	13	None	add
689	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	30	1	replace
690	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	30	1	replace
691	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  <  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val1;    }    if(val1  <  val2)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
692	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  <  val2)  {  return  -val1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  if(val1  <  val2)  {  return  -val1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val1;    }    if(val1  <  val2)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
693	[BUG]  [BUGGY]  parent  =  parent.getParent();  [CE]  cannot  find  symbol  parent  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  parent  =  parent.getParent();  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	parent  =  parent.getParent();	  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  cannot  find  symbol  parent	24	None	replace
694	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
695	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
696	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	non-compiled	[CE]  incompatible  types	23	None	add
697	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val);  }  [CE]  cannot  find  symbol  val  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val);  }	  	non-compiled	[CE]  cannot  find  symbol  val	19	None	add
698	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	19	1	add
699	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	19	1	add
700	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	19	1	add
701	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	19	1	add
702	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
703	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
704	[BUG]  [BUGGY]  return  -1;  if(val1  <  =  val2)  {  return  -1;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1;  if(val1  <  =  val2)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1;    if(val1  <  =  val2)  {  return  -1;  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
705	[BUG]  [BUGGY]  return  -1;  if(val2  ==  val1)  {  return  -1;  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1;  if(val2  ==  val1)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1;    if(val2  ==  val1)  {  return  -1;  }	  	non-compiled	[CE]  unreachable  statement	11	None	add
706	[BUG]  [BUGGY]  return  -1;  if(val2  ==  0)  {  return  -1;  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return  -1;  if(val2  ==  0)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return    -1;    if(val2  ==  0)  {  return  -1;  }	  	non-compiled	[CE]  unreachable  statement	11	None	add
707	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  ==  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  ==  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
708	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
709	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
710	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
711	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
712	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
713	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1);  }  [CE]  no  suitable  method  found  for  safeMultiply(long)  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1);  }	  	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long)	15	None	add
714	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  long  val1  =(val1  >=  val2)?  -1  :  -val1;  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  long  val1  =(val1  >=  val2)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    long  val1  =(val1  >=  val2)?  -1  :  -val1;	  	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	56	None	add
715	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  case  0:  return(val1  >=  val2)?  -1  :  -val1;  [CE]  duplicate  case  label  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  case  0:  return(val1  >=  val2)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    case  0:  return(val1  >=  val2)?  -1  :  -val1;	  	non-compiled	[CE]  duplicate  case  label	56	None	add
716	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  for(val1  >=  val2)?  -1  :  -val1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  for(val1  >=  val2)?  -1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    for(val1  >=  val2)?  -1  :  -val1;	  	non-compiled	[CE]  not  a  statement	56	None	add
717	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  int  val2  =  -val1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  int  val2  =  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    int  val2  =  -val1;	  	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	56	None	add
718	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  return(val1  >=  val2)?  -val1  :  -val1;  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  return(val1  >=  val2)?  -val1  :  -val1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -val1;    return(val1  >=  val2)?  -val1  :  -val1;	  	non-compiled	[CE]  unreachable  statement	56	None	add
719	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  <  return  -1;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  <  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  <  return  -1;  }	  	non-compiled	[CE]  illegal  start  of  type	52	None	add
720	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2))  {  return  -1;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2))  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2))  {  return  -1;  }	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
721	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1);  }  [CE]  no  suitable  method  found  for  safeMultiply(long)  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1);  }	  	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long)	21	None	add
722	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1.  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1.  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1.  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  <identifier>  expected	21	None	add
723	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1.  val2);  }  [CE]  long  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1.  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1.  val2);  }	  	non-compiled	[CE]  long  cannot  be  dereferenced	21	None	add
724	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	26	1	replace
725	[BUG]  [BUGGY]  if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	26	1	replace
726	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	26	1	replace
727	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	26	1	replace
728	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val2  >=  val1)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val2  >=  val1)  {  return  -1;  }	  if(val1    >=    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	51	1	replace
729	[BUG]  [BUGGY]  if(val2  >=  val1)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val2  >=  val1)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val2  >=  val1)  {  return  -1;  }	  if(val1    >=    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	51	1	replace
730	[BUG]  [BUGGY]  float  val2  =  safeMultiply(val1,  val2);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  float  val2  =  safeMultiply(val1,  val2);  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	float  val2  =  safeMultiply(val1,  val2);	      int    val2    =    safeMultiply(val1,    val2);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	32	None	replace
731	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  >=  val2)?  -1L  :  -1L;	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
732	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  -1L  :  -1L;	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
733	[BUG]  [BUGGY]  return(val1  <  =  val2)?  -1L  :  -1L;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  <  =  val2)?  -1L  :  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  =  val2)?  -1L  :  -1L;	  return    -1L;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
734	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  <  val2)?  -1L  :  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  <  val2)?  -1L  :  -1L;	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
735	[BUG]  [BUGGY]  return(val1  <  val2)?  -1L  :  -1L;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  <  val2)?  -1L  :  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  val2)?  -1L  :  -1L;	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
736	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  <  0)?  -1L  :  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  <  0)?  -1L  :  -1L;	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
737	[BUG]  [BUGGY]  return(val1  <  0)?  -1L  :  -1L;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  <  0)?  -1L  :  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  0)?  -1L  :  -1L;	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
738	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  ==  val2)?  -1L  :  -1L;	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
739	[BUG]  [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  ==  val2)?  -1L  :  -1L;	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
740	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >  0)?  -1L  :  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  >  0)?  -1L  :  -1L;	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
741	[BUG]  [BUGGY]  return(val1  >  0)?  -1L  :  -1L;  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >  0)?  -1L  :  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >  0)?  -1L  :  -1L;	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
742	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  0)?  -1L  :  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  >=  0)?  -1L  :  -1L;	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
743	[BUG]  [BUGGY]  return(val1  >=  0)?  -1L  :  -1L;  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  0)?  -1L  :  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  0)?  -1L  :  -1L;	  return    -1L;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
744	[BUG]  [BUGGY]  return(val1  <  =  0)?  -1L  :  -1L;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  <  =  0)?  -1L  :  -1L;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  =  0)?  -1L  :  -1L;	  return    -1L;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
745	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  0L;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  0L;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  0L;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
746	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  0L;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  0L;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  0L;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
747	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  0L;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  0L;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  0L;  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
748	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	      for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	38	None	replace
749	[BUG]  [BUGGY]  place(val1,  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  place(val1,  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	place(val1,  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
750	[BUG]  [BUGGY]  place(val1,  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  place(val1,  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	place(val1,  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
751	[BUG]  [BUGGY]  parent.replaceChild(null,  val1);  [CE]  cannot  find  symbol  parent  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  parent.replaceChild(null,  val1);  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	parent.replaceChild(null,  val1);	  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  cannot  find  symbol  parent	28	None	replace
752	[BUG]  [BUGGY]  try  {  [Delete]  catch(RuntimeException  rex)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  try  {  [Delete]  catch(RuntimeException  rex)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	try  {  [Delete]  catch(RuntimeException  rex)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
753	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	while(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	compilable	  [FE]  AssertionFailedError  	43	1	replace
754	[BUG]  [BUGGY]  while(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [FE]  AssertionFailedError  [FE]      ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  while(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	compilable	  [FE]  AssertionFailedError  	43	1	replace
755	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	3	None	replace
756	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
757	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]    return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val1  >  val2)  {  return  -1;  }	      for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
758	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val2  >  val1)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val2  >  val1)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	55	1	replace
759	[BUG]  [BUGGY]  if(val2  >  val1)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val2  >  val1)  {  return  -1;  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val2  >  val1)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	55	1	replace
760	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1L  :  -1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  >=  val2)?  -1L  :  -1;	  return    -1;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
761	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1L  :  -1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  >=  val2)?  -1L  :  -1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  -1L  :  -1;	  return    -1;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
762	[BUG]  [BUGGY]  return(val1  <  =  val2)?  -1L  :  -1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  return(val1  <  =  val2)?  -1L  :  -1;  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  =  val2)?  -1L  :  -1;	  return    -1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
763	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	non-compiled	[CE]  incompatible  types	29	None	add
764	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
765	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:    [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]    case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
