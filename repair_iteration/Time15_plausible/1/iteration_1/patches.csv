bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(val2  ==  val1)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val2  ==  val1)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  val1)  {	  if(val1    ==    val2)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
2	[BUG]  [BUGGY]  if(val1  >  val2)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  >  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {	  if(val1    ==    val2)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
3	[BUG]  [BUGGY]  if(val1  <  =  val2)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  <  =  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  =  val2)  {	  if(val1    ==    val2)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
4	[BUG]  [BUGGY]  if(val1  ==  val2  ||  val1  ==  val2)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  ==  val2  ||  val1  ==  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2  ||  val1  ==  val2)  {	  if(val1    ==    val2)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
5	[BUG]  [BUGGY]  if(val1  >=  val2  ||  val1  ==  val2)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  >=  val2  ||  val1  ==  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2  ||  val1  ==  val2)  {	  if(val1    ==    val2)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
6	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
7	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
8	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
9	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	6	None	replace
10	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
11	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
12	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
13	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	6	None	replace
14	[BUG]  [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
15	[BUG]  [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]      ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	      if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
16	[BUG]  [BUGGY]  tryFallThrough(val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  tryFallThrough(val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFallThrough(val1)  {  throw  new  ArithmeticException( " ");  }	      if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
17	[BUG]  [BUGGY]  throw  new  ArithmeticException( " ");  [CE]  orphaned  case  [FE]          ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  throw  new  ArithmeticException( " ");  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	throw  new  ArithmeticException( " ");	      if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
18	[BUG]  [BUGGY]  allowMultiply(val1,  val2);  [CE]  orphaned  case  [FE]            ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  allowMultiply(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	allowMultiply(val1,  val2);	      if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
19	[BUG]  [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( " ");  [CE]  orphaned  case  [FE]              ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( " ");  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  throw  new  ArithmeticException( " ");	      if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
20	[BUG]  [BUGGY]  tries.put(val1,  val2);  [CE]  orphaned  case  [FE]                ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  tries.put(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tries.put(val1,  val2);	      if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
21	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	3	None	replace
22	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	3	None	replace
23	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	3	None	replace
24	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	3	None	replace
25	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	3	None	replace
26	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	3	None	replace
27	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >>  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >>  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >>  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	3	None	replace
28	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	3	None	replace
29	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	4	None	replace
30	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
31	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
32	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
33	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	4	None	replace
34	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
35	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
36	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
37	[BUG]  [BUGGY]  int  val2  =  Math.min(val2,  val1);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  Math.min(val2,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(val2,  val1);	      int    val2    =    Math.min(val1,    val2);    	non-compiled	[CE]  orphaned  case	23	None	replace
38	[BUG]  [BUGGY]  long  val2  =  Math.min(val1,  val2);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  Math.min(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  Math.min(val1,  val2);	      int    val2    =    Math.min(val1,    val2);    	non-compiled	[CE]  orphaned  case	23	None	replace
39	[BUG]  [BUGGY]  long  val2  =  Math.min(val2,  val1);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  Math.min(val2,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  Math.min(val2,  val1);	      int    val2    =    Math.min(val1,    val2);    	non-compiled	[CE]  orphaned  case	23	None	replace
40	[BUG]  [BUGGY]  int  val2  =  Math.min(value1,  val2);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  Math.min(value1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(value1,  val2);	      int    val2    =    Math.min(val1,    val2);    	non-compiled	[CE]  orphaned  case	23	None	replace
41	[BUG]  [BUGGY]  int  val2  =  Math.min(total,  val1);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  Math.min(total,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(total,  val1);	      int    val2    =    Math.min(val1,    val2);    	non-compiled	[CE]  orphaned  case	23	None	replace
42	[BUG]  [BUGGY]  int  val2  =  Math.min(0,  val1);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  Math.min(0,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(0,  val1);	      int    val2    =    Math.min(val1,    val2);    	non-compiled	[CE]  orphaned  case	23	None	replace
43	[BUG]  [BUGGY]  int  val2  =  Math.min(val1,  val2)-  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  Math.min(val1,  val2)-  1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(val1,  val2)-  1;	      int    val2    =    Math.min(val1,    val2);    	non-compiled	[CE]  orphaned  case	23	None	replace
44	[BUG]  [BUGGY]  val2  =  Math.min(val2,  val1);  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  val2  =  Math.min(val2,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	val2  =  Math.min(val2,  val1);	      int    val2    =    Math.min(val1,    val2);    	non-compiled	[CE]  orphaned  case	23	None	replace
45	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
46	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	5	None	replace
47	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	5	None	replace
48	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
49	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
50	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >>  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >>  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >>  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
51	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	5	None	replace
52	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
53	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  ==  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	19	1	add
54	[BUG]  [BUGGY]      if(val1  ==  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  ==  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	19	1	add
55	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  ==  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	19	1	add
56	[BUG]  [BUGGY]      if(val1  ==  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  ==  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	19	1	add
57	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  ==  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	19	1	add
58	[BUG]  [BUGGY]      if(val1  ==  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  ==  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	19	1	add
59	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  ==  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	19	1	add
60	[BUG]  [BUGGY]      if(val1  ==  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  ==  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	19	1	add
61	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)/  val2;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =(long)Math.floor(val1)/  val2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)/  val2;	      int    val2    =(int)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	28	None	replace
62	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  +  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  +  1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2  +  1;	      int    val2    =(int)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	28	None	replace
63	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  val2;  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  val2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)/  val2;	      int    val2    =(int)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	28	None	replace
64	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)/  val1;  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val2)/  val1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)/  val1;	      int    val2    =(int)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	28	None	replace
65	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2L;  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2L;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2L;	      int    val2    =(int)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	28	None	replace
66	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  2;  [CE]  orphaned  case  [FE]                                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1)/  2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  2;	      int    val2    =(int)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	28	None	replace
67	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2.length;  [CE]  orphaned  case  [FE]                                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2.length;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2.length;	      int    val2    =(int)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	28	None	replace
68	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2,  val1;  [CE]  orphaned  case  [FE]                                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2,  val1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2,  val1;	      int    val2    =(int)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	28	None	replace
69	[BUG]  [BUGGY]  if(val2  <  val1)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val2  <  val1)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  <  val1)  {	  if(val1    <    val2)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
70	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  >  val2)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  <  val2  ||  val1  >  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  >  val2)  {	  if(val1    <    val2)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
71	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  >=  val2)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  <  val2  ||  val1  >=  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  >=  val2)  {	  if(val1    <    val2)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
72	[BUG]  [BUGGY]  while(val1  <  val2)  {  [CE]  orphaned  case  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  while(val1  <  val2)  {  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	30	None	replace
73	[BUG]  [BUGGY]  long  val2  =  getValue(val1,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  getValue(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1,  val2);	      int    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	27	None	replace
74	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)-  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val1,  val2)-  1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)-  1;	      int    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	27	None	replace
75	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)+  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val1,  val2)+  1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)+  1;	      int    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	27	None	replace
76	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)/  2;  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val1,  val2)/  2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)/  2;	      int    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	27	None	replace
77	[BUG]  [BUGGY]  int  val2  =  getValue(val2,  val1);  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val2,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2,  val1);	      int    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	27	None	replace
78	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)-  2;  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val1,  val2)-  2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)-  2;	      int    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	27	None	replace
79	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val1);  [CE]  orphaned  case  [FE]                                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val1,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val1);	      int    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	27	None	replace
80	[BUG]  [BUGGY]  boolean  val2  =  getValue(val1,  val2);  [CE]  orphaned  case  [FE]                                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  boolean  val2  =  getValue(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  getValue(val1,  val2);	      int    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	27	None	replace
81	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        safeMultiply(val1,    val2);    safeMultiply(val1,  val2);	  	compilable	  [FE]  StackOverflowError  	1	1	add
82	[BUG]  [BUGGY]      safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        safeMultiply(val1,    val2);    safeMultiply(val1,  val2);	  	compilable	  [FE]  StackOverflowError  	1	1	add
83	[BUG]  [BUGGY]      safeMultiply(val1,  val2);  SafeMultiplication.safeMultiply(val1,  val2);  [CE]  cannot  find  symbol  SafeMultiplication  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  SafeMultiplication.safeMultiply(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        safeMultiply(val1,    val2);    SafeMultiplication.safeMultiply(val1,  val2);	  	non-compiled	[CE]  cannot  find  symbol  SafeMultiplication	1	None	add
84	[BUG]  [BUGGY]      safeMultiply(val1,  val2);  SafeMultiply(val1,  val2);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  SafeMultiply(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        safeMultiply(val1,    val2);    SafeMultiply(val1,  val2);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
85	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        safeMultiply(val1,    val2);    safeMultiply(val2,  val1);	  	compilable	  [FE]  StackOverflowError  	1	1	add
86	[BUG]  [BUGGY]      safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        safeMultiply(val1,    val2);    safeMultiply(val2,  val1);	  	compilable	  [FE]  StackOverflowError  	1	1	add
87	[BUG]  [BUGGY]      safeMultiply(val1,  val2);  secureMultiply(val1,  val2);  [CE]  cannot  find  symbol  [FE]            StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  secureMultiply(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        safeMultiply(val1,    val2);    secureMultiply(val1,  val2);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
88	[BUG]  [BUGGY]      safeMultiply(val1,  val2);  safelyMultiply(val1,  val2);  [CE]  cannot  find  symbol  [FE]              StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  safelyMultiply(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        safeMultiply(val1,    val2);    safelyMultiply(val1,  val2);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
89	[BUG]  [BUGGY]      safeMultiply(val1,  val2);  cleanMultiply(val1,  val2);  [CE]  cannot  find  symbol  [FE]                StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  cleanMultiply(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        safeMultiply(val1,    val2);    cleanMultiply(val1,  val2);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
90	[BUG]  [BUGGY]      safeMultiply(val1,  val2);  SafeMultiplication(val1,  val2);  [CE]  cannot  find  symbol  [FE]                  StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  SafeMultiplication(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        safeMultiply(val1,    val2);    SafeMultiplication(val1,  val2);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
91	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  safeMultiply(val1,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        safeMultiply(val1,    val2);    safeMultiply(val1,  val1);	  	compilable	  [FE]  StackOverflowError  	1	1	add
92	[BUG]  [BUGGY]      safeMultiply(val1,  val2);  safeMultiply(val1,  val1);  [FE]  StackOverflowError  [FE]                    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  safeMultiply(val1,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        safeMultiply(val1,    val2);    safeMultiply(val1,  val1);	  	compilable	  [FE]  StackOverflowError  	1	1	add
93	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	10	None	replace
94	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	10	None	replace
95	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	10	None	replace
96	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	10	None	replace
97	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	10	None	replace
98	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  +  1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  +  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  +  1)  {  safeMultiply(val1,  val2);  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    	non-compiled	[CE]  not  a  statement	10	None	replace
99	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]                                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	10	None	replace
100	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1,  val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =(long)Math.floor(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1,  val2);	      int    val2    =(int)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	25	None	replace
101	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-  1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)-  1;	      int    val2    =(int)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	25	None	replace
102	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  float  val2  =(float)Math.floor(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1,  val2);	      int    val2    =(int)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	25	None	replace
103	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  2;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)/  2;	      int    val2    =(int)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	25	None	replace
104	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)+  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)+  1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)+  1;	      int    val2    =(int)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	25	None	replace
105	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2,  val1);  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val2,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2,  val1);	      int    val2    =(int)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	25	None	replace
106	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1,  val2);  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  double  val2  =(double)Math.floor(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1,  val2);	      int    val2    =(int)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	25	None	replace
107	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-  2;  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-  2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)-  2;	      int    val2    =(int)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	25	None	replace
108	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  val2;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  return  val2;  }	      if(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
109	[BUG]  [BUGGY]  ||(val1  >=  val2)&&(val2!=  val1))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  ||(val1  >=  val2)&&(val2!=  val1))  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1  >=  val2)&&(val2!=  val1))  {  return  val2;  }	      if(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
110	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  val2;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1!=  val2)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1!=  val2)  {  return  val2;  }	      if(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
111	[BUG]  [BUGGY]  ||(val1  >=  val2)&&(val2  ==  val1))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  ||(val1  >=  val2)&&(val2  ==  val1))  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1  >=  val2)&&(val2  ==  val1))  {  return  val2;  }	      if(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
112	[BUG]  [BUGGY]  if(val1  <  =  val2)  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  <  =  val2)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  =  val2)  {  return  val2;  }	      if(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
113	[BUG]  [BUGGY]  while(val1  >=  val2)  {  return  val2;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  while(val1  >=  val2)  {  return  val2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  >=  val2)  {  return  val2;	      if(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
114	[BUG]  [BUGGY]  int  val2  =  val1  *  val2;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  val1  *  val2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1  *  val2;	      long    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	31	None	replace
115	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +  1;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1  *  val2  +  1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +  1;	      long    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	31	None	replace
116	[BUG]  [BUGGY]  long  val2  =  val1,  val2;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1,  val2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2;	      long    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	31	None	replace
117	[BUG]  [BUGGY]  long  val2  =  val1.longValue()  *  val2;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1.longValue()  *  val2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.longValue()  *  val2;	      long    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	31	None	replace
118	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +  1L;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1  *  val2  +  1L;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +  1L;	      long    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	31	None	replace
119	[BUG]  [BUGGY]  long  val2  =  val1.length  *  val2;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1.length  *  val2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length  *  val2;	      long    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	31	None	replace
120	[BUG]  [BUGGY]  long  val2  =  val1  +  val2;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1  +  val2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  +  val2;	      long    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	31	None	replace
121	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +  2;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1  *  val2  +  2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +  2;	      long    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	31	None	replace
122	[BUG]  [BUGGY]  switch(val2,  val1)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  switch(val2,  val1)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val2,  val1)  {	  switch(val1,    val2)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
123	[BUG]  [BUGGY]  switch(val1,  val1)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  switch(val1,  val1)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val1)  {	  switch(val1,    val2)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
124	[BUG]  [BUGGY]  switch(val1,  val2,  0)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  switch(val1,  val2,  0)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2,  0)  {	  switch(val1,    val2)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
125	[BUG]  [BUGGY]  switch(val1,  val2,  val1)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  switch(val1,  val2,  val1)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2,  val1)  {	  switch(val1,    val2)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
126	[BUG]  [BUGGY]  switch(val1,  int  val2)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  switch(val1,  int  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  int  val2)  {	  switch(val1,    val2)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
127	[BUG]  [BUGGY]  switch(val1,  val2,  false)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  switch(val1,  val2,  false)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2,  false)  {	  switch(val1,    val2)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
128	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	8	None	replace
129	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	8	None	replace
130	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	8	None	replace
131	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  +=  1)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  +=  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  +=  1)  {  safeMultiply(val1,  val2);  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	8	None	replace
132	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)-  1;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)-  1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  getValue(val2)-  1;	      int    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	24	None	replace
133	[BUG]  [BUGGY]  long  val2  =  getValue(val1)-  getValue(val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  getValue(val1)-  getValue(val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1)-  getValue(val2);	      int    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	24	None	replace
134	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  getValue(val2);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val1)/  getValue(val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  getValue(val2);	      int    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	24	None	replace
135	[BUG]  [BUGGY]  int  val2  =  getValue(val2)-  getValue(val1);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val2)-  getValue(val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)-  getValue(val1);	      int    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	24	None	replace
136	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)-  getValue(val2);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val1,  val2)-  getValue(val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)-  getValue(val2);	      int    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	24	None	replace
137	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2,  val1);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  getValue(val2,  val1);	      int    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	24	None	replace
138	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)+  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)+  1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  getValue(val2)+  1;	      int    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	24	None	replace
139	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  getValue(val1,  val2);  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val1)-  getValue(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  getValue(val1,  val2);	      int    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	24	None	replace
140	[BUG]  [BUGGY]  Switch(val1,  val2,  val1)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  Switch(val1,  val2,  val1)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  val1)  {	  Switch(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
141	[BUG]  [BUGGY]  Switch(val1,  val2,  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  Switch(val1,  val2,  0)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  0)  {	  Switch(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
142	[BUG]  [BUGGY]  SafeMultiply(val1,  val2)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  SafeMultiply(val1,  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply(val1,  val2)  {	  Switch(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
143	[BUG]  [BUGGY]  SafeMutator.safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  SafeMutator.safeMultiply(val1,  val2);  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeMultiply(val1,  val2);	  Switch(val1,    val2)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
144	[BUG]  [BUGGY]  Switch(val1,  val2,  false)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  Switch(val1,  val2,  false)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  false)  {	  Switch(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
145	[BUG]  [BUGGY]  Switch(val2,  val1)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  Switch(val2,  val1)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val2,  val1)  {	  Switch(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
146	[BUG]  [BUGGY]  Switch(val1,  val2,  val2)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  Switch(val1,  val2,  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  val2)  {	  Switch(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
147	[BUG]  [BUGGY]  SafeMutator.safeMultiply(val1,  val2)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  SafeMutator.safeMultiply(val1,  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeMultiply(val1,  val2)  {	  Switch(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
148	[BUG]  [BUGGY]  int  val2  =  val1.longValue();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  val1.longValue();  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1.longValue();	      long    val2    =    val1.longValue();    	non-compiled	[CE]  orphaned  case	9	None	replace
149	[BUG]  [BUGGY]  long  val2  =  val1.doubleValue();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1.doubleValue();  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.doubleValue();	      long    val2    =    val1.longValue();    	non-compiled	[CE]  orphaned  case	9	None	replace
150	[BUG]  [BUGGY]  long  val2  =  val1.longValue()  *  val2.longValue();  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1.longValue()  *  val2.longValue();  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.longValue()  *  val2.longValue();	      long    val2    =    val1.longValue();    	non-compiled	[CE]  orphaned  case	9	None	replace
151	[BUG]  [BUGGY]  long  val2  =  val1.longValue()  +  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1.longValue()  +  1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.longValue()  +  1;	      long    val2    =    val1.longValue();    	non-compiled	[CE]  orphaned  case	9	None	replace
152	[BUG]  [BUGGY]  long  val2  =  val1.longValue()  +  val2.longValue();  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1.longValue()  +  val2.longValue();  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.longValue()  +  val2.longValue();	      long    val2    =    val1.longValue();    	non-compiled	[CE]  orphaned  case	9	None	replace
153	[BUG]  [BUGGY]  long  val2  =  val2.longValue();  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val2.longValue();  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val2.longValue();	      long    val2    =    val1.longValue();    	non-compiled	[CE]  orphaned  case	9	None	replace
154	[BUG]  [BUGGY]  long  val2  =  val1.length();  [CE]  orphaned  case  [FE]                                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1.length();  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length();	      long    val2    =    val1.longValue();    	non-compiled	[CE]  orphaned  case	9	None	replace
155	[BUG]  [BUGGY]  long  val2  =  val1.longValue().longValue();  [CE]  orphaned  case  [FE]                                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1.longValue().longValue();  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.longValue().longValue();	      long    val2    =    val1.longValue();    	non-compiled	[CE]  orphaned  case	9	None	replace
156	[BUG]  [BUGGY]  if(val1  ==  0  ||  val2  ==  0)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  ==  0  ||  val2  ==  0)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  0  ||  val2  ==  0)  {	  if(val2    ==    0)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
157	[BUG]  [BUGGY]  if(val1  ==  0)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  ==  0)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  0)  {	  if(val2    ==    0)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
158	[BUG]  [BUGGY]  if(val1  ==  val2  ||  val2  ==  0)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  ==  val2  ||  val2  ==  0)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2  ||  val2  ==  0)  {	  if(val2    ==    0)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
159	[BUG]  [BUGGY]  if(val1  ==  0L)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  ==  0L)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  0L)  {	  if(val2    ==    0)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
160	[BUG]  [BUGGY]  if(val1  ==  val2  ||  val1  ==  val1)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  ==  val2  ||  val1  ==  val1)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2  ||  val1  ==  val1)  {	  if(val2    ==    0)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
161	[BUG]  [BUGGY]  switch(val1  +  val2)  {  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  switch(val1  +  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1  +  val2)  {	  switch(val1)    {    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
162	[BUG]  [BUGGY]  switch(val1  <  val2)  {  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  switch(val1  <  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1  <  val2)  {	  switch(val1)    {    	non-compiled	[CE]  incompatible  types	12	None	replace
163	[BUG]  [BUGGY]  switch(val1  <  =  val2)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  switch(val1  <  =  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1  <  =  val2)  {	  switch(val1)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
164	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1);  [CE]  orphaned  case  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  safeMultiply(val1,  val2,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1);	      safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	2	None	replace
165	[BUG]  [BUGGY]  safeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  safeMultiply(val2,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val1);	      safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	2	None	replace
166	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val2);  [CE]  orphaned  case  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  safeMultiply(val1,  val2,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val2);	      safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	2	None	replace
167	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val3);  [CE]  orphaned  case  [FE]          StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  safeMultiply(val1,  val2,  val3);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val3);	      safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	2	None	replace
168	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  false);  [CE]  orphaned  case  [FE]            StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  safeMultiply(val1,  val2,  false);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  false);	      safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	2	None	replace
169	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  0);  [CE]  orphaned  case  [FE]              StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  safeMultiply(val1,  val2,  0);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  0);	      safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	2	None	replace
170	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	29	1	add
171	[BUG]  [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	29	1	add
172	[BUG]  [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  [CE]  incompatible  types  [FE]      ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }	  	non-compiled	[CE]  incompatible  types	29	None	add
173	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	29	1	add
174	[BUG]  [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	29	1	add
175	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	29	1	add
176	[BUG]  [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	29	1	add
177	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	11	None	replace
178	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	11	None	replace
179	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	11	None	replace
180	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	11	None	replace
181	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	11	None	replace
182	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	11	None	replace
183	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	11	None	replace
184	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	11	None	replace
185	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val1)-  1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  1;	      int    val2    =    getValue(val1);    	non-compiled	[CE]  orphaned  case	26	None	replace
186	[BUG]  [BUGGY]  long  val2  =  getValue(val1);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  getValue(val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1);	      int    val2    =    getValue(val1);    	non-compiled	[CE]  orphaned  case	26	None	replace
187	[BUG]  [BUGGY]  int  val2  =  getValue(val1)+  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val1)+  1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)+  1;	      int    val2    =    getValue(val1);    	non-compiled	[CE]  orphaned  case	26	None	replace
188	[BUG]  [BUGGY]  int  val2  =  getValue(val2);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2);	      int    val2    =    getValue(val1);    	non-compiled	[CE]  orphaned  case	26	None	replace
189	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  2;  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val1)/  2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  2;	      int    val2    =    getValue(val1);    	non-compiled	[CE]  orphaned  case	26	None	replace
190	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  2;  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val1)-  2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  2;	      int    val2    =    getValue(val1);    	non-compiled	[CE]  orphaned  case	26	None	replace
191	[BUG]  [BUGGY]  int  val2  =  getValue(val1)+  2;  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val1)+  2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)+  2;	      int    val2    =    getValue(val1);    	non-compiled	[CE]  orphaned  case	26	None	replace
192	[BUG]  [BUGGY]  if(val2!=  val1)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val2!=  val1)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2!=  val1)  {	  if(val1!=    val2)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
193	[BUG]  [BUGGY]  if(val1  >=  val2  ||  val1  >=  val2)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  >=  val2  ||  val1  >=  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2  ||  val1  >=  val2)  {	  if(val1!=    val2)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
194	[BUG]  [BUGGY]  if(val1  >=  val2  ||  val1!=  val2)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  >=  val2  ||  val1!=  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2  ||  val1!=  val2)  {	  if(val1!=    val2)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
195	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
196	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	7	None	replace
197	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	7	None	replace
198	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
199	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	7	None	replace
200	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
201	[BUG]  [BUGGY]  for(int  val2  =  1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	32	1	add
203	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	32	1	add
204	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    val2;    }    if(val1  >>  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	32	None	add
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	32	1	add
206	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	32	1	add
207	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	32	1	add
208	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	32	1	add
209	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val1  [Delete]  val2)  {  return  val2;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val1  [Delete]  val2)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    val2;    }    if(val1  [Delete]  val2)  {  return  val2;  }	  	non-compiled	[CE]  ')'  expected	32	None	add
210	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val1  [BUGGY]  val2)  {  return  val2;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val1  [BUGGY]  val2)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    val2;    }    if(val1  [BUGGY]  val2)  {  return  val2;  }	  	non-compiled	[CE]  ')'  expected	32	None	add
211	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	32	1	add
212	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	32	1	add
213	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  If(val1  >=  val2)  {  return  val2;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  If(val1  >=  val2)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    val2;    }    If(val1  >=  val2)  {  return  val2;  }	  	non-compiled	[CE]  ';'  expected	32	None	add
214	[BUG]  [BUGGY]  Switch(val2)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  Switch(val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val2)  {	  Switch(val1)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
215	[BUG]  [BUGGY]  SafeMultiply(val1)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  SafeMultiply(val1)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply(val1)  {	  Switch(val1)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
216	[BUG]  [BUGGY]  SafeMutator.safeMultiply(val1);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  SafeMutator.safeMultiply(val1);  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeMultiply(val1);	  Switch(val1)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
217	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =(long)Math.floor(val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1);	      int    val2    =(int)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	21	None	replace
218	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)-  1;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1)-  1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)-  1;	      int    val2    =(int)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	21	None	replace
219	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2);	      int    val2    =(int)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	21	None	replace
220	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)+  1;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1)+  1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)+  1;	      int    val2    =(int)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	21	None	replace
221	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  float  val2  =(float)Math.floor(val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1);	      int    val2    =(int)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	21	None	replace
222	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  0;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  >=  val2)  {  return  0;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  return  0;  }	      if(val1    >=    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
223	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  0;  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  ==  val2)  {  return  0;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  return  0;  }	      if(val1    >=    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
224	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  0L;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  return  0L;  }	      if(val1    >=    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
225	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  0;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1!=  val2)  {  return  0;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1!=  val2)  {  return  0;  }	      if(val1    >=    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
226	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  0;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  <  val2)  {  return  0;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  return  0;  }	      if(val1    >=    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
227	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  0L;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1!=  val2)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1!=  val2)  {  return  0L;  }	      if(val1    >=    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
228	[BUG]  [BUGGY]  if(val2  >=  val1)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val2  >=  val1)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1)  {	  if(val1    >=    val2)    {    	non-compiled	[CE]  orphaned  case	16	None	replace
229	[BUG]  [BUGGY]  if(val1  >>  val2)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  >>  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >>  val2)  {	  if(val1    >=    val2)    {    	non-compiled	[CE]  orphaned  case	16	None	replace
230	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)-(long)Math.floor(val2);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =(long)Math.floor(val1)-(long)Math.floor(val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)-(long)Math.floor(val2);	      int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	22	None	replace
231	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/(int)Math.floor(val2);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1)/(int)Math.floor(val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/(int)Math.floor(val2);	      int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	22	None	replace
232	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)-(float)Math.floor(val2);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  float  val2  =(float)Math.floor(val1)-(float)Math.floor(val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)-(float)Math.floor(val2);	      int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	22	None	replace
233	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2)-  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2)-  1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2)-  1;	      int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	22	None	replace
234	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)-(int)Math.floor(val1);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val2)-(int)Math.floor(val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)-(int)Math.floor(val1);	      int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	22	None	replace
235	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-(int)Math.floor(val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-(int)Math.floor(val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)-(int)Math.floor(val2);	      int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	22	None	replace
236	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1)-(double)Math.floor(val2);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  double  val2  =(double)Math.floor(val1)-(double)Math.floor(val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1)-(double)Math.floor(val2);	      int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	22	None	replace
237	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2,  val1);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2,  val1);	      int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	22	None	replace
238	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
239	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
240	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    0L;    }    if(val1  >>  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	34	None	add
241	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
242	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
243	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
244	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
245	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1  [Delete]  val2)  {  return  0L;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1  [Delete]  val2)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    0L;    }    if(val1  [Delete]  val2)  {  return  0L;  }	  	non-compiled	[CE]  ')'  expected	34	None	add
246	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1  [BUGGY]  val2)  {  return  0L;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1  [BUGGY]  val2)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    0L;    }    if(val1  [BUGGY]  val2)  {  return  0L;  }	  	non-compiled	[CE]  ')'  expected	34	None	add
247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
248	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
249	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1  [PATCH]  val2)  {  return  0L;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1  [PATCH]  val2)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    0L;    }    if(val1  [PATCH]  val2)  {  return  0L;  }	  	non-compiled	[CE]  ')'  expected	34	None	add
250	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  val2;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val1)-  val2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  val2;	      int    val2    =    getValue(val1);    	non-compiled	[CE]  orphaned  case	26	None	replace
251	[BUG]  [BUGGY]  if(val1  ==  val2  ||  val1  ==  0)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  ==  val2  ||  val1  ==  0)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2  ||  val1  ==  0)  {	  if(val2    ==    0)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
252	[BUG]  [BUGGY]  if(val1  ==  val2  ||  val1  >=  val2)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  ==  val2  ||  val1  >=  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2  ||  val1  >=  val2)  {	  if(val2    ==    0)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
253	[BUG]  [BUGGY]  if(val1  [Delete]  val2)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  [Delete]  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  [Delete]  val2)  {	  if(val1    >=    val2)    {    	non-compiled	[CE]  ')'  expected	16	None	replace
254	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  ==  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	19	1	add
255	[BUG]  [BUGGY]      if(val1  ==  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  ==  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	19	1	add
256	[BUG]  [BUGGY]      if(val1  ==  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  {  val2)  {  throw  new  ArithmeticException( "   ");  }  [CE]  [FE]      ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  ==  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  {  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  {  val2)  {  throw  new  ArithmeticException( "   ");  }	  	non-compiled	[CE]  	19	None	add
257	[BUG]  [BUGGY]  SafeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  SafeMultiply(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply(val1,  val2);	      safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	2	None	replace
258	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1).reset();  [CE]  orphaned  case  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  safeMultiply(val1,  val2,  val1).reset();  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1).reset();	      safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	2	None	replace
259	[BUG]  [BUGGY]  safeMultiply(val1,  val1);  [CE]  orphaned  case  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  safeMultiply(val1,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val1);	      safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	2	None	replace
260	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2,  val2);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2,  val2);	      int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	22	None	replace
261	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2)+  1;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2)+  1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2)+  1;	      int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	22	None	replace
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
263	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
264	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  If(val1  >=  val2)  {  return  0L;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  0L;  }  If(val1  >=  val2)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    0L;    }    If(val1  >=  val2)  {  return  0L;  }	  	non-compiled	[CE]  ';'  expected	34	None	add
265	[BUG]  [BUGGY]  int  val2  =  getValue(value1,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(value1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(value1,  val2);	      int    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	27	None	replace
266	[BUG]  [BUGGY]  switch(val1  -  val2)  {  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  switch(val1  -  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1  -  val2)  {	  switch(val1)    {    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
267	[BUG]  [BUGGY]  switch(val1  /  val2)  {  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  switch(val1  /  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1  /  val2)  {	  switch(val1)    {    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
268	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	3	None	replace
269	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	3	None	replace
270	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	3	None	replace
271	[BUG]  [BUGGY]  for(long  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(long  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	3	None	replace
272	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	8	None	replace
273	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	8	None	replace
274	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  +=  val1)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  +=  val1)  {  safeMultiply(val1,  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  +=  val1)  {  safeMultiply(val1,  val2);  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	8	None	replace
275	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	8	None	replace
276	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	8	None	replace
277	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  0L;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  >  val2)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  return  0L;  }	      if(val1    >=    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
278	[BUG]  [BUGGY]  if(val2  >=  val1)  {  return  0L;  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1)  {  return  0L;  }	      if(val1    >=    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
279	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	10	None	replace
280	[BUG]  [BUGGY]  long  val2  =  val1  *  val2.longValue();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1  *  val2.longValue();  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2.longValue();	      long    val2    =    val1.longValue();    	non-compiled	[CE]  orphaned  case	9	None	replace
281	[BUG]  [BUGGY]  Switch(val1  ==  val2)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  Switch(val1  ==  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1  ==  val2)  {	  Switch(val1)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
282	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	29	1	add
283	[BUG]  [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	29	1	add
284	[BUG]  [BUGGY]  int  val2  =  Math.min(val1,  val2)+  1;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  Math.min(val1,  val2)+  1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(val1,  val2)+  1;	      int    val2    =    Math.min(val1,    val2);    	non-compiled	[CE]  orphaned  case	23	None	replace
285	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-  3;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-  3;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)-  3;	      int    val2    =(int)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	25	None	replace
286	[BUG]  [BUGGY]  switch(val1  *  val2)  {  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  switch(val1  *  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1  *  val2)  {	  switch(val1,    val2)    {    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
287	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2,  val2);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  getValue(val2,  val2);	      int    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	24	None	replace
288	[BUG]  [BUGGY]      safeMultiply(val1,  val2);  SafeMutils.safeMultiply(val1,  val2);  [CE]  cannot  find  symbol  SafeMutils  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  SafeMutils.safeMultiply(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        safeMultiply(val1,    val2);    SafeMutils.safeMultiply(val1,  val2);	  	non-compiled	[CE]  cannot  find  symbol  SafeMutils	1	None	add
289	[BUG]  [BUGGY]      safeMultiply(val1,  val2);  SafeMutator.safeMultiply(val1,  val2);  [CE]  cannot  find  symbol  SafeMutator  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  SafeMutator.safeMultiply(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        safeMultiply(val1,    val2);    SafeMutator.safeMultiply(val1,  val2);	  	non-compiled	[CE]  cannot  find  symbol  SafeMutator	1	None	add
290	[BUG]  [BUGGY]  for(int  val2  =  0;  val!=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val!=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val!=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	11	None	replace
291	[BUG]  [BUGGY]  for(int  val2  =  0;  val  >=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val  >=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  >=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	11	None	replace
292	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	11	None	replace
293	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	30	None	replace
294	[BUG]  [BUGGY]  allowMultiply(val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]      ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  allowMultiply(val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	allowMultiply(val1)  {  throw  new  ArithmeticException( " ");  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	30	None	replace
295	[BUG]  [BUGGY]  allowMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  allowMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	allowMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	30	None	replace
296	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  [CE]  ';'  expected  [FE]          ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  safeMultiply(val1,  val2)  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  ';'  expected	30	None	replace
297	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  val2;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  <  val2)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  return  val2;  }	      if(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
298	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  val2;  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  >  val2)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  return  val2;  }	      if(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
299	[BUG]  [BUGGY]  while(val1  <  val2)  {  return  val2;  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  while(val1  <  val2)  {  return  val2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  return  val2;	      if(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
300	[BUG]  [BUGGY]  return  val2;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  return  val2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	return  val2;	      if(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
301	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	5	None	replace
302	[BUG]  [BUGGY]  For(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  For(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	For(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	5	None	replace
303	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
304	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	5	None	replace
305	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.pow(10,  val2);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.pow(10,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(int)Math.pow(10,  val2);	      long    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	31	None	replace
306	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.rint((  int)val1);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.rint((  int)val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(int)Math.rint((  int)val1);	      long    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	31	None	replace
307	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.floor(val2);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.floor(val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(int)Math.floor(val2);	      long    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	31	None	replace
308	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	32	1	add
309	[BUG]  [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	32	1	add
310	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  *  val1;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  *  val1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2  *  val1;	      int    val2    =(int)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	28	None	replace
311	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  *  val2;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  *  val2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2  *  val2;	      int    val2    =(int)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	28	None	replace
312	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)/  val2;  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  float  val2  =(float)Math.floor(val1)/  val2;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)/  val2;	      int    val2    =(int)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	28	None	replace
313	[BUG]  [BUGGY]  SafeRange(val1,  val2)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  SafeRange(val1,  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRange(val1,  val2)  {	  Switch(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
314	[BUG]  [BUGGY]  SafeRaw(val1,  val2)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  SafeRaw(val1,  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRaw(val1,  val2)  {	  Switch(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
315	[BUG]  [BUGGY]  Safely(val1,  val2)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  Safely(val1,  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Safely(val1,  val2)  {	  Switch(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
316	[BUG]  [BUGGY]  for(int  val1,  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1,  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1,  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
317	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	7	None	replace
318	[BUG]  [BUGGY]  for(long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
319	[BUG]  [BUGGY]  for(long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
320	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
321	[BUG]  [BUGGY]  for(long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
322	[BUG]  [BUGGY]  for(long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
323	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	6	None	replace
324	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
325	[BUG]  [BUGGY]  While(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  While(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	While(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	      if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
326	[BUG]  [BUGGY]  safeMultiply(val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]      ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  safeMultiply(val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1)  {  throw  new  ArithmeticException( " ");  }	      if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
327	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
328	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
329	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
330	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
331	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	  	compilable	  [FE]  StackOverflowError  	1	1	add
332	[BUG]  [BUGGY]      safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	  	compilable	  [FE]  StackOverflowError  	1	1	add
333	[BUG]  [BUGGY]      safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue()  + "  * "  +  val2.doubleValue());  }  [CE]  long  cannot  be  dereferenced  [FE]      StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue()  + "  * "  +  val2.doubleValue());  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue()  + "  * "  +  val2.doubleValue());  }	  	non-compiled	[CE]  long  cannot  be  dereferenced	1	None	add
334	[BUG]  [BUGGY]      safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.toString()  + "  * "  +  val2.toString());  }  [CE]  long  cannot  be  dereferenced  [FE]        StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.toString()  + "  * "  +  val2.toString());  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.toString()  + "  * "  +  val2.toString());  }	  	non-compiled	[CE]  long  cannot  be  dereferenced	1	None	add
335	[BUG]  [BUGGY]      safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [CE]  long  cannot  be  dereferenced  [FE]          StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }	  	non-compiled	[CE]  long  cannot  be  dereferenced	1	None	add
336	[BUG]  [BUGGY]      safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ")  + "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [CE]  [FE]            StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ")  + "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ")  + "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	  	non-compiled	[CE]  	1	None	add
337	[BUG]  [BUGGY]  int  val2  =  Math.min(length,  val1);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  Math.min(length,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(length,  val1);	      int    val2    =    Math.min(val1,    val2);    	non-compiled	[CE]  orphaned  case	23	None	replace
338	[BUG]  [BUGGY]  int  val2  =  Math.min(0,  val2);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =  Math.min(0,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(0,  val2);	      int    val2    =    Math.min(val1,    val2);    	non-compiled	[CE]  orphaned  case	23	None	replace
339	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val1,  val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  char  val2  =(char)Math.floor(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val1,  val2);	      int    val2    =(int)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	25	None	replace
340	[BUG]  [BUGGY]  tryFailure(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  tryFailure(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFailure(val1,  val2)  {  throw  new  ArithmeticException( " ");  }	      if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
341	[BUG]  [BUGGY]  tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]      ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( " ");  }	      if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
342	[BUG]  [BUGGY]  tryFactory().safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]        ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  tryFactory().safeMultiply(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFactory().safeMultiply(val1,  val2);	      if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
343	[BUG]  [BUGGY]  tries[val1]  =  safeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]          ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  tries[val1]  =  safeMultiply(val2,  val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tries[val1]  =  safeMultiply(val2,  val1);	      if(val1    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	20	None	replace
344	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  >  val1)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  <  val2  ||  val1  >  val1)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  >  val1)  {	  if(val1    <    val2)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
345	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
346	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
347	[BUG]  [BUGGY]  for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	4	None	replace
348	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val1)-(char)Math.floor(val2);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  char  val2  =(char)Math.floor(val1)-(char)Math.floor(val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val1)-(char)Math.floor(val2);	      int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	22	None	replace
349	[BUG]  [BUGGY]  Switch(val2  ==  val1)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  Switch(val2  ==  val1)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val2  ==  val1)  {	  Switch(val1)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
350	[BUG]  [BUGGY]  Switch(val2  ==  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  Switch(val2  ==  0)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val2  ==  0)  {	  Switch(val1)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
351	[BUG]  [BUGGY]  Switch(val0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  Switch(val0)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val0)  {	  Switch(val1)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
352	[BUG]  [BUGGY]  Switch(val1  <  val2)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  Switch(val1  <  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1  <  val2)  {	  Switch(val1)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
353	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1,  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
354	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val  <  val1;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1;  val++)  {  safeMultiply(val1,  val2);  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	11	None	replace
355	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	29	1	add
356	[BUG]  [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]      if(val1  >=  val2)  {  throw  new  ArithmeticException(   "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	29	1	add
357	[BUG]  [BUGGY]  if(val2  >=  val1)  {  return  val1;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val2  >=  val1)  {  return  val1;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1)  {  return  val1;  }	      if(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
358	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  return  -1;  }	      if(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
359	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
360	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
361	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
362	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
363	[BUG]  [BUGGY]  if(val1  >=  val2  ||  val1  >  val2)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  >=  val2  ||  val1  >  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2  ||  val1  >  val2)  {	  if(val1    >=    val2)    {    	non-compiled	[CE]  orphaned  case	16	None	replace
364	[BUG]  [BUGGY]  Switch(val1,  val1)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  Switch(val1,  val1)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val1)  {	  Switch(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
365	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  double  val2  =(double)Math.floor(val1);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1);	      int    val2    =(int)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	21	None	replace
366	[BUG]  [BUGGY]  float  val2  =  getValue(val1)-  getValue(val2);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  float  val2  =  getValue(val1)-  getValue(val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val1)-  getValue(val2);	      int    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	24	None	replace
367	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
368	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
369	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
370	[BUG]  [BUGGY]  for(int  val1  =  0;  val3  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val3  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val3  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
371	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  VAL1;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  int  val2  =(int)Math.floor(val1)/  VAL1;  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  VAL1;	      int    val2    =(int)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	28	None	replace
372	[BUG]  [BUGGY]  if(val2  ==  0  ||  val1  >  val2)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val2  ==  0  ||  val1  >  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  0  ||  val1  >  val2)  {	  if(val2    ==    0)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
373	[BUG]  [BUGGY]  if(val2  ==  0  ||  val1  >=  val2)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val2  ==  0  ||  val1  >=  val2)  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  0  ||  val1  >=  val2)  {	  if(val2    ==    0)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
374	[BUG]  [BUGGY]  switch(val1,  val2).restrictByNotNullOrUndefined();  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  switch(val1,  val2).restrictByNotNullOrUndefined();  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictByNotNullOrUndefined();	  switch(val1,    val2)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
375	[BUG]  [BUGGY]  switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();	  switch(val1,    val2)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
376	[BUG]  [BUGGY]  switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {	  switch(val1,    val2)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
377	[BUG]  [BUGGY]  switch(val1,  val2).restrictByNotNullOrUndefined()  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  switch(val1,  val2).restrictByNotNullOrUndefined()  {  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictByNotNullOrUndefined()  {	  switch(val1,    val2)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
378	[BUG]  [BUGGY]  switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());  [BUGGY]    case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());	  switch(val1,    val2)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
379	[BUG]  [BUGGY]  while(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]    ArithmeticException    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  while(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }	      if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	30	None	replace
380	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	3	None	replace
381	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	3	None	replace
382	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	3	None	replace
383	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	3	None	replace
384	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val1++)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val1++)  {  safeMultiply(val1,  val2);  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2,  val1++)  {  safeMultiply(val1,  val2);  }	      for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
385	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
386	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
387	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	      for(int    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
388	[BUG]  [BUGGY]  float  val2  =  getValue(val1,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  float  val2  =  getValue(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val1,  val2);	      int    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	27	None	replace
389	[BUG]  [BUGGY]  SafeMultiply.safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]    StackOverflowError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  SafeMultiply.safeMultiply(val1,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply.safeMultiply(val1,  val2);	      safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	2	None	replace
390	[BUG]  [BUGGY]  long  val2  =  val1  *  val2);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1  *  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2);	      long    val2    =    val1    *    val2;    	non-compiled	[CE]  ';'  expected	31	None	replace
391	[BUG]  [BUGGY]  long  val2  =  val1  *  val2,  val2);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  long  val2  =  val1  *  val2,  val2);  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2,  val2);	      long    val2    =    val1    *    val2;    	non-compiled	[CE]  ';'  expected	31	None	replace
392	[BUG]  [BUGGY]  if(val1  <  =  val2)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  <  =  val2)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  =  val2)  {  return  0L;  }	      if(val1    >=    val2)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
393	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  0L;  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]    public  static  long  safeMultiply(long  val1,  int  val2)  {    [BUGGY]  if(val1  <  val2)  {  return  0L;  }  [BUGGY]    switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  return  0L;  }	      if(val1    >=    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
