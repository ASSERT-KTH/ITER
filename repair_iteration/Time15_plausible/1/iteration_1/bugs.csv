bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    safeMultiply(val1,  val2);  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	    safeMultiply(val1,  val2);		compilable	  [FE]  StackOverflowError  	2	1	add
2	[BUG]  [BUGGY]    safeMultiply(val1,  val2);  [FE]  StackOverflowError  [FE]    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    safeMultiply(val1,  val2);  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    safeMultiply(val1,  val2);		compilable	  [FE]  StackOverflowError  	2	1	add
3	[BUG]  [BUGGY]    for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
4	[BUG]  [BUGGY]    for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
5	[BUG]  [BUGGY]    for(int  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    for(int  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    for(int  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
6	[BUG]  [BUGGY]    for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
7	[BUG]  [BUGGY]    for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
8	[BUG]  [BUGGY]    for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }		non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	2	None	add
9	[BUG]  [BUGGY]    long  val2  =  val1.longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                  AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    long  val2  =  val1.longValue();  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    long  val2  =  val1.longValue();		non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	2	None	add
10	[BUG]  [BUGGY]    for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);		non-compiled	[CE]  illegal  start  of  expression	2	None	add
11	[BUG]  [BUGGY]    for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                      AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }		non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	2	None	add
12	[BUG]  [BUGGY]  switch(val1)  {  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]  switch(val1)  {  [BUGGY]  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1)  {	switch  (val2)  {  	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
13	[BUG]  [BUGGY]  switch(val1,  val2)  {  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]  switch(val1,  val2)  {  [BUGGY]  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2)  {	switch  (val2)  {  	non-compiled	[CE]  ')'  expected	1	None	replace
14	[BUG]  [BUGGY]  Switch(val1,  val2)  {  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]  Switch(val1,  val2)  {  [BUGGY]  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2)  {	switch  (val2)  {  	non-compiled	[CE]  ';'  expected	1	None	replace
15	[BUG]  [BUGGY]  if(val1  ==  val2)  {  [CE]  orphaned  case  [FE]          AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]  if(val1  ==  val2)  {  [BUGGY]  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {	switch  (val2)  {  	non-compiled	[CE]  orphaned  case	1	None	replace
16	[BUG]  [BUGGY]  if(val1  >=  val2)  {  [CE]  orphaned  case  [FE]            AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]  if(val1  >=  val2)  {  [BUGGY]  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {	switch  (val2)  {  	non-compiled	[CE]  orphaned  case	1	None	replace
17	[BUG]  [BUGGY]  if(val1!=  val2)  {  [CE]  orphaned  case  [FE]              AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]  if(val1!=  val2)  {  [BUGGY]  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1!=  val2)  {	switch  (val2)  {  	non-compiled	[CE]  orphaned  case	1	None	replace
18	[BUG]  [BUGGY]  Switch(val1)  {  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]  Switch(val1)  {  [BUGGY]  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1)  {	switch  (val2)  {  	non-compiled	[CE]  ';'  expected	1	None	replace
19	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	    if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }		compilable	  [FE]  ArithmeticException  	2	1	add
20	[BUG]  [BUGGY]    if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }		compilable	  [FE]  ArithmeticException  	2	1	add
21	[BUG]  [BUGGY]    int  val2  =(int)Math.floor(val1);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]      AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    int  val2  =(int)Math.floor(val1);  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    int  val2  =(int)Math.floor(val1);		non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	2	None	add
22	[BUG]  [BUGGY]    int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]        AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2);  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2);		non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	2	None	add
23	[BUG]  [BUGGY]    int  val2  =  Math.min(val1,  val2);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]          AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    int  val2  =  Math.min(val1,  val2);  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    int  val2  =  Math.min(val1,  val2);		non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	2	None	add
24	[BUG]  [BUGGY]    int  val2  =  getValue(val1)-  getValue(val2);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]            AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    int  val2  =  getValue(val1)-  getValue(val2);  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    int  val2  =  getValue(val1)-  getValue(val2);		non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	2	None	add
25	[BUG]  [BUGGY]    int  val2  =(int)Math.floor(val1,  val2);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]              AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    int  val2  =(int)Math.floor(val1,  val2);  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    int  val2  =(int)Math.floor(val1,  val2);		non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	2	None	add
26	[BUG]  [BUGGY]    int  val2  =  getValue(val1);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    int  val2  =  getValue(val1);  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    int  val2  =  getValue(val1);		non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	2	None	add
27	[BUG]  [BUGGY]    int  val2  =  getValue(val1,  val2);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                  AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    int  val2  =  getValue(val1,  val2);  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    int  val2  =  getValue(val1,  val2);		non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	2	None	add
28	[BUG]  [BUGGY]    int  val2  =(int)Math.floor(val1)/  val2;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    int  val2  =(int)Math.floor(val1)/  val2;  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    int  val2  =(int)Math.floor(val1)/  val2;		non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	2	None	add
29	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }		compilable	  [FE]  ArithmeticException  	2	1	add
30	[BUG]  [BUGGY]    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }		compilable	  [FE]  ArithmeticException  	2	1	add
31	[BUG]  [BUGGY]    long  val2  =  val1  *  val2;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]      AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    long  val2  =  val1  *  val2;  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    long  val2  =  val1  *  val2;		non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	2	None	add
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    if(val1  >=  val2)  {  return  val2;  }  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	    if(val1  >=  val2)  {  return  val2;  }		compilable	  [FE]  AssertionFailedError  	2	1	add
33	[BUG]  [BUGGY]    if(val1  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    if(val1  >=  val2)  {  return  val2;  }  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    if(val1  >=  val2)  {  return  val2;  }		compilable	  [FE]  AssertionFailedError  	2	1	add
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    if(val1  >=  val2)  {  return  0L;  }  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	    if(val1  >=  val2)  {  return  0L;  }		compilable	  [FE]  AssertionFailedError  	2	1	add
35	[BUG]  [BUGGY]    if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]    if(val1  >=  val2)  {  return  0L;  }  [BUGGY]  switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	    if(val1  >=  val2)  {  return  0L;  }		compilable	  [FE]  AssertionFailedError  	2	1	add
36	[BUG]  [BUGGY]  if(val1  <  val2)  {  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]  if(val1  <  val2)  {  [BUGGY]  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {	switch  (val2)  {  	non-compiled	[CE]  orphaned  case	1	None	replace
37	[BUG]  [BUGGY]  if(val2  ==  0)  {  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  [BUGGY]  if(val2  ==  0)  {  [BUGGY]  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  0)  {	switch  (val2)  {  	non-compiled	[CE]  orphaned  case	1	None	replace
