bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Switch(val1,  val2  ==  val1)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2  ==  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2  ==  val1)  {	  Switch(val2    ==    val1)    {    	non-compiled	[CE]  ';'  expected	349	None	replace
2	[BUG]  [BUGGY]  Switch(val0  ==  val1)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val0  ==  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val0  ==  val1)  {	  Switch(val2    ==    val1)    {    	non-compiled	[CE]  ';'  expected	349	None	replace
3	[BUG]  [BUGGY]  Switch(val1  ==  val1)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1  ==  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1  ==  val1)  {	  Switch(val2    ==    val1)    {    	non-compiled	[CE]  ';'  expected	349	None	replace
4	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	200	None	replace
5	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	200	None	replace
6	[BUG]  [BUGGY]  for(int  val2  =  1;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	200	None	replace
7	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	200	None	replace
8	[BUG]  [BUGGY]  validateMultiply(val1,  val2);  [CE]  orphaned  case  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  validateMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	validateMultiply(val1,  val2);	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	171	None	replace
9	[BUG]  [BUGGY]  long  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val    <    val2.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  >  expected	178	None	replace
10	[BUG]  [BUGGY]  for(int  val1  =  1;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val    <    val2.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	178	None	replace
11	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val    <    val2.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	178	None	replace
12	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val    <    val2.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	178	None	replace
13	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  3;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  3;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)/  3;	  int    val2    =(int)Math.floor(val1,    val2)-    3;    	non-compiled	[CE]  orphaned  case	285	None	replace
14	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1,  val2)-  3;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1,  val2)-  3;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1,  val2)-  3;	  int    val2    =(int)Math.floor(val1,    val2)-    3;    	non-compiled	[CE]  orphaned  case	285	None	replace
15	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1,  val2)-  3;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1,  val2)-  3;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1,  val2)-  3;	  int    val2    =(int)Math.floor(val1,    val2)-    3;    	non-compiled	[CE]  orphaned  case	285	None	replace
16	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2,  val1)-  3;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2,  val1)-  3;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2,  val1)-  3;	  int    val2    =(int)Math.floor(val1,    val2)-    3;    	non-compiled	[CE]  orphaned  case	285	None	replace
17	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  4;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  4;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)/  4;	  int    val2    =(int)Math.floor(val1,    val2)-    3;    	non-compiled	[CE]  orphaned  case	285	None	replace
18	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	  	compilable	  [FE]  StackOverflowError  	331	1	add
19	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	  	compilable	  [FE]  StackOverflowError  	331	1	add
20	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +   "  * "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +   "  * "  +  val2);  }	  	compilable	  [FE]  StackOverflowError  	331	1	add
21	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +   "  * "  +  val2);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +   "  * "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +   "  * "  +  val2);  }	  	compilable	  [FE]  StackOverflowError  	331	1	add
22	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +   "  * "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +   "  * "  +  val2);  }	  	compilable	  [FE]  StackOverflowError  	331	1	add
23	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +   "  * "  +  val2);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +   "  * "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +   "  * "  +  val2);  }	  	compilable	  [FE]  StackOverflowError  	331	1	add
24	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	  	compilable	  [FE]  StackOverflowError  	331	1	add
25	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	  	compilable	  [FE]  StackOverflowError  	331	1	add
26	[BUG]  [BUGGY]  int  val2  =  getValue(val2)-  getValue(val1,  val2);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)-  getValue(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)-  getValue(val1,  val2);	  int    val2    =    getValue(val1)-    getValue(val2,    val2);    	non-compiled	[CE]  orphaned  case	287	None	replace
27	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  getValue(val2,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)/  getValue(val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  getValue(val2,  val2);	  int    val2    =    getValue(val1)-    getValue(val2,    val2);    	non-compiled	[CE]  orphaned  case	287	None	replace
28	[BUG]  [BUGGY]  long  val2  =  getValue(val1)-  getValue(val2,  val2);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1)-  getValue(val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1)-  getValue(val2,  val2);	  int    val2    =    getValue(val1)-    getValue(val2,    val2);    	non-compiled	[CE]  orphaned  case	287	None	replace
29	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)-  getValue(val2,  val1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)-  getValue(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)-  getValue(val2,  val1);	  int    val2    =    getValue(val1)-    getValue(val2,    val2);    	non-compiled	[CE]  orphaned  case	287	None	replace
30	[BUG]  [BUGGY]  int  val2  =  getValue(val2)-  getValue(val2,  val1);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)-  getValue(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)-  getValue(val2,  val1);	  int    val2    =    getValue(val1)-    getValue(val2,    val2);    	non-compiled	[CE]  orphaned  case	287	None	replace
31	[BUG]  [BUGGY]  float  val2  =  getValue(val1)-  getValue(val2,  val2);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  getValue(val1)-  getValue(val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val1)-  getValue(val2,  val2);	  int    val2    =    getValue(val1)-    getValue(val2,    val2);    	non-compiled	[CE]  orphaned  case	287	None	replace
32	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	21	None	replace
33	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	21	None	replace
34	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	21	None	replace
35	[BUG]  [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0,  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	21	None	replace
36	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)-(long)Math.floor(val2,  val2);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1)-(long)Math.floor(val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)-(long)Math.floor(val2,  val2);	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2,    val2);    	non-compiled	[CE]  orphaned  case	260	None	replace
37	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/(int)Math.floor(val2,  val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/(int)Math.floor(val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/(int)Math.floor(val2,  val2);	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2,    val2);    	non-compiled	[CE]  orphaned  case	260	None	replace
38	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)-(float)Math.floor(val2,  val2);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1)-(float)Math.floor(val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)-(float)Math.floor(val2,  val2);	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2,    val2);    	non-compiled	[CE]  orphaned  case	260	None	replace
39	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)-(int)Math.floor(val1,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)-(int)Math.floor(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)-(int)Math.floor(val1,  val2);	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2,    val2);    	non-compiled	[CE]  orphaned  case	260	None	replace
40	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)-(int)Math.floor(val1,  val2);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2)-(int)Math.floor(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)-(int)Math.floor(val1,  val2);	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2,    val2);    	non-compiled	[CE]  orphaned  case	260	None	replace
41	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1)-(double)Math.floor(val2,  val2);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1)-(double)Math.floor(val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1)-(double)Math.floor(val2,  val2);	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2,    val2);    	non-compiled	[CE]  orphaned  case	260	None	replace
42	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val1)-(char)Math.floor(val2,  val2);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.floor(val1)-(char)Math.floor(val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val1)-(char)Math.floor(val2,  val2);	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2,    val2);    	non-compiled	[CE]  orphaned  case	260	None	replace
43	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)/  val2  +  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1)/  val2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)/  val2  +  1;	  long    val2    =(long)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	61	None	replace
44	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val2)/  val1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val2)/  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val2)/  val1;	  long    val2    =(long)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	61	None	replace
45	[BUG]  [BUGGY]  long  val2  =(long)Math.log(val1)/  val2;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.log(val1)/  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.log(val1)/  val2;	  long    val2    =(long)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	61	None	replace
46	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)/  val2L;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1)/  val2L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)/  val2L;	  long    val2    =(long)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	61	None	replace
47	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)/  val2  *  val1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1)/  val2  *  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)/  val2  *  val1;	  long    val2    =(long)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	61	None	replace
48	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)/  val2  *  val2;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1)/  val2  *  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)/  val2  *  val2;	  long    val2    =(long)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	61	None	replace
49	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1,  val2)/  val2;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1,  val2)/  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1,  val2)/  val2;	  long    val2    =(long)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	61	None	replace
50	[BUG]  [BUGGY]  switch(val2  <  val1)  {  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val2  <  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val2  <  val1)  {	  switch(val1    <    val2)    {    	non-compiled	[CE]  incompatible  types	162	None	replace
51	[BUG]  [BUGGY]  switch(val1.doubleValue()  <  val2)  {  [CE]  long  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1.doubleValue()  <  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1.doubleValue()  <  val2)  {	  switch(val1    <    val2)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	162	None	replace
52	[BUG]  [BUGGY]  vice.safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  vice.safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	vice.safeMultiply(val1,  val2);	          if(val1    >=    val2)    {    return    0L;    }    if(val1!=    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	242	None	replace
53	[BUG]  [BUGGY]  vice(val1,  val2);  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  vice(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	vice(val1,  val2);	          if(val1    >=    val2)    {    return    0L;    }    if(val1!=    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	242	None	replace
54	[BUG]  [BUGGY]  if(val1  >  val2  ||  val1  <  val2)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2  ||  val1  <  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2  ||  val1  <  val2)  {	  if(val1    >    val2)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
55	[BUG]  [BUGGY]  if(val2  >  val1)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >  val1)  {	  if(val1    >    val2)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
56	[BUG]  [BUGGY]  if(val1  >  val2  ||  val1  <  val1)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2  ||  val1  <  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2  ||  val1  <  val1)  {	  if(val1    >    val2)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
57	[BUG]  [BUGGY]  Switch(val1  ==  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1  ==  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1  ==  0)  {	  Switch(val2    ==    0)    {    	non-compiled	[CE]  ';'  expected	350	None	replace
58	[BUG]  [BUGGY]  Switch(val1  ==  0L)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1  ==  0L)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1  ==  0L)  {	  Switch(val2    ==    0)    {    	non-compiled	[CE]  ';'  expected	350	None	replace
59	[BUG]  [BUGGY]  Switch(val2  ==  1)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val2  ==  1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val2  ==  1)  {	  Switch(val2    ==    0)    {    	non-compiled	[CE]  ';'  expected	350	None	replace
60	[BUG]  [BUGGY]  Switch(val2  ==  0L)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val2  ==  0L)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val2  ==  0L)  {	  Switch(val2    ==    0)    {    	non-compiled	[CE]  ';'  expected	350	None	replace
61	[BUG]  [BUGGY]  long  val2  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    >=    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	330	None	replace
62	[BUG]  [BUGGY]  for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    >=    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	330	None	replace
63	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  >=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  >=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  >=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    >=    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	330	None	replace
64	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    >=    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	330	None	replace
65	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    >=    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	330	None	replace
66	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue()  + "  * "  +  val2.doubleValue());  }  [CE]  orphaned  case  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue()  + "  * "  +  val2.doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue()  + "  * "  +  val2.doubleValue());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.doubleValue()    +   "    *   "    +    val2.doubleValue());    }    	non-compiled	[CE]  orphaned  case	333	None	replace
67	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  if(val2!=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue()  + "  * "  +  val2.doubleValue());  }  [CE]  orphaned  case  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  if(val2!=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue()  + "  * "  +  val2.doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  if(val2!=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue()  + "  * "  +  val2.doubleValue());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.doubleValue()    +   "    *   "    +    val2.doubleValue());    }    	non-compiled	[CE]  orphaned  case	333	None	replace
68	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue()  + ",  * "  +  val2.doubleValue());  }  [CE]  orphaned  case  [FE]              StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue()  + ",  * "  +  val2.doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue()  + ",  * "  +  val2.doubleValue());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.doubleValue()    +   "    *   "    +    val2.doubleValue());    }    	non-compiled	[CE]  orphaned  case	333	None	replace
69	[BUG]  [BUGGY]  Switch(val1,  val2,  1)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  1)  {	  Switch(val1,    val2,    0)    {    	non-compiled	[CE]  ';'  expected	141	None	replace
70	[BUG]  [BUGGY]  Switch(val1,  val2,  2)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  2)  {	  Switch(val1,    val2,    0)    {    	non-compiled	[CE]  ';'  expected	141	None	replace
71	[BUG]  [BUGGY]  Switch(val1,  val2,  0L)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  0L)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  0L)  {	  Switch(val1,    val2,    0)    {    	non-compiled	[CE]  ';'  expected	141	None	replace
72	[BUG]  [BUGGY]  Switch(val1,  val2,  0,  val1)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  0,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  0,  val1)  {	  Switch(val1,    val2,    0)    {    	non-compiled	[CE]  ';'  expected	141	None	replace
73	[BUG]  [BUGGY]  Switch(val1,  val2,  0,  val1.length)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  0,  val1.length)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  0,  val1.length)  {	  Switch(val1,    val2,    0)    {    	non-compiled	[CE]  ';'  expected	141	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
75	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
77	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val2)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val2)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
79	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val2)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val2)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val2)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
81	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
83	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
84	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >>  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	308	None	add
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
86	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
87	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >>  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	308	None	add
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
89	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
91	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
92	[BUG]  [BUGGY]  int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	271	None	replace
93	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	271	None	replace
94	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	271	None	replace
95	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >>  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >>  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >>  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	271	None	replace
96	[BUG]  [BUGGY]  tryMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }	  tryFailure(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	340	None	replace
97	[BUG]  [BUGGY]  SafeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }	  tryFailure(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	340	None	replace
98	[BUG]  [BUGGY]  tryFailure(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFailure(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFailure(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	  tryFailure(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	340	None	replace
99	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  {  return  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)  {  return  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)  {  return  safeMultiply(val2,  val1);  }	  tryFailure(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  ';'  expected	340	None	replace
100	[BUG]  [BUGGY]  tryFailure(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1);  }  [CE]  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFailure(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFailure(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1);  }	  tryFailure(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	340	None	replace
101	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val1,  val2);  safeMultiply(val1,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val1,    val1);    safeMultiply(val1,  val2);  safeMultiply(val1,  val1);	  	compilable	  [FE]  StackOverflowError  	91	1	add
102	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val1,  val2);  safeMultiply(val1,  val1);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val1,  val2);  safeMultiply(val1,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val1);    safeMultiply(val1,  val2);  safeMultiply(val1,  val1);	  	compilable	  [FE]  StackOverflowError  	91	1	add
103	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val1,    val1);    safeMultiply(val1,  val2);  safeMultiply(val1,  val2);	  	compilable	  [FE]  StackOverflowError  	91	1	add
104	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val1);    safeMultiply(val1,  val2);  safeMultiply(val1,  val2);	  	compilable	  [FE]  StackOverflowError  	91	1	add
105	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val1,    val1);    safeMultiply(val1,  val2);  safeMultiply(val2,  val1);	  	compilable	  [FE]  StackOverflowError  	91	1	add
106	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val1);    safeMultiply(val1,  val2);  safeMultiply(val2,  val1);	  	compilable	  [FE]  StackOverflowError  	91	1	add
107	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val1,    val1);    safeMultiply(val2,  val1);  safeMultiply(val1,  val2);	  	compilable	  [FE]  StackOverflowError  	91	1	add
108	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val1);    safeMultiply(val2,  val1);  safeMultiply(val1,  val2);	  	compilable	  [FE]  StackOverflowError  	91	1	add
109	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  SafeMultiply(val1,  val2);  safeMultiply(val1,  val2);  [CE]  cannot  find  symbol  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  SafeMultiply(val1,  val2);  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val1);    SafeMultiply(val1,  val2);  safeMultiply(val1,  val2);	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
110	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  SafeMultiply(val1,  val2);  safeMultiply(val1,  val1);  [CE]  cannot  find  symbol  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  SafeMultiply(val1,  val2);  safeMultiply(val1,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val1);    SafeMultiply(val1,  val2);  safeMultiply(val1,  val1);	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
111	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val1,  val2);  safeMultiply(val1);  [CE]  no  suitable  method  found  for  safeMultiply(long)  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val1,  val2);  safeMultiply(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val1);    safeMultiply(val1,  val2);  safeMultiply(val1);	  	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long)	91	None	add
112	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val1,  val2);  safeMultiply(val1,  val3);  [CE]  cannot  find  symbol  val3  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val1,  val2);  safeMultiply(val1,  val3);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val1);    safeMultiply(val1,  val2);  safeMultiply(val1,  val3);	  	non-compiled	[CE]  cannot  find  symbol  val3	91	None	add
113	[BUG]  [BUGGY]  long  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	386	None	replace
114	[BUG]  [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	386	None	replace
115	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	386	None	replace
116	[BUG]  [BUGGY]  for(int  val1  =  0L;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0L;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0L;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	386	None	replace
117	[BUG]  [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0,  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	386	None	replace
118	[BUG]  [BUGGY]  for(long  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(long  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	386	None	replace
119	[BUG]  [BUGGY]  safeMultiply(val1);  [CE]  orphaned  case  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1);	  allowMultiply(val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	294	None	replace
120	[BUG]  [BUGGY]  enableMultiply(val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  enableMultiply(val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	enableMultiply(val1)  {  throw  new  ArithmeticException( " ");  }	  allowMultiply(val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	294	None	replace
121	[BUG]  [BUGGY]  safeMultiply(val1)  {  throw  new  ArithmeticException( " ".getMessage());  }  [CE]  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1)  {  throw  new  ArithmeticException( " ".getMessage());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1)  {  throw  new  ArithmeticException( " ".getMessage());  }	  allowMultiply(val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	294	None	replace
122	[BUG]  [BUGGY]  safeMultiply(val1)  {  throw  new  ArithmeticException( " ",  val2);  }  [CE]  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1)  {  throw  new  ArithmeticException( " ",  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1)  {  throw  new  ArithmeticException( " ",  val2);  }	  allowMultiply(val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	294	None	replace
123	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val3++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val3++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val3++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val3    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	370	None	replace
124	[BUG]  [BUGGY]  long  val1  =  0;  val3  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val3  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val3  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val3    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	370	None	replace
125	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val3    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	370	None	replace
126	[BUG]  [BUGGY]  for(int  val1  =  1;  val3  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val3  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val3  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val3    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	370	None	replace
127	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val3    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	370	None	replace
128	[BUG]  [BUGGY]  for(int  val1  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val3    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	370	None	replace
129	[BUG]  [BUGGY]  for(int  val1  =  0;  val3  <  val1.length;  val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val3  <  val1.length;  val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val3  <  val1.length;  val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val3    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	370	None	replace
130	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	170	None	add
131	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	170	1	add
132	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	170	1	add
133	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	170	None	add
134	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	170	1	add
135	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	170	1	add
136	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	170	None	add
137	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]              ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	170	None	add
138	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]                ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	170	None	add
139	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]                  ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	170	None	add
140	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]                    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	170	None	add
141	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  SafeMutils.safeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]        StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  SafeMutils.safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  SafeMutils.safeMultiply(val2,  val1);	          safeMultiply(val1,    val2);    SafeMutils.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	288	None	replace
142	[BUG]  [BUGGY]  safeMultiply(val2,  val1);  SafeMutils.safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2,  val1);  SafeMutils.safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val1);  SafeMutils.safeMultiply(val1,  val2);	          safeMultiply(val1,    val2);    SafeMutils.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	288	None	replace
143	[BUG]  [BUGGY]  SafeMutils.safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMutils.safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutils.safeMultiply(val1,  val2);	          safeMultiply(val1,    val2);    SafeMutils.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	288	None	replace
144	[BUG]  [BUGGY]  safeMultiply(val1);  SafeMutils.safeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]              StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1);  SafeMutils.safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1);  SafeMutils.safeMultiply(val2,  val1);	          safeMultiply(val1,    val2);    SafeMutils.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	288	None	replace
145	[BUG]  [BUGGY]  parent.safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  parent.safeMultiply(val1,  val2);  [BUGGY]    val2)  {  return  0L;  }  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	parent.safeMultiply(val1,  val2);	          if(val1    >=    val2)    {    return    0L;    }    if(val1    	non-compiled	[CE]  orphaned  case	246	None	replace
146	[BUG]  [BUGGY]  long  val2  =  getValue(val1)/  getValue(val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1)/  getValue(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1)/  getValue(val2);	  long    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	133	None	replace
147	[BUG]  [BUGGY]  long  val2  =  getValue(val2)-  getValue(val1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val2)-  getValue(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val2)-  getValue(val1);	  long    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	133	None	replace
148	[BUG]  [BUGGY]  long  val2  =  getValue(val1)-  getValue(val2)-  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1)-  getValue(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1)-  getValue(val2)-  1;	  long    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	133	None	replace
149	[BUG]  [BUGGY]  long  val2  =  getValue(val1,  val2)-  getValue(val2);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1,  val2)-  getValue(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1,  val2)-  getValue(val2);	  long    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	133	None	replace
150	[BUG]  [BUGGY]  long  val2  =  getValue(val1)-  getValue(val2)+  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1)-  getValue(val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1)-  getValue(val2)+  1;	  long    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	133	None	replace
151	[BUG]  [BUGGY]  long  val2  =  getValue(val1)-  getValue(val2)-  1L;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1)-  getValue(val2)-  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1)-  getValue(val2)-  1L;	  long    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	133	None	replace
152	[BUG]  [BUGGY]  short  val2  =  getValue(val1)-  getValue(val2);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val2  =  getValue(val1)-  getValue(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val2  =  getValue(val1)-  getValue(val2);	  long    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	133	None	replace
153	[BUG]  [BUGGY]  long  val2  =  getValue(val1)-  getValue(val2,  val1);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1)-  getValue(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1)-  getValue(val2,  val1);	  long    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	133	None	replace
154	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  >  expected	130	None	replace
155	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	130	None	replace
156	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	130	None	replace
157	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0L;  val2  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0L;  val2  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  >  expected	130	None	replace
158	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  SafeMultiplication(val2,  val1);  [CE]  orphaned  case  [FE]                      StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  SafeMultiplication(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  SafeMultiplication(val2,  val1);	          safeMultiply(val1,    val2);    SafeMultiplication(val1,    val2);    	non-compiled	[CE]  orphaned  case	90	None	replace
159	[BUG]  [BUGGY]  safeMultiply(val2,  val1);  SafeMultiplication(val1,  val2);  [CE]  orphaned  case  [FE]                        StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2,  val1);  SafeMultiplication(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val1);  SafeMultiplication(val1,  val2);	          safeMultiply(val1,    val2);    SafeMultiplication(val1,    val2);    	non-compiled	[CE]  orphaned  case	90	None	replace
160	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1);  SafeMultiplication(val1,  val2);  [CE]  orphaned  case  [FE]                          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1);  SafeMultiplication(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1);  SafeMultiplication(val1,  val2);	          safeMultiply(val1,    val2);    SafeMultiplication(val1,    val2);    	non-compiled	[CE]  orphaned  case	90	None	replace
161	[BUG]  [BUGGY]  switch(val1,  val2,  0L)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2,  0L)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2,  0L)  {	  switch(val1,    val2,    0)    {    	non-compiled	[CE]  ')'  expected	124	None	replace
162	[BUG]  [BUGGY]  switch(val1,  val2,  1)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2,  1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2,  1)  {	  switch(val1,    val2,    0)    {    	non-compiled	[CE]  ')'  expected	124	None	replace
163	[BUG]  [BUGGY]  switch(val1,  val2,  2)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2,  2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2,  2)  {	  switch(val1,    val2,    0)    {    	non-compiled	[CE]  ')'  expected	124	None	replace
164	[BUG]  [BUGGY]  switch(val1,  val2,  0,  val1)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2,  0,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2,  0,  val1)  {	  switch(val1,    val2,    0)    {    	non-compiled	[CE]  ')'  expected	124	None	replace
165	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	359	None	replace
166	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  ++val1)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  ++val1)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val2.length;  ++val1)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	359	None	replace
167	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	359	None	replace
168	[BUG]  [BUGGY]  for(int  val1  =  1;  val  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	359	None	replace
169	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	359	None	replace
170	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  1;	  int    val2    =(int)Math.floor(val1)+    1;    	non-compiled	[CE]  orphaned  case	220	None	replace
171	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)+  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)+  1;	  int    val2    =(int)Math.floor(val1)+    1;    	non-compiled	[CE]  orphaned  case	220	None	replace
172	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)+  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)+  1;	  int    val2    =(int)Math.floor(val1)+    1;    	non-compiled	[CE]  orphaned  case	220	None	replace
173	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)/  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2)/  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)/  1;	  int    val2    =(int)Math.floor(val1)+    1;    	non-compiled	[CE]  orphaned  case	220	None	replace
174	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)+  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)+  1;	  int    val2    =(int)Math.floor(val1)+    1;    	non-compiled	[CE]  orphaned  case	220	None	replace
175	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)+  2;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)+  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)+  2;	  int    val2    =(int)Math.floor(val1)+    1;    	non-compiled	[CE]  orphaned  case	220	None	replace
176	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val1)+  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.floor(val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val1)+  1;	  int    val2    =(int)Math.floor(val1)+    1;    	non-compiled	[CE]  orphaned  case	220	None	replace
177	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val1)+  1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val1)+  1;	  int    val2    =(int)Math.floor(val1)+    1;    	non-compiled	[CE]  orphaned  case	220	None	replace
178	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >>    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	50	None	replace
179	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >>    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	50	None	replace
180	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >>    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	50	None	replace
181	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >>    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	50	None	replace
182	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >>    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	50	None	replace
183	[BUG]  [BUGGY]  int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >>    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	50	None	replace
184	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  >  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val2.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  >  expected	182	None	replace
185	[BUG]  [BUGGY]  for(int  val2  =  1;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val2.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	182	None	replace
186	[BUG]  [BUGGY]  int  val2  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  >  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val2.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  >  expected	182	None	replace
187	[BUG]  [BUGGY]  while(val1  >=  val2)  {  [CE]  orphaned  case  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  >=  val2)  {  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  >=  val2)  {	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	174	None	replace
188	[BUG]  [BUGGY]  tryReturnValues(val1,  val2);  [CE]  orphaned  case  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryReturnValues(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryReturnValues(val1,  val2);	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	174	None	replace
189	[BUG]  [BUGGY]  ||(val1  ==  val2)&&(val2  ==  val1))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val1  ==  val2)&&(val2  ==  val1))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1  ==  val2)&&(val2  ==  val1))  {  return  val2;  }	  ||(val1    >=    val2)&&(val2    ==    val1))    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
190	[BUG]  [BUGGY]  ||(val1  >=  val1)&&(val2  ==  val1))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val1  >=  val1)&&(val2  ==  val1))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1  >=  val1)&&(val2  ==  val1))  {  return  val2;  }	  ||(val1    >=    val2)&&(val2    ==    val1))    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
191	[BUG]  [BUGGY]  ||(val1!=  val2)&&(val2  ==  val1))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val1!=  val2)&&(val2  ==  val1))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1!=  val2)&&(val2  ==  val1))  {  return  val2;  }	  ||(val1    >=    val2)&&(val2    ==    val1))    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
192	[BUG]  [BUGGY]  ||(val1  >>  val2)&&(val2  ==  val1))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val1  >>  val2)&&(val2  ==  val1))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1  >>  val2)&&(val2  ==  val1))  {  return  val2;  }	  ||(val1    >=    val2)&&(val2    ==    val1))    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
193	[BUG]  [BUGGY]  ||(val1  >  val2)&&(val2  ==  val1))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val1  >  val2)&&(val2  ==  val1))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1  >  val2)&&(val2  ==  val1))  {  return  val2;  }	  ||(val1    >=    val2)&&(val2    ==    val1))    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
194	[BUG]  [BUGGY]  ||(val1  <  val2)&&(val2  ==  val1))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val1  <  val2)&&(val2  ==  val1))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1  <  val2)&&(val2  ==  val1))  {  return  val2;  }	  ||(val1    >=    val2)&&(val2    ==    val1))    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
195	[BUG]  [BUGGY]  ||(val1  <  val2)&&(val2  >=  val1))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val1  <  val2)&&(val2  >=  val1))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1  <  val2)&&(val2  >=  val1))  {  return  val2;  }	  ||(val1    >=    val2)&&(val2    ==    val1))    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
196	[BUG]  [BUGGY]  while(val2  <  val1)  {  [CE]  orphaned  case  [FE]        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val2  <  val1)  {  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val2  <  val1)  {	  while(val1    <    val2)    {    	non-compiled	[CE]  orphaned  case	72	None	replace
197	[BUG]  [BUGGY]  while(val1  <  val2  ||  val1  >  val2)  {  [CE]  orphaned  case  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2  ||  val1  >  val2)  {  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2  ||  val1  >  val2)  {	  while(val1    <    val2)    {    	non-compiled	[CE]  orphaned  case	72	None	replace
198	[BUG]  [BUGGY]  while(val1  <  =  val2)  {  [CE]  illegal  start  of  expression  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  =  val2)  {  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  =  val2)  {	  while(val1    <    val2)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
199	[BUG]  [BUGGY]  while(val1  <  val2  ||  val1  >=  val2)  {  [CE]  orphaned  case  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2  ||  val1  >=  val2)  {  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2  ||  val1  >=  val2)  {	  while(val1    <    val2)    {    	non-compiled	[CE]  orphaned  case	72	None	replace
200	[BUG]  [BUGGY]  while(val1  >  val2)  {  [CE]  orphaned  case  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  >  val2)  {  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  >  val2)  {	  while(val1    <    val2)    {    	non-compiled	[CE]  orphaned  case	72	None	replace
201	[BUG]  [BUGGY]  while(val1  <  val2,  val1)  {  [CE]  ')'  expected  [FE]                  ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2,  val1)  {  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2,  val1)  {	  while(val1    <    val2)    {    	non-compiled	[CE]  ')'  expected	72	None	replace
202	[BUG]  [BUGGY]  if(val1  >=  0  ||  val2  ==  0)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  0  ||  val2  ==  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  0  ||  val2  ==  0)  {	  if(val1    ==    0)    {    	non-compiled	[CE]  orphaned  case	157	None	replace
203	[BUG]  [BUGGY]  if(val1  ==  0L  ||  val2  ==  0L)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  0L  ||  val2  ==  0L)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  0L  ||  val2  ==  0L)  {	  if(val1    ==    0)    {    	non-compiled	[CE]  orphaned  case	157	None	replace
204	[BUG]  [BUGGY]  if(val1  <  0  ||  val2  >  0)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  0  ||  val2  >  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  0  ||  val2  >  0)  {	  if(val1    ==    0)    {    	non-compiled	[CE]  orphaned  case	157	None	replace
205	[BUG]  [BUGGY]  if(val1!=  0  ||  val2  ==  0)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1!=  0  ||  val2  ==  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1!=  0  ||  val2  ==  0)  {	  if(val1    ==    0)    {    	non-compiled	[CE]  orphaned  case	157	None	replace
206	[BUG]  [BUGGY]  if(val1  ==  0  ||  val2!=  0)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  0  ||  val2!=  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  0  ||  val2!=  0)  {	  if(val1    ==    0)    {    	non-compiled	[CE]  orphaned  case	157	None	replace
207	[BUG]  [BUGGY]  tryFunction(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFunction(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFunction(val1,  val2)  {  throw  new  ArithmeticException( " ");  }	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    >>    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  	172	None	replace
208	[BUG]  [BUGGY]  tryFactory.safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFactory.safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFactory.safeMultiply(val1,  val2);	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    >>    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	172	None	replace
209	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1))  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1))  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1))  {  throw  new  ArithmeticException( " ");  }	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    >>    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  	172	None	replace
210	[BUG]  [BUGGY]  long  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	382	None	replace
211	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  val++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	382	None	replace
212	[BUG]  [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	382	None	replace
213	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	382	None	replace
214	[BUG]  [BUGGY]  for(int  val1  =  0L;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0L;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0L;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	382	None	replace
215	[BUG]  [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0,  val2  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	382	None	replace
216	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2;  val++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2;  val++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2;  val++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	382	None	replace
217	[BUG]  [BUGGY]  int  val2  =  Math.min(val2,  val1)+  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(val2,  val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(val2,  val1)+  1;	  int    val2    =    Math.min(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	284	None	replace
218	[BUG]  [BUGGY]  int  val2  =  Math.min(val1,  val2)/  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(val1,  val2)/  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(val1,  val2)/  1;	  int    val2    =    Math.min(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	284	None	replace
219	[BUG]  [BUGGY]  long  val2  =  Math.min(val1,  val2)+  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  Math.min(val1,  val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  Math.min(val1,  val2)+  1;	  int    val2    =    Math.min(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	284	None	replace
220	[BUG]  [BUGGY]  int  val2  =  Math.min(0,  val2)+  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(0,  val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(0,  val2)+  1;	  int    val2    =    Math.min(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	284	None	replace
221	[BUG]  [BUGGY]  int  val2  =  Math.max(val2,  val1)+  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.max(val2,  val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.max(val2,  val1)+  1;	  int    val2    =    Math.min(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	284	None	replace
222	[BUG]  [BUGGY]  int  val2  =  Math.max(0,  val1)+  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.max(0,  val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.max(0,  val1)+  1;	  int    val2    =    Math.min(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	284	None	replace
223	[BUG]  [BUGGY]  int  val2  =  Math.max(0,  val2)+  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.max(0,  val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.max(0,  val2)+  1;	  int    val2    =    Math.min(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	284	None	replace
224	[BUG]  [BUGGY]  long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  >  expected	387	None	replace
225	[BUG]  [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	387	None	replace
226	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	387	None	replace
227	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  >  expected	387	None	replace
228	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	387	None	replace
229	[BUG]  [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0,  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	387	None	replace
230	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	387	None	replace
231	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val4);  [CE]  orphaned  case  [FE]        StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val4);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val4);	  safeMultiply(val1,    val2,    val1);    	non-compiled	[CE]  orphaned  case	164	None	replace
232	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val0);  [CE]  orphaned  case  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val0);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val0);	  safeMultiply(val1,    val2,    val1);    	non-compiled	[CE]  orphaned  case	164	None	replace
233	[BUG]  [BUGGY]  long  val2  =  getValue(val1,  val2)-  2;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1,  val2)-  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1,  val2)-  2;	  int    val2    =    getValue(val1,    val2)-    2;    	non-compiled	[CE]  orphaned  case	78	None	replace
234	[BUG]  [BUGGY]  int  val2  =  getValue(val2,  val1)-  2;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2,  val1)-  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2,  val1)-  2;	  int    val2    =    getValue(val1,    val2)-    2;    	non-compiled	[CE]  orphaned  case	78	None	replace
235	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)/  2L;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)/  2L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)/  2L;	  int    val2    =    getValue(val1,    val2)-    2;    	non-compiled	[CE]  orphaned  case	78	None	replace
236	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)-  3;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)-  3;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)-  3;	  int    val2    =    getValue(val1,    val2)-    2;    	non-compiled	[CE]  orphaned  case	78	None	replace
237	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)-  4;  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)-  4;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)-  4;	  int    val2    =    getValue(val1,    val2)-    2;    	non-compiled	[CE]  orphaned  case	78	None	replace
238	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [CE]  orphaned  case  [FE]              StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.doubleValue());    }    	non-compiled	[CE]  orphaned  case	335	None	replace
239	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  if(val2!=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [CE]  orphaned  case  [FE]                StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  if(val2!=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  if(val2!=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.doubleValue());    }    	non-compiled	[CE]  orphaned  case	335	None	replace
240	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  if(val2  ==  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [CE]  orphaned  case  [FE]                  StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  if(val2  ==  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  if(val2  ==  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.doubleValue());    }    	non-compiled	[CE]  orphaned  case	335	None	replace
241	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val2.doubleValue());  }  [CE]  orphaned  case  [FE]                    StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val2.doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val2.doubleValue());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.doubleValue());    }    	non-compiled	[CE]  orphaned  case	335	None	replace
242	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [CE]  orphaned  case  [FE]                      StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.doubleValue());    }    	non-compiled	[CE]  orphaned  case	335	None	replace
243	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  if(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [CE]  orphaned  case  [FE]                        StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  if(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  if(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.doubleValue());    }    	non-compiled	[CE]  orphaned  case	335	None	replace
244	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  getValue(val2)-  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)/  getValue(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  getValue(val2)-  1;	  int    val2    =    getValue(val1)/    getValue(val2);    	non-compiled	[CE]  orphaned  case	134	None	replace
245	[BUG]  [BUGGY]  int  val2  =  getValue(val2)/  getValue(val1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)/  getValue(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)/  getValue(val1);	  int    val2    =    getValue(val1)/    getValue(val2);    	non-compiled	[CE]  orphaned  case	134	None	replace
246	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  getValue(val2,  val1);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)/  getValue(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  getValue(val2,  val1);	  int    val2    =    getValue(val1)/    getValue(val2);    	non-compiled	[CE]  orphaned  case	134	None	replace
247	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  getValue(val2)+  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)/  getValue(val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  getValue(val2)+  1;	  int    val2    =    getValue(val1)/    getValue(val2);    	non-compiled	[CE]  orphaned  case	134	None	replace
248	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  getIndex(val2);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)/  getIndex(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  getIndex(val2);	  int    val2    =    getValue(val1)/    getValue(val2);    	non-compiled	[CE]  orphaned  case	134	None	replace
249	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  getRawValue(val2);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)/  getRawValue(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  getRawValue(val2);	  int    val2    =    getValue(val1)/    getValue(val2);    	non-compiled	[CE]  orphaned  case	134	None	replace
250	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.rint((  int)val2);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.rint((  int)val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(int)Math.rint((  int)val2);	  long    val2    =    val1    *    val2    +(int)Math.rint((    int)val1);    	non-compiled	[CE]  orphaned  case	306	None	replace
251	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(long)Math.rint((  long)val1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(long)Math.rint((  long)val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(long)Math.rint((  long)val1);	  long    val2    =    val1    *    val2    +(int)Math.rint((    int)val1);    	non-compiled	[CE]  orphaned  case	306	None	replace
252	[BUG]  [BUGGY]  long  val2  =(val1  *  val2)+(int)Math.rint((  int)val1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(val1  *  val2)+(int)Math.rint((  int)val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(val1  *  val2)+(int)Math.rint((  int)val1);	  long    val2    =    val1    *    val2    +(int)Math.rint((    int)val1);    	non-compiled	[CE]  orphaned  case	306	None	replace
253	[BUG]  [BUGGY]  long  val2  =  val1,  val2  +(int)Math.rint((  int)val1);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2  +(int)Math.rint((  int)val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2  +(int)Math.rint((  int)val1);	  long    val2    =    val1    *    val2    +(int)Math.rint((    int)val1);    	non-compiled	[CE]  ';'  expected	306	None	replace
254	[BUG]  [BUGGY]  int  val2  =  val1  *  val2  +(int)Math.rint((  int)val1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1  *  val2  +(int)Math.rint((  int)val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1  *  val2  +(int)Math.rint((  int)val1);	  long    val2    =    val1    *    val2    +(int)Math.rint((    int)val1);    	non-compiled	[CE]  orphaned  case	306	None	replace
255	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.rint((  int)val1,  val2);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.rint((  int)val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(int)Math.rint((  int)val1,  val2);	  long    val2    =    val1    *    val2    +(int)Math.rint((    int)val1);    	non-compiled	[CE]  orphaned  case	306	None	replace
256	[BUG]  [BUGGY]  long  val2  =  val1.length  *  val2  +(int)Math.rint((  int)val1);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length  *  val2  +(int)Math.rint((  int)val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length  *  val2  +(int)Math.rint((  int)val1);	  long    val2    =    val1    *    val2    +(int)Math.rint((    int)val1);    	non-compiled	[CE]  orphaned  case	306	None	replace
257	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.rint((  int)val1)-  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.rint((  int)val1)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(int)Math.rint((  int)val1)-  1;	  long    val2    =    val1    *    val2    +(int)Math.rint((    int)val1);    	non-compiled	[CE]  orphaned  case	306	None	replace
258	[BUG]  [BUGGY]  SafeMutator.safeMultiply(val1,  val2,  val1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMutator.safeMultiply(val1,  val2,  val1);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeMultiply(val1,  val2,  val1);	  SafeMutator.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	143	None	replace
259	[BUG]  [BUGGY]  SafeMutator.safeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMutator.safeMultiply(val2,  val1);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeMultiply(val2,  val1);	  SafeMutator.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	143	None	replace
260	[BUG]  [BUGGY]  SafeMutator.safeMultiply(val1,  val2,  val2);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMutator.safeMultiply(val1,  val2,  val2);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeMultiply(val1,  val2,  val2);	  SafeMutator.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	143	None	replace
261	[BUG]  [BUGGY]  safeMutator.safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMutator.safeMultiply(val1,  val2);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMutator.safeMultiply(val1,  val2);	  SafeMutator.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	143	None	replace
262	[BUG]  [BUGGY]  safeMutator.safeMultiply(val1,  val2,  val1);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMutator.safeMultiply(val1,  val2,  val1);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMutator.safeMultiply(val1,  val2,  val1);	  SafeMutator.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	143	None	replace
263	[BUG]  [BUGGY]  long  val1  =  0;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	367	None	replace
264	[BUG]  [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	367	None	replace
265	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +=  1)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +=  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  +=  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	131	None	replace
266	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  +=  2)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  +=  2)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  +=  2)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	131	None	replace
267	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +=  2)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +=  2)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  +=  2)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	131	None	replace
268	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  1)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  +=  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	131	None	replace
269	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +=  1)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +=  1)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  +=  1)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	131	None	replace
270	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2  +=  1)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2  +=  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  <  val2.length;  val2  +=  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	131	None	replace
271	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2  +=  1)  {  safeMultiply(val1,  val2);  }  [CE]  >  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2  +=  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  val2  +=  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  >  expected	131	None	replace
272	[BUG]  [BUGGY]  if(val1!=  val2  ||  val1  ==  val2)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1!=  val2  ||  val1  ==  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1!=  val2  ||  val1  ==  val2)  {	  if(val2!=    val1)    {    	non-compiled	[CE]  orphaned  case	192	None	replace
273	[BUG]  [BUGGY]  if(val1!=  val2  ||  val1!=  val2)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1!=  val2  ||  val1!=  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1!=  val2  ||  val1!=  val2)  {	  if(val2!=    val1)    {    	non-compiled	[CE]  orphaned  case	192	None	replace
274	[BUG]  [BUGGY]  if(val1!=  val2  ||  val1  >=  val2)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1!=  val2  ||  val1  >=  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1!=  val2  ||  val1  >=  val2)  {	  if(val2!=    val1)    {    	non-compiled	[CE]  orphaned  case	192	None	replace
275	[BUG]  [BUGGY]  int  val2  =  val1  *  val2  +  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1  *  val2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1  *  val2  +  1;	  int    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	114	None	replace
276	[BUG]  [BUGGY]  int  val2  =  val1  /  val2;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1  /  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1  /  val2;	  int    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	114	None	replace
277	[BUG]  [BUGGY]  int  val2  =  val1,  val2;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1,  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1,  val2;	  int    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	114	None	replace
278	[BUG]  [BUGGY]  int  val2  =  val1  *  val2  +  1L;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1  *  val2  +  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1  *  val2  +  1L;	  int    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	114	None	replace
279	[BUG]  [BUGGY]  int  val2  =  val1  +  val2;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1  +  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1  +  val2;	  int    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	114	None	replace
280	[BUG]  [BUGGY]  int  val2  =  val1  *  val2  +  2;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1  *  val2  +  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1  *  val2  +  2;	  int    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	114	None	replace
281	[BUG]  [BUGGY]  int  val2  =  val1.length  *  val2;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1.length  *  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1.length  *  val2;	  int    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	114	None	replace
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
283	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
284	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
285	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
286	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
287	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
288	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0	  	non-compiled	[CE]  ';'  expected	247	None	add
289	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
290	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
291	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	247	None	add
292	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
293	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
294	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L	  	non-compiled	[CE]  ';'  expected	247	None	add
295	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	247	None	add
296	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
297	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
298	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
299	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
300	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
301	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
302	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	207	None	add
303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
304	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
306	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
307	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
308	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
309	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
310	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
311	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
312	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
314	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
315	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
316	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
317	[BUG]  [BUGGY]  Safely(val1,  val2,  val1)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Safely(val1,  val2,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Safely(val1,  val2,  val1)  {	  Safely(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	315	None	replace
318	[BUG]  [BUGGY]  Safely(val1,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Safely(val1,  val2);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Safely(val1,  val2);	  Safely(val1,    val2)    {    	non-compiled	[CE]  orphaned  case	315	None	replace
319	[BUG]  [BUGGY]  Safely(val2,  val1)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Safely(val2,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Safely(val2,  val1)  {	  Safely(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	315	None	replace
320	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)  {	  Safely(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	315	None	replace
321	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1)  {	  Safely(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	315	None	replace
322	[BUG]  [BUGGY]  Safely(val1,  val2)  ==  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Safely(val1,  val2)  ==  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Safely(val1,  val2)  ==	  Safely(val1,    val2)    {    	non-compiled	[CE]  illegal  start  of  expression	315	None	replace
323	[BUG]  [BUGGY]  Safely(val1,  val2,  0)  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Safely(val1,  val2,  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Safely(val1,  val2,  0)  {	  Safely(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	315	None	replace
324	[BUG]  [BUGGY]  switch(val1,  val2).restrictNullOrUndefined().restrictByNotNullOrUndefined();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictNullOrUndefined().restrictByNotNullOrUndefined();  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictNullOrUndefined().restrictByNotNullOrUndefined();	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ')'  expected	375	None	replace
325	[BUG]  [BUGGY]  switch(val2,  val1).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val2,  val1).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val2,  val1).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ')'  expected	375	None	replace
326	[BUG]  [BUGGY]  Switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	375	None	replace
327	[BUG]  [BUGGY]  switch(val1,  val2).restrictNullOrUndefined().restrictNullOrUndefined();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictNullOrUndefined().restrictNullOrUndefined();  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictNullOrUndefined().restrictNullOrUndefined();	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ')'  expected	375	None	replace
328	[BUG]  [BUGGY]  switch(val1,  val1).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val1).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val1).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ')'  expected	375	None	replace
329	[BUG]  [BUGGY]  switch(val1,  val2).restrictByNullOrUndefined().restrictByNullOrUndefined();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictByNullOrUndefined().restrictByNullOrUndefined();  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictByNullOrUndefined().restrictByNullOrUndefined();	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ')'  expected	375	None	replace
330	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/(int)Math.floor(val2)+  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/(int)Math.floor(val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/(int)Math.floor(val2)+  1;	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2)+    1;    	non-compiled	[CE]  orphaned  case	261	None	replace
331	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)-(long)Math.floor(val2)+  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1)-(long)Math.floor(val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)-(long)Math.floor(val2)+  1;	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2)+    1;    	non-compiled	[CE]  orphaned  case	261	None	replace
332	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2)/  2;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2)/  2;	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2)+    1;    	non-compiled	[CE]  orphaned  case	261	None	replace
333	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)-(float)Math.floor(val2)+  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1)-(float)Math.floor(val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)-(float)Math.floor(val2)+  1;	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2)+    1;    	non-compiled	[CE]  orphaned  case	261	None	replace
334	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2)/  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2)/  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2)/  1;	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2)+    1;    	non-compiled	[CE]  orphaned  case	261	None	replace
335	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)-(int)Math.floor(val1)+  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2)-(int)Math.floor(val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)-(int)Math.floor(val1)+  1;	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2)+    1;    	non-compiled	[CE]  orphaned  case	261	None	replace
336	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val1)-(char)Math.floor(val2)+  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.floor(val1)-(char)Math.floor(val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val1)-(char)Math.floor(val2)+  1;	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2)+    1;    	non-compiled	[CE]  orphaned  case	261	None	replace
337	[BUG]  [BUGGY]  while(val1  <  val2)  {  if(val2  >  val1)  {  return  0L;  }  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  if(val2  >  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  if(val2  >  val1)  {  return  0L;  }	  if(val1    >    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	277	None	replace
338	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  0;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2)  {  return  0;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  return  0;  }	  if(val1    >    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	277	None	replace
339	[BUG]  [BUGGY]  if(val1  <  =  val2)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  =  val2)  {  return  0;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  =  val2)  {  return  0;  }	  if(val1    <    val2)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	226	None	replace
340	[BUG]  [BUGGY]  if(val2  <  val1)  {  return  0;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  <  val1)  {  return  0;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  <  val1)  {  return  0;  }	  if(val1    <    val2)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	226	None	replace
341	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  SafeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  SafeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  SafeMultiply(val2,  val1);	          safeMultiply(val1,    val2);    SafeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	84	None	replace
342	[BUG]  [BUGGY]  safeMultiply(val2,  val1);  SafeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]              StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2,  val1);  SafeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val1);  SafeMultiply(val1,  val2);	          safeMultiply(val1,    val2);    SafeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	84	None	replace
343	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1);  SafeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1);  SafeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1);  SafeMultiply(val1,  val2);	          safeMultiply(val1,    val2);    SafeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	84	None	replace
344	[BUG]  [BUGGY]  if(val2  <  val1)  {  return  0L;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  <  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  <  val1)  {  return  0L;  }	  if(val1    <    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	393	None	replace
345	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  return  -1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  return  -1;  }	  if(val1    <    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	393	None	replace
346	[BUG]  [BUGGY]  ||(val1  <  val2))  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val1  <  val2))  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1  <  val2))  {  return  0L;  }	  if(val1    <    val2)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	393	None	replace
347	[BUG]  [BUGGY]  int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	321	None	replace
348	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	321	None	replace
349	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	321	None	replace
350	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >>  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >>  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >>  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	321	None	replace
351	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
352	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	53	None	add
353	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	53	1	add
354	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	53	1	add
355	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	53	1	add
356	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	53	1	add
357	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	53	None	add
358	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  [CE]  illegal  start  of  expression  [FE]              ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
359	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  Arithm  [CE]  '('  or  '['  expected  [FE]                ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  Arithm  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  Arithm	  	non-compiled	[CE]  '('  or  '['  expected	53	None	add
360	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]                  ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	53	None	add
361	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]                    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
362	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)/  val1  *  val2;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2)/  val1  *  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)/  val1  *  val2;	  int    val2    =(int)Math.floor(val1)/    val2    *    val1;    	non-compiled	[CE]  orphaned  case	310	None	replace
363	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  *  val2  +  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  *  val2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2  *  val2  +  1;	  int    val2    =(int)Math.floor(val1)/    val2    *    val1;    	non-compiled	[CE]  orphaned  case	310	None	replace
364	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)/  val2  *  val1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1)/  val2  *  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)/  val2  *  val1;	  int    val2    =(int)Math.floor(val1)/    val2    *    val1;    	non-compiled	[CE]  orphaned  case	310	None	replace
365	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  +  val1  *  val2;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  +  val1  *  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2  +  val1  *  val2;	  int    val2    =(int)Math.floor(val1)/    val2    *    val1;    	non-compiled	[CE]  orphaned  case	310	None	replace
366	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val1)/  val2  *  val1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val1)/  val2  *  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val1)/  val2  *  val1;	  int    val2    =(int)Math.floor(val1)/    val2    *    val1;    	non-compiled	[CE]  orphaned  case	310	None	replace
367	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1,  val2)-(long)Math.floor(val2);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1,  val2)-(long)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1,  val2)-(long)Math.floor(val2);	  int    val2    =(int)Math.floor(val1,    val2)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	235	None	replace
368	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/(int)Math.floor(val2);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/(int)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)/(int)Math.floor(val2);	  int    val2    =(int)Math.floor(val1,    val2)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	235	None	replace
369	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1,  val2)-(float)Math.floor(val2);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1,  val2)-(float)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1,  val2)-(float)Math.floor(val2);	  int    val2    =(int)Math.floor(val1,    val2)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	235	None	replace
370	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/(int)Math.floor(val1);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/(int)Math.floor(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)/(int)Math.floor(val1);	  int    val2    =(int)Math.floor(val1,    val2)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	235	None	replace
371	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val1,  val2)-(char)Math.floor(val2);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.floor(val1,  val2)-(char)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val1,  val2)-(char)Math.floor(val2);	  int    val2    =(int)Math.floor(val1,    val2)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	235	None	replace
372	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1,  val2)-(double)Math.floor(val2);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1,  val2)-(double)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1,  val2)-(double)Math.floor(val2);	  int    val2    =(int)Math.floor(val1,    val2)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	235	None	replace
373	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2,  val1)-(int)Math.floor(val2);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2,  val1)-(int)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2,  val1)-(int)Math.floor(val2);	  int    val2    =(int)Math.floor(val1,    val2)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	235	None	replace
374	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-(int)Math.floor(val1);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-(int)Math.floor(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)-(int)Math.floor(val1);	  int    val2    =(int)Math.floor(val1,    val2)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	235	None	replace
375	[BUG]  [BUGGY]  if(val2  <  val1  ||  val2  >=  val1)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  <  val1  ||  val2  >=  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  <  val1  ||  val2  >=  val1)  {	  if(val1    <    val2    ||    val1    >=    val2)    {    	non-compiled	[CE]  orphaned  case	71	None	replace
376	[BUG]  [BUGGY]  if(val1  >=  val2  ||  val1  >=  val1)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2  ||  val1  >=  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2  ||  val1  >=  val1)  {	  if(val1    <    val2    ||    val1    >=    val2)    {    	non-compiled	[CE]  orphaned  case	71	None	replace
377	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  >=  val1)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  >=  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  >=  val1)  {	  if(val1    <    val2    ||    val1    >=    val2)    {    	non-compiled	[CE]  orphaned  case	71	None	replace
378	[BUG]  [BUGGY]  if(val1  >  val2  ||  val1  >=  val2)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2  ||  val1  >=  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2  ||  val1  >=  val2)  {	  if(val1    <    val2    ||    val1    >=    val2)    {    	non-compiled	[CE]  orphaned  case	71	None	replace
379	[BUG]  [BUGGY]  if(val1  <  =  val2  ||  val1  >=  val2)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  =  val2  ||  val1  >=  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  =  val2  ||  val1  >=  val2)  {	  if(val1    <    val2    ||    val1    >=    val2)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
380	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  ==  val2)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  ==  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  ==  val2)  {	  if(val1    <    val2    ||    val1    >=    val2)    {    	non-compiled	[CE]  orphaned  case	71	None	replace
381	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
382	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
383	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
384	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
385	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0	  	non-compiled	[CE]  ';'  expected	238	None	add
386	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
387	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
388	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	238	None	add
389	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	238	None	add
390	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	238	None	add
391	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	238	None	add
392	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L	  	non-compiled	[CE]  ';'  expected	238	None	add
393	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	238	None	add
394	[BUG]  [BUGGY]  while(val1  <  =  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  =  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  =  val2)  {  throw  new  ArithmeticException( " ");  }	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
395	[BUG]  [BUGGY]  while(val2  <  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val2  <  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val2  <  val1)  {  throw  new  ArithmeticException( " ");  }	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	15	None	replace
396	[BUG]  [BUGGY]  while(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	15	None	replace
397	[BUG]  [BUGGY]  while(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	15	None	replace
398	[BUG]  [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]                  ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	15	None	replace
399	[BUG]  [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long  value ");  }  [CE]  orphaned  case  [FE]                    ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long  value ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long  value ");  }	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	15	None	replace
400	[BUG]  [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [CE]  orphaned  case  [FE]                      ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	15	None	replace
401	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  SafeMultiplication.safeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  SafeMultiplication.safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  SafeMultiplication.safeMultiply(val2,  val1);	          safeMultiply(val1,    val2);    SafeMultiplication.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	83	None	replace
402	[BUG]  [BUGGY]  safeMultiply(val2,  val1);  SafeMultiplication.safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2,  val1);  SafeMultiplication.safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val1);  SafeMultiplication.safeMultiply(val1,  val2);	          safeMultiply(val1,    val2);    SafeMultiplication.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	83	None	replace
403	[BUG]  [BUGGY]  SafeMultiplication.safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]              StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiplication.safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiplication.safeMultiply(val1,  val2);	          safeMultiply(val1,    val2);    SafeMultiplication.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	83	None	replace
404	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  2  +  1;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  2  +  1;	  int    val2    =(int)Math.floor(val1)/    2;    	non-compiled	[CE]  orphaned  case	66	None	replace
405	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)/  2;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)/  2;	  int    val2    =(int)Math.floor(val1)/    2;    	non-compiled	[CE]  orphaned  case	66	None	replace
406	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)/  2;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)/  2;	  int    val2    =(int)Math.floor(val1)/    2;    	non-compiled	[CE]  orphaned  case	66	None	replace
407	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)/  2;  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)/  2;	  int    val2    =(int)Math.floor(val1)/    2;    	non-compiled	[CE]  orphaned  case	66	None	replace
408	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  4;  [CE]  orphaned  case  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  4;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  4;	  int    val2    =(int)Math.floor(val1)/    2;    	non-compiled	[CE]  orphaned  case	66	None	replace
409	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)/  2  +  1;  [CE]  orphaned  case  [FE]                                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2)/  2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)/  2  +  1;	  int    val2    =(int)Math.floor(val1)/    2;    	non-compiled	[CE]  orphaned  case	66	None	replace
410	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val1)/  2;  [CE]  orphaned  case  [FE]                                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val1)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val1)/  2;	  int    val2    =(int)Math.floor(val1)/    2;    	non-compiled	[CE]  orphaned  case	66	None	replace
411	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  3;  [CE]  orphaned  case  [FE]                                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  3;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  3;	  int    val2    =(int)Math.floor(val1)/    2;    	non-compiled	[CE]  orphaned  case	66	None	replace
412	[BUG]  [BUGGY]  safeMultiply(val1,  int  val2);  [CE]  '.class'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  int  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  int  val2);	          if(val1    >=    val2)    {    return    val2;    }    if(val2    >=    val1)    {    return    val2;    }    	non-compiled	[CE]  '.class'  expected	212	None	replace
413	[BUG]  [BUGGY]  while(val1  <  val2)  {  val2  =  val1;  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  val2  =  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  val2  =  val1;	          if(val1    >=    val2)    {    return    val2;    }    if(val2    >=    val1)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	212	None	replace
414	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  {  ';'  [CE]  ';'  expected  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)  {  ';'  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)  {  ';'	  safeMultiply(val1,    val2)    	non-compiled	[CE]  ';'  expected	296	None	replace
415	[BUG]  [BUGGY]  if(val2  ==  val1  ||  val2  ==  val1)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  val1  ||  val2  ==  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  val1  ||  val2  ==  val1)  {	  if(val1    ==    val2    ||    val1    ==    val2)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
416	[BUG]  [BUGGY]  if(val1  >=  val2  ||  val1  ==  val1)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2  ||  val1  ==  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2  ||  val1  ==  val1)  {	  if(val1    ==    val2    ||    val1    ==    val2)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
417	[BUG]  [BUGGY]  if(val1  ==  val2  ||  val1!=  val2)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2  ||  val1!=  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2  ||  val1!=  val2)  {	  if(val1    ==    val2    ||    val1    ==    val2)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
418	[BUG]  [BUGGY]  if(val1!=  val2  ||  val1  ==  val1)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1!=  val2  ||  val1  ==  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1!=  val2  ||  val1  ==  val1)  {	  if(val1    ==    val2    ||    val1    ==    val2)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
419	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  *  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  *  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2  *  1;	  int    val2    =(int)Math.floor(val1)/    val2    +    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
420	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)/  val1  +  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2)/  val1  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)/  val1  +  1;	  int    val2    =(int)Math.floor(val1)/    val2    +    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
421	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)/  val2  +  1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1)/  val2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)/  val2  +  1;	  int    val2    =(int)Math.floor(val1)/    val2    +    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
422	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  *  1  +  1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  *  1  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2  *  1  +  1;	  int    val2    =(int)Math.floor(val1)/    val2    +    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
423	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val1)/  val2  +  1;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val1)/  val2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val1)/  val2  +  1;	  int    val2    =(int)Math.floor(val1)/    val2    +    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
424	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  +  1L;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  +  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2  +  1L;	  int    val2    =(int)Math.floor(val1)/    val2    +    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
425	[BUG]  [BUGGY]  long  val2  =  0L;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0L;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0L;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	22	None	replace
426	[BUG]  [BUGGY]  long  val2  =  1;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  1;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  1;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	22	None	replace
427	[BUG]  [BUGGY]  long  val2  =  val1;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	22	None	replace
428	[BUG]  [BUGGY]  short  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	22	None	replace
429	[BUG]  [BUGGY]  long  val2  =  val1;  val  <  val2.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1;  val  <  val2.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1;  val  <  val2.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	22	None	replace
430	[BUG]  [BUGGY]  long  val2  =  0L;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0L;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0L;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	22	None	replace
431	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    >>    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	27	None	replace
432	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    >>    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	27	None	replace
433	[BUG]  [BUGGY]  switch(val1,  val2);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2);	  switch(val1,    val2).restrictByNotNullOrUndefined();    	non-compiled	[CE]  ')'  expected	374	None	replace
434	[BUG]  [BUGGY]  switch(val1,  val2).restrictNullOrUndefined();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictNullOrUndefined();  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictNullOrUndefined();	  switch(val1,    val2).restrictByNotNullOrUndefined();    	non-compiled	[CE]  ')'  expected	374	None	replace
435	[BUG]  [BUGGY]  switch(val2,  val1).restrictByNotNullOrUndefined();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val2,  val1).restrictByNotNullOrUndefined();  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val2,  val1).restrictByNotNullOrUndefined();	  switch(val1,    val2).restrictByNotNullOrUndefined();    	non-compiled	[CE]  ')'  expected	374	None	replace
436	[BUG]  [BUGGY]  switch(val1,  val2).restrictStrictByNotNullOrUndefined();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictStrictByNotNullOrUndefined();  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictStrictByNotNullOrUndefined();	  switch(val1,    val2).restrictByNotNullOrUndefined();    	non-compiled	[CE]  ')'  expected	374	None	replace
437	[BUG]  [BUGGY]  switch(val1)restrictByNotNullOrUndefined();  [CE]  '{'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1)restrictByNotNullOrUndefined();  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1)restrictByNotNullOrUndefined();	  switch(val1,    val2).restrictByNotNullOrUndefined();    	non-compiled	[CE]  '{'  expected	374	None	replace
438	[BUG]  [BUGGY]  Switch(val1,  val2).restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2).restrictByNotNullOrUndefined();  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2).restrictByNotNullOrUndefined();	  switch(val1,    val2).restrictByNotNullOrUndefined();    	non-compiled	[CE]  orphaned  case	374	None	replace
439	[BUG]  [BUGGY]  switch(val1,  val2).restrictByNotEmpty();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictByNotEmpty();  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictByNotEmpty();	  switch(val1,    val2).restrictByNotNullOrUndefined();    	non-compiled	[CE]  ')'  expected	374	None	replace
440	[BUG]  [BUGGY]  long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	7	None	replace
441	[BUG]  [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
442	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val1)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val1)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  ++val1)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
443	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  [CE]  orphaned  case  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);	  throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  orphaned  case	17	None	replace
444	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2);  [CE]  orphaned  case  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2);	  throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  orphaned  case	17	None	replace
445	[BUG]  [BUGGY]  Throwables.throw  new  ArithmeticException( " ");  [CE]  <identifier>  expected  [FE]                  ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Throwables.throw  new  ArithmeticException( " ");  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Throwables.throw  new  ArithmeticException( " ");	  throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  <identifier>  expected	17	None	replace
446	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: ");  [CE]  orphaned  case  [FE]                    ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: ");  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	throw  new  ArithmeticException( "Multiplication  overflows  a  long: ");	  throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  orphaned  case	17	None	replace
447	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val3,  val1);  [CE]  orphaned  case  [FE]              StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val3,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val3,  val1);	  safeMultiply(val1,    val2,    val3);    	non-compiled	[CE]  orphaned  case	167	None	replace
448	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  2  +  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)/  2  +  1;	  int    val2    =(int)Math.floor(val1,    val2)/    2;    	non-compiled	[CE]  orphaned  case	103	None	replace
449	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1,  val2)/  2;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1,  val2)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1,  val2)/  2;	  int    val2    =(int)Math.floor(val1,    val2)/    2;    	non-compiled	[CE]  orphaned  case	103	None	replace
450	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1,  val2)/  2;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1,  val2)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1,  val2)/  2;	  int    val2    =(int)Math.floor(val1,    val2)/    2;    	non-compiled	[CE]  orphaned  case	103	None	replace
451	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2,  val1)/  2;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2,  val1)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2,  val1)/  2;	  int    val2    =(int)Math.floor(val1,    val2)/    2;    	non-compiled	[CE]  orphaned  case	103	None	replace
452	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)/  1;	  int    val2    =(int)Math.floor(val1,    val2)/    2;    	non-compiled	[CE]  orphaned  case	103	None	replace
453	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  2L;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  2L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)/  2L;	  int    val2    =(int)Math.floor(val1,    val2)/    2;    	non-compiled	[CE]  orphaned  case	103	None	replace
454	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1,    val2.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	329	None	replace
455	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  >=  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  >=  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2  >=  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1,    val2.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	329	None	replace
456	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1,    val2.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	329	None	replace
457	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2!=  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2!=  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2!=  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1,    val2.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	329	None	replace
458	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1,    val2.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	329	None	replace
459	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1,  val2  >=  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val1,  val2  >=  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val1,  val2  >=  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1,    val2.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	329	None	replace
460	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  ==  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  ==  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2  ==  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1,    val2.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	329	None	replace
461	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  >=  val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  >=  val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2  >=  val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1,    val2.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	329	None	replace
462	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >  val1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >  val1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  >  val1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    val1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	274	None	replace
463	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +=  val1)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +=  val1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  +=  val1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    val1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	274	None	replace
464	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2  +=  val1)  {  safeMultiply(val1,  val2);  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2  +=  val1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  val2  +=  val1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    val1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  >  expected	274	None	replace
465	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +=  val2)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +=  val2)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  +=  val2)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    val1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	274	None	replace
466	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  +=  val1)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  +=  val1)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  +=  val1)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    val1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	274	None	replace
467	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +=  val1)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +=  val1)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  +=  val1)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    val1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	274	None	replace
468	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  *=  val1)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  *=  val1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  *=  val1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    val1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	274	None	replace
469	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2  +=  val1)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2  +=  val1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  <  val2.length;  val2  +=  val1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    val1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	274	None	replace
470	[BUG]  [BUGGY]  long  val2  =  val1,  val2  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2  +  1;	  long    val2    =    val1,    val2;    	non-compiled	[CE]  ';'  expected	116	None	replace
471	[BUG]  [BUGGY]  long  val2  =  val1,  val2);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2);	  long    val2    =    val1,    val2;    	non-compiled	[CE]  ';'  expected	116	None	replace
472	[BUG]  [BUGGY]  long  val2  =  val1,  val2  *  val2;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2  *  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2  *  val2;	  long    val2    =    val1,    val2;    	non-compiled	[CE]  ';'  expected	116	None	replace
473	[BUG]  [BUGGY]  long  val2  =  val1,  val2,  val1);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2,  val1);	  long    val2    =    val1,    val2;    	non-compiled	[CE]  ';'  expected	116	None	replace
474	[BUG]  [BUGGY]  long  val2  =  val1,  val2  -  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2  -  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2  -  1;	  long    val2    =    val1,    val2;    	non-compiled	[CE]  ';'  expected	116	None	replace
475	[BUG]  [BUGGY]  long  val2  =  val1,  val2,  val1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2,  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2,  val1;	  long    val2    =    val1,    val2;    	non-compiled	[CE]  orphaned  case	116	None	replace
476	[BUG]  [BUGGY]  long  val2  =  val1,  val2,  val2);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2,  val2);	  long    val2    =    val1,    val2;    	non-compiled	[CE]  ';'  expected	116	None	replace
477	[BUG]  [BUGGY]  SafeMutator.safeMultiply(val2);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMutator.safeMultiply(val2);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeMultiply(val2);	  SafeMutator.safeMultiply(val1);    	non-compiled	[CE]  orphaned  case	216	None	replace
478	[BUG]  [BUGGY]  safeMutator.safeMultiply(val1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMutator.safeMultiply(val1);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMutator.safeMultiply(val1);	  SafeMutator.safeMultiply(val1);    	non-compiled	[CE]  orphaned  case	216	None	replace
479	[BUG]  [BUGGY]  int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	318	None	replace
480	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	318	None	replace
481	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	318	None	replace
482	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ".);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ".);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ".);  }	  for(long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	318	None	replace
483	[BUG]  [BUGGY]  int  val2  =  Math.min(0,  val2,  val1);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(0,  val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(0,  val2,  val1);	  int    val2    =    Math.min(0,    val1);    	non-compiled	[CE]  orphaned  case	42	None	replace
484	[BUG]  [BUGGY]  int  val2  =  Math.max(0,  val2);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.max(0,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.max(0,  val2);	  int    val2    =    Math.min(0,    val1);    	non-compiled	[CE]  orphaned  case	42	None	replace
485	[BUG]  [BUGGY]  long  val2  =  Math.min(0,  val1);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  Math.min(0,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  Math.min(0,  val1);	  int    val2    =    Math.min(0,    val1);    	non-compiled	[CE]  orphaned  case	42	None	replace
486	[BUG]  [BUGGY]  int  val2  =  Math.min(0,  val1,  val2);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(0,  val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(0,  val1,  val2);	  int    val2    =    Math.min(0,    val1);    	non-compiled	[CE]  orphaned  case	42	None	replace
487	[BUG]  [BUGGY]  int  val2  =  Math.min(1,  val2);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(1,  val2);	  int    val2    =    Math.min(0,    val1);    	non-compiled	[CE]  orphaned  case	42	None	replace
488	[BUG]  [BUGGY]  val2  =  Math.min(0,  val2);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  val2  =  Math.min(0,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	val2  =  Math.min(0,  val2);	  int    val2    =    Math.min(0,    val1);    	non-compiled	[CE]  orphaned  case	42	None	replace
489	[BUG]  [BUGGY]  int  val2  =  Math.min(0,  val1)-  1;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(0,  val1)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(0,  val1)-  1;	  int    val2    =    Math.min(0,    val1);    	non-compiled	[CE]  orphaned  case	42	None	replace
490	[BUG]  [BUGGY]  int  val2  =  val1.length();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1.length();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1.length();	  long    val2    =    val1.length();    	non-compiled	[CE]  orphaned  case	154	None	replace
491	[BUG]  [BUGGY]  long  val2  =  val1.length()  +  1;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length()  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length()  +  1;	  long    val2    =    val1.length();    	non-compiled	[CE]  orphaned  case	154	None	replace
492	[BUG]  [BUGGY]  long  val2  =  val2.length();  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val2.length();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val2.length();	  long    val2    =    val1.length();    	non-compiled	[CE]  orphaned  case	154	None	replace
493	[BUG]  [BUGGY]  long  val2  =  val1.length()  -  1;  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length()  -  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length()  -  1;	  long    val2    =    val1.length();    	non-compiled	[CE]  orphaned  case	154	None	replace
494	[BUG]  [BUGGY]  long  val2  =  val1.length()  +  2;  [CE]  orphaned  case  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length()  +  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length()  +  2;	  long    val2    =    val1.length();    	non-compiled	[CE]  orphaned  case	154	None	replace
495	[BUG]  [BUGGY]  long  val2  =  val1.length()  *  val2.length();  [CE]  orphaned  case  [FE]                                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length()  *  val2.length();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length()  *  val2.length();	  long    val2    =    val1.length();    	non-compiled	[CE]  orphaned  case	154	None	replace
496	[BUG]  [BUGGY]  long  val2  =  val1  *  val2.length();  [CE]  orphaned  case  [FE]                                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2.length();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2.length();	  long    val2    =    val1.length();    	non-compiled	[CE]  orphaned  case	154	None	replace
497	[BUG]  [BUGGY]  long  val2  =  val1.length()  *  2;  [CE]  orphaned  case  [FE]                                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length()  *  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length()  *  2;	  long    val2    =    val1.length();    	non-compiled	[CE]  orphaned  case	154	None	replace
498	[BUG]  [BUGGY]  while(val1  <  val2)  {  if(val2  >=  val1)  {  return  0L;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  if(val2  >=  val1)  {  return  0L;  }	          if(val1    >=    val2)    {    return    0L;    }    if(val1    >>    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	240	None	replace
499	[BUG]  [BUGGY]  while(val1  >=  val2)  {  if(val2  >=  val1)  {  return  0L;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  >=  val2)  {  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  >=  val2)  {  if(val2  >=  val1)  {  return  0L;  }	          if(val1    >=    val2)    {    return    0L;    }    if(val1    >>    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	240	None	replace
500	[BUG]  [BUGGY]  while(val1  >=  val2)  {  if(val2!=  val1)  {  return  0L;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  >=  val2)  {  if(val2!=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  >=  val2)  {  if(val2!=  val1)  {  return  0L;  }	          if(val1    >=    val2)    {    return    0L;    }    if(val1    >>    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	240	None	replace
501	[BUG]  [BUGGY]  while(val1  <  val2)  {  if(val2!=  val1)  {  return  0L;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  if(val2!=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  if(val2!=  val1)  {  return  0L;  }	          if(val1    >=    val2)    {    return    0L;    }    if(val1    >>    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	240	None	replace
502	[BUG]  [BUGGY]  while(val1  <  val2)  {  if(val2  >=  val1)return  0L;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  if(val2  >=  val1)return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  if(val2  >=  val1)return  0L;  }	          if(val1    >=    val2)    {    return    0L;    }    if(val1    >>    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	240	None	replace
503	[BUG]  [BUGGY]  while(val1  <  val2)  {  if(val2  ==  val1)  {  return  0L;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  if(val2  ==  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  if(val2  ==  val1)  {  return  0L;  }	  if(val1    ==    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	224	None	replace
504	[BUG]  [BUGGY]  if(val2  ==  val1)  {  return  0L;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  val1)  {  return  0L;  }	  if(val1    ==    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	224	None	replace
505	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  return  -1;  }	  if(val1    ==    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	224	None	replace
506	[BUG]  [BUGGY]  long  val2  =  getValue(val1,  val2)-  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1,  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1,  val2)-  1;	  long    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	73	None	replace
507	[BUG]  [BUGGY]  long  val2  =  getValue(val1,  val2)+  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1,  val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1,  val2)+  1;	  long    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	73	None	replace
508	[BUG]  [BUGGY]  long  val2  =  getValue(val2,  val1);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val2,  val1);	  long    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	73	None	replace
509	[BUG]  [BUGGY]  long  val2  =  getValue(val1,  val2)/  2;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1,  val2)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1,  val2)/  2;	  long    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	73	None	replace
510	[BUG]  [BUGGY]  long  val2  =  getLongValue(val1,  val2);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getLongValue(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getLongValue(val1,  val2);	  long    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	73	None	replace
511	[BUG]  [BUGGY]  long  val2  =  getValue(val1,  val1);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1,  val1);	  long    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	73	None	replace
512	[BUG]  [BUGGY]  long  val2  =  val1.doubleValue()  +  val2.doubleValue();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.doubleValue()  +  val2.doubleValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.doubleValue()  +  val2.doubleValue();	  long    val2    =    val1.longValue()    +    val2.longValue();    	non-compiled	[CE]  orphaned  case	152	None	replace
513	[BUG]  [BUGGY]  long  val2  =  val2.longValue()  +  val1.longValue();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val2.longValue()  +  val1.longValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val2.longValue()  +  val1.longValue();	  long    val2    =    val1.longValue()    +    val2.longValue();    	non-compiled	[CE]  orphaned  case	152	None	replace
514	[BUG]  [BUGGY]  int  val2  =  val1.longValue()  +  val2.longValue();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1.longValue()  +  val2.longValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1.longValue()  +  val2.longValue();	  long    val2    =    val1.longValue()    +    val2.longValue();    	non-compiled	[CE]  orphaned  case	152	None	replace
515	[BUG]  [BUGGY]  long  val2  =  val1.doubleValue()  *  val2.doubleValue();  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.doubleValue()  *  val2.doubleValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.doubleValue()  *  val2.doubleValue();	  long    val2    =    val1.longValue()    +    val2.longValue();    	non-compiled	[CE]  orphaned  case	152	None	replace
516	[BUG]  [BUGGY]  long  val2  =  val1.intValue()  +  val2.intValue();  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.intValue()  +  val2.intValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.intValue()  +  val2.intValue();	  long    val2    =    val1.longValue()    +    val2.longValue();    	non-compiled	[CE]  orphaned  case	152	None	replace
517	[BUG]  [BUGGY]  long  val2  =  val1  +  val2.longValue();  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  +  val2.longValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  +  val2.longValue();	  long    val2    =    val1.longValue()    +    val2.longValue();    	non-compiled	[CE]  orphaned  case	152	None	replace
518	[BUG]  [BUGGY]  long  val2  =  val1.length()  +  val2.length();  [CE]  orphaned  case  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length()  +  val2.length();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length()  +  val2.length();	  long    val2    =    val1.longValue()    +    val2.longValue();    	non-compiled	[CE]  orphaned  case	152	None	replace
519	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/(int)Math.floor(val2)-  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/(int)Math.floor(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/(int)Math.floor(val2)-  1;	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2)-    1;    	non-compiled	[CE]  orphaned  case	233	None	replace
520	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)-(long)Math.floor(val2)-  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1)-(long)Math.floor(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)-(long)Math.floor(val2)-  1;	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2)-    1;    	non-compiled	[CE]  orphaned  case	233	None	replace
521	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)-(float)Math.floor(val2)-  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1)-(float)Math.floor(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)-(float)Math.floor(val2)-  1;	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2)-    1;    	non-compiled	[CE]  orphaned  case	233	None	replace
522	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val1)-(char)Math.floor(val2)-  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.floor(val1)-(char)Math.floor(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val1)-(char)Math.floor(val2)-  1;	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2)-    1;    	non-compiled	[CE]  orphaned  case	233	None	replace
523	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1)-(double)Math.floor(val2)-  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1)-(double)Math.floor(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1)-(double)Math.floor(val2)-  1;	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2)-    1;    	non-compiled	[CE]  orphaned  case	233	None	replace
524	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	128	None	replace
525	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  >  expected	128	None	replace
526	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	128	None	replace
527	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	128	None	replace
528	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	128	None	replace
529	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	128	None	replace
530	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	328	None	replace
531	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	328	None	replace
532	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	328	None	replace
533	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	328	None	replace
534	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	328	None	replace
535	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	328	None	replace
536	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	328	None	replace
537	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  <  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	328	None	replace
538	[BUG]  [BUGGY]  int  val2  =  Math.min(total,  val2);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(total,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(total,  val2);	  int    val2    =    Math.min(total,    val1);    	non-compiled	[CE]  orphaned  case	41	None	replace
539	[BUG]  [BUGGY]  long  val2  =  Math.min(total,  val1);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  Math.min(total,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  Math.min(total,  val1);	  int    val2    =    Math.min(total,    val1);    	non-compiled	[CE]  orphaned  case	41	None	replace
540	[BUG]  [BUGGY]  int  val2  =  Math.max(total,  val2);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.max(total,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.max(total,  val2);	  int    val2    =    Math.min(total,    val1);    	non-compiled	[CE]  orphaned  case	41	None	replace
541	[BUG]  [BUGGY]  int  val2  =  Math.min(val2,  total);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(val2,  total);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(val2,  total);	  int    val2    =    Math.min(total,    val1);    	non-compiled	[CE]  orphaned  case	41	None	replace
542	[BUG]  [BUGGY]  float  val2  =  Math.min(total,  val1);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  Math.min(total,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  Math.min(total,  val1);	  int    val2    =    Math.min(total,    val1);    	non-compiled	[CE]  orphaned  case	41	None	replace
543	[BUG]  [BUGGY]  int  val2  =  Math.log(val1,  val2);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.log(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.log(val1,  val2);	  int    val2    =    Math.min(total,    val1);    	non-compiled	[CE]  orphaned  case	41	None	replace
544	[BUG]  [BUGGY]  long  val2  =  0L;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0L;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0L;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	29	None	replace
545	[BUG]  [BUGGY]  long  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	29	None	replace
546	[BUG]  [BUGGY]  short  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	29	None	replace
547	[BUG]  [BUGGY]  long  val2  =  -1;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  -1;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  -1;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	29	None	replace
548	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	29	None	replace
549	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	29	None	replace
550	[BUG]  [BUGGY]  long  val2  =  val1;  val2  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1;  val2  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1;  val2  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	29	None	replace
551	[BUG]  [BUGGY]  long  val2  =  getValue(value1,  val2);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(value1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(value1,  val2);	  int    val2    =    getValue(value1,    val2);    	non-compiled	[CE]  orphaned  case	265	None	replace
552	[BUG]  [BUGGY]  int  val2  =  getValue(value1,  val2)-  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(value1,  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(value1,  val2)-  1;	  int    val2    =    getValue(value1,    val2);    	non-compiled	[CE]  orphaned  case	265	None	replace
553	[BUG]  [BUGGY]  float  val2  =  getValue(value1,  val2);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  getValue(value1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(value1,  val2);	  int    val2    =    getValue(value1,    val2);    	non-compiled	[CE]  orphaned  case	265	None	replace
554	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	99	None	replace
555	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	99	None	replace
556	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >  1)  {  safeMultiply(val2,  val1);  }  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >  1)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  >  1)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val2,    val1);    	non-compiled	[CE]  not  a  statement	99	None	replace
557	[BUG]  [BUGGY]  if(val1  >=  val2  ||  val1  ==  0)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2  ||  val1  ==  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2  ||  val1  ==  0)  {	  if(val1    ==    val2    ||    val1    ==    0)    {    	non-compiled	[CE]  orphaned  case	251	None	replace
558	[BUG]  [BUGGY]  if(val2  ==  val1  ||  val2  ==  0)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  val1  ||  val2  ==  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  val1  ||  val2  ==  0)  {	  if(val1    ==    val2    ||    val1    ==    0)    {    	non-compiled	[CE]  orphaned  case	251	None	replace
559	[BUG]  [BUGGY]  if(val1  ==  val2  ||  val1!=  0)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2  ||  val1!=  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2  ||  val1!=  0)  {	  if(val1    ==    val2    ||    val1    ==    0)    {    	non-compiled	[CE]  orphaned  case	251	None	replace
560	[BUG]  [BUGGY]  if(val1  >  val2  ||  val1  ==  0)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2  ||  val1  ==  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2  ||  val1  ==  0)  {	  if(val1    ==    val2    ||    val1    ==    0)    {    	non-compiled	[CE]  orphaned  case	251	None	replace
561	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  ==  0)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  ==  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  ==  0)  {	  if(val1    ==    val2    ||    val1    ==    0)    {    	non-compiled	[CE]  orphaned  case	251	None	replace
562	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  >  0)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  >  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  >  0)  {	  if(val1    ==    val2    ||    val1    ==    0)    {    	non-compiled	[CE]  orphaned  case	251	None	replace
563	[BUG]  [BUGGY]  if(val1  ==  val2  ||  val1  ==  -1)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2  ||  val1  ==  -1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2  ||  val1  ==  -1)  {	  if(val1    ==    val2    ||    val1    ==    0)    {    	non-compiled	[CE]  orphaned  case	251	None	replace
564	[BUG]  [BUGGY]  if(val1!=  val2  ||  val1  ==  0)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1!=  val2  ||  val1  ==  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1!=  val2  ||  val1  ==  0)  {	  if(val1    ==    val2    ||    val1    ==    0)    {    	non-compiled	[CE]  orphaned  case	251	None	replace
565	[BUG]  [BUGGY]  if(val1  >=  val2  ||  val1  >  val1)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2  ||  val1  >  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2  ||  val1  >  val1)  {	  if(val1    >=    val2    ||    val1    >    val2)    {    	non-compiled	[CE]  orphaned  case	363	None	replace
566	[BUG]  [BUGGY]  if(val1  >=  val2  ||  val1  <  val1)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2  ||  val1  <  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2  ||  val1  <  val1)  {	  if(val1    >=    val2    ||    val1    >    val2)    {    	non-compiled	[CE]  orphaned  case	363	None	replace
567	[BUG]  [BUGGY]  if(val1  >  val2  ||  val1  >  val2)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2  ||  val1  >  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2  ||  val1  >  val2)  {	  if(val1    >=    val2    ||    val1    >    val2)    {    	non-compiled	[CE]  orphaned  case	363	None	replace
568	[BUG]  [BUGGY]  if(val1  >=  val2  ||  val1  <  val2)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2  ||  val1  <  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2  ||  val1  <  val2)  {	  if(val1    >=    val2    ||    val1    >    val2)    {    	non-compiled	[CE]  orphaned  case	363	None	replace
569	[BUG]  [BUGGY]  if(val1  ==  val2  ||  val1  >  val2)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2  ||  val1  >  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2  ||  val1  >  val2)  {	  if(val1    >=    val2    ||    val1    >    val2)    {    	non-compiled	[CE]  orphaned  case	363	None	replace
570	[BUG]  [BUGGY]  if(val1  ==  val2  ||  val1  >=  val1)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2  ||  val1  >=  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2  ||  val1  >=  val1)  {	  if(val1    >=    val2    ||    val1    >    val2)    {    	non-compiled	[CE]  orphaned  case	363	None	replace
571	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val1,  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val  <  val1,  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val1,  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val1,    val2.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  >  expected	353	None	replace
572	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1,  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val1,    val2.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	353	None	replace
573	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2  >=  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2  >=  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1,  val2  >=  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val1,    val2.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	353	None	replace
574	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2!=  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2!=  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1,  val2!=  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val1,    val2.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	353	None	replace
575	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2)  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1,  val2)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val    <    val1,    val2.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	353	None	replace
576	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2  >=  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2  >=  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1,  val2  >=  val1.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val1,    val2.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	353	None	replace
577	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2  ==  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2  ==  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1,  val2  ==  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val1,    val2.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	353	None	replace
578	[BUG]  [BUGGY]  switch(val1.doubleValue()  +  val2)  {  [CE]  long  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1.doubleValue()  +  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1.doubleValue()  +  val2)  {	  switch(val1    +    val2)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	161	None	replace
579	[BUG]  [BUGGY]  switch(val1.longValue()  +  val2)  {  [CE]  long  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1.longValue()  +  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1.longValue()  +  val2)  {	  switch(val1    +    val2)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	161	None	replace
580	[BUG]  [BUGGY]  switch(val2  +  val1)  {  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val2  +  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val2  +  val1)  {	  switch(val1    +    val2)    {    	non-compiled	[CE]  possible  loss  of  precision	161	None	replace
581	[BUG]  [BUGGY]  long  val2  =  val1  *  val2,  val1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2,  val1);	  long    val2    =    val1    *    val2,    val2);    	non-compiled	[CE]  ';'  expected	391	None	replace
582	[BUG]  [BUGGY]  int  val2  =  val1  *  val2,  val2);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1  *  val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1  *  val2,  val2);	  long    val2    =    val1    *    val2,    val2);    	non-compiled	[CE]  ';'  expected	391	None	replace
583	[BUG]  [BUGGY]  long  val2  =  val1  *  val2,  val2;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2,  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2,  val2;	  long    val2    =    val1    *    val2,    val2);    	non-compiled	[CE]  orphaned  case	391	None	replace
584	[BUG]  [BUGGY]  long  val2  =  val1  *  val2,  val1,  val2);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2,  val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2,  val1,  val2);	  long    val2    =    val1    *    val2,    val2);    	non-compiled	[CE]  ';'  expected	391	None	replace
585	[BUG]  [BUGGY]  long  val2  =  val1  *  val2,  val2  +  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2,  val2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2,  val2  +  1;	  long    val2    =    val1    *    val2,    val2);    	non-compiled	[CE]  ';'  expected	391	None	replace
586	[BUG]  [BUGGY]  long  val2  =  val1.length  *  val2,  val2);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length  *  val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length  *  val2,  val2);	  long    val2    =    val1    *    val2,    val2);    	non-compiled	[CE]  ';'  expected	391	None	replace
587	[BUG]  [BUGGY]  long  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	361	None	replace
588	[BUG]  [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	361	None	replace
589	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	361	None	replace
590	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	361	None	replace
591	[BUG]  [BUGGY]  for(int  val1  =  0L;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0L;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0L;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	361	None	replace
592	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	34	None	replace
593	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	34	None	replace
594	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	34	None	replace
595	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	34	None	replace
596	[BUG]  [BUGGY]  int  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	34	None	replace
597	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val1)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val1)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2,  val1)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
598	[BUG]  [BUGGY]  SafeMultiply.safeMultiply(val1,  val2,  val1);  [CE]  orphaned  case  [FE]        StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply.safeMultiply(val1,  val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply.safeMultiply(val1,  val2,  val1);	  SafeMultiply.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	389	None	replace
599	[BUG]  [BUGGY]  SafeMultiply.safeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply.safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply.safeMultiply(val2,  val1);	  SafeMultiply.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	389	None	replace
600	[BUG]  [BUGGY]  SafeMultiply.safeMultiply(val1,  val2,  val2);  [CE]  orphaned  case  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply.safeMultiply(val1,  val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply.safeMultiply(val1,  val2,  val2);	  SafeMultiply.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	389	None	replace
601	[BUG]  [BUGGY]  SafeMultiply.safeMultiply(val1,  val2,  false);  [CE]  orphaned  case  [FE]              StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply.safeMultiply(val1,  val2,  false);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply.safeMultiply(val1,  val2,  false);	  SafeMultiply.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	389	None	replace
602	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	25	None	replace
603	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	25	None	replace
604	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	25	None	replace
605	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	25	None	replace
606	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	25	None	replace
607	[BUG]  [BUGGY]  if(val1  ==  val2)  {  switch(val2,  val1)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  switch(val2,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  switch(val2,  val1)  {	  switch(val2,    val1)    {    	non-compiled	[CE]  ')'  expected	122	None	replace
608	[BUG]  [BUGGY]  if(val2  ==  val1)  {  switch(val2,  val1)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  val1)  {  switch(val2,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  val1)  {  switch(val2,  val1)  {	  switch(val2,    val1)    {    	non-compiled	[CE]  ')'  expected	122	None	replace
609	[BUG]  [BUGGY]  switch(val1  -  val2,  val1)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1  -  val2,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1  -  val2,  val1)  {	  switch(val2,    val1)    {    	non-compiled	[CE]  ')'  expected	122	None	replace
610	[BUG]  [BUGGY]  if(val1  ==  val1)  {  switch(val2,  val1)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val1)  {  switch(val2,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val1)  {  switch(val2,  val1)  {	  switch(val2,    val1)    {    	non-compiled	[CE]  ')'  expected	122	None	replace
611	[BUG]  [BUGGY]  int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	322	None	replace
612	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	322	None	replace
613	[BUG]  [BUGGY]  long  val1  =  0L;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0L;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0L;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	322	None	replace
614	[BUG]  [BUGGY]  int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	322	None	replace
615	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >>  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >>  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >>  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	322	None	replace
616	[BUG]  [BUGGY]  return  safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  return  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	return  safeMultiply(val1,  val2);	          if(val1    >=    val2)    {    return    val2;    }    If(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	213	None	replace
617	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	49	None	replace
618	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	49	None	replace
619	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	49	None	replace
620	[BUG]  [BUGGY]  int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	49	None	replace
621	[BUG]  [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0,  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
622	[BUG]  [BUGGY]  Switch(val2  <  val1)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val2  <  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val2  <  val1)  {	  Switch(val1    <    val2)    {    	non-compiled	[CE]  ';'  expected	352	None	replace
623	[BUG]  [BUGGY]  Switch(val1  +  val2)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1  +  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1  +  val2)  {	  Switch(val1    <    val2)    {    	non-compiled	[CE]  ';'  expected	352	None	replace
624	[BUG]  [BUGGY]  Switch(val1  <  =  val2)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1  <  =  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1  <  =  val2)  {	  Switch(val1    <    val2)    {    	non-compiled	[CE]  illegal  start  of  expression	352	None	replace
625	[BUG]  [BUGGY]  Switch(val1  -  val2)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1  -  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1  -  val2)  {	  Switch(val1    <    val2)    {    	non-compiled	[CE]  ';'  expected	352	None	replace
626	[BUG]  [BUGGY]  Switch(val1  *  val2)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1  *  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1  *  val2)  {	  Switch(val1    <    val2)    {    	non-compiled	[CE]  ';'  expected	352	None	replace
627	[BUG]  [BUGGY]  Switch(val0  <  val2)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val0  <  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val0  <  val2)  {	  Switch(val1    <    val2)    {    	non-compiled	[CE]  ';'  expected	352	None	replace
628	[BUG]  [BUGGY]  boolean  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	23	None	replace
629	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	23	None	replace
630	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	23	None	replace
631	[BUG]  [BUGGY]  short  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	23	None	replace
632	[BUG]  [BUGGY]  int  val2  =  0L;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0L;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0L;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	23	None	replace
633	[BUG]  [BUGGY]  float  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	23	None	replace
634	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val1)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2,  val1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2,    val1++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	384	None	replace
635	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val2)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val2)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2,  val2)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2,    val1++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	384	None	replace
636	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2,    val1++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	384	None	replace
637	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  >=  val1)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  >=  val1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2  >=  val1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2,    val1++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	384	None	replace
638	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2,  val1++)  {  safeMultiply(val1,  val2);  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2,  val1++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2,  val1++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2,    val1++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  >  expected	384	None	replace
639	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  >=  val2)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  >=  val2)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2  >=  val2)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2,    val1++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	384	None	replace
640	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  <  val2,  val1++)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  <  val2,  val1++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  <  val2,  val1++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2,    val1++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	384	None	replace
641	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1,  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2,    val1++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	384	None	replace
642	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.pow(10,  val2)-  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.pow(10,  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(int)Math.pow(10,  val2)-  1;	  long    val2    =    val1    *    val2    +(int)Math.pow(10,    val2);    	non-compiled	[CE]  orphaned  case	305	None	replace
643	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.pow(10,  val1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.pow(10,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(int)Math.pow(10,  val1);	  long    val2    =    val1    *    val2    +(int)Math.pow(10,    val2);    	non-compiled	[CE]  orphaned  case	305	None	replace
644	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(long)Math.pow(10,  val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(long)Math.pow(10,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(long)Math.pow(10,  val2);	  long    val2    =    val1    *    val2    +(int)Math.pow(10,    val2);    	non-compiled	[CE]  orphaned  case	305	None	replace
645	[BUG]  [BUGGY]  int  val2  =  val1  *  val2  +(int)Math.pow(10,  val2);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1  *  val2  +(int)Math.pow(10,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1  *  val2  +(int)Math.pow(10,  val2);	  long    val2    =    val1    *    val2    +(int)Math.pow(10,    val2);    	non-compiled	[CE]  orphaned  case	305	None	replace
646	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.pow(10,  val2)-  2;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.pow(10,  val2)-  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(int)Math.pow(10,  val2)-  2;	  long    val2    =    val1    *    val2    +(int)Math.pow(10,    val2);    	non-compiled	[CE]  orphaned  case	305	None	replace
647	[BUG]  [BUGGY]  long  val2  =  val1,  val2  *  val1  +(int)Math.pow(10,  val2);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2  *  val1  +(int)Math.pow(10,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2  *  val1  +(int)Math.pow(10,  val2);	  long    val2    =    val1    *    val2    +(int)Math.pow(10,    val2);    	non-compiled	[CE]  ';'  expected	305	None	replace
648	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.pow(10,  val2)+  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.pow(10,  val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(int)Math.pow(10,  val2)+  1;	  long    val2    =    val1    *    val2    +(int)Math.pow(10,    val2);    	non-compiled	[CE]  orphaned  case	305	None	replace
649	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.pow(10,  val2)/  2;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.pow(10,  val2)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(int)Math.pow(10,  val2)/  2;	  long    val2    =    val1    *    val2    +(int)Math.pow(10,    val2);    	non-compiled	[CE]  orphaned  case	305	None	replace
650	[BUG]  [BUGGY]  long  val2  =  getValue(val2);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val2);	  int    val2    =    getValue(val2);    	non-compiled	[CE]  orphaned  case	188	None	replace
651	[BUG]  [BUGGY]  float  val2  =  getValue(val2);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  getValue(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val2);	  int    val2    =    getValue(val2);    	non-compiled	[CE]  orphaned  case	188	None	replace
652	[BUG]  [BUGGY]  int  val2  =  getLongValue(val2);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getLongValue(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getLongValue(val2);	  int    val2    =    getValue(val2);    	non-compiled	[CE]  orphaned  case	188	None	replace
653	[BUG]  [BUGGY]  boolean  val2  =  getValue(val2);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  getValue(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  getValue(val2);	  int    val2    =    getValue(val2);    	non-compiled	[CE]  orphaned  case	188	None	replace
654	[BUG]  [BUGGY]  int  val2  =  getValue(val2)-  1;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)-  1;	  int    val2    =    getValue(val2);    	non-compiled	[CE]  orphaned  case	188	None	replace
655	[BUG]  [BUGGY]  int  val2  =  getLocalValue(val1);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getLocalValue(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getLocalValue(val1);	  int    val2    =    getValue(val2);    	non-compiled	[CE]  orphaned  case	188	None	replace
656	[BUG]  [BUGGY]  if(val1  ==  val1)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val1)  {	  if(val2    ==    val1)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
657	[BUG]  [BUGGY]  if(val1  ==  val2  ||  val1!=  val1)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2  ||  val1!=  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2  ||  val1!=  val1)  {	  if(val1    ==    val2    ||    val1    >=    val2)    {    	non-compiled	[CE]  orphaned  case	252	None	replace
658	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	183	None	replace
659	[BUG]  [BUGGY]  long  val1  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  >  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  >  expected	183	None	replace
660	[BUG]  [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	183	None	replace
661	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  >  expected  [FE]                                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  >  expected	183	None	replace
662	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  cleanMultiply(val2,  val1);  [CE]  orphaned  case  [FE]                    StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  cleanMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  cleanMultiply(val2,  val1);	          safeMultiply(val1,    val2);    cleanMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	89	None	replace
663	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1);  cleanMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                      StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1);  cleanMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1);  cleanMultiply(val1,  val2);	          safeMultiply(val1,    val2);    cleanMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	89	None	replace
664	[BUG]  [BUGGY]  safeMultiply(val2,  val1);  cleanMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                        StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2,  val1);  cleanMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val1);  cleanMultiply(val1,  val2);	          safeMultiply(val1,    val2);    cleanMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	89	None	replace
665	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  cleanMultiply(val2,  val1.doubleValue());  [CE]  orphaned  case  [FE]                          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  cleanMultiply(val2,  val1.doubleValue());  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  cleanMultiply(val2,  val1.doubleValue());	          safeMultiply(val1,    val2);    cleanMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	89	None	replace
666	[BUG]  [BUGGY]  if(val1  >=  val2  ||  val1!=  val1)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2  ||  val1!=  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2  ||  val1!=  val1)  {	  if(val1    >=    val2    ||    val1    >=    val2)    {    	non-compiled	[CE]  orphaned  case	193	None	replace
667	[BUG]  [BUGGY]  if(val2  >=  val1  ||  val2  >=  val1)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >=  val1  ||  val2  >=  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1  ||  val2  >=  val1)  {	  if(val1    >=    val2    ||    val1    >=    val2)    {    	non-compiled	[CE]  orphaned  case	193	None	replace
668	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1).reset();    }    	non-compiled	[CE]  orphaned  case	292	None	replace
669	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val2,  val1).reset();  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1).reset();    }    	non-compiled	[CE]  orphaned  case	292	None	replace
670	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [CE]  >  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1).reset();    }    	non-compiled	[CE]  >  expected	292	None	replace
671	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val2).reset();  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val2).reset();  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val2).reset();  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1).reset();    }    	non-compiled	[CE]  orphaned  case	292	None	replace
672	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2).reset();  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2).reset();  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2).reset();  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1).reset();    }    	non-compiled	[CE]  orphaned  case	292	None	replace
673	[BUG]  [BUGGY]  int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [CE]  >  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1).reset();    }    	non-compiled	[CE]  >  expected	292	None	replace
674	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [CE]  ';'  expected  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1,  val2.length;  val++)  {  safeMultiply(val2,  val1).reset();  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1).reset();    }    	non-compiled	[CE]  ';'  expected	292	None	replace
675	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val2,  val2).reset();  }  [CE]  orphaned  case  [FE]                                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val2,  val2).reset();  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val2,  val2).reset();  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1).reset();    }    	non-compiled	[CE]  orphaned  case	292	None	replace
676	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val2);	  float    val2    =(float)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	221	None	replace
677	[BUG]  [BUGGY]  float  val2  =(float)Math.log(val1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.log(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.log(val1);	  float    val2    =(float)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	221	None	replace
678	[BUG]  [BUGGY]  float  val2  =(float)Math.log(val2);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.log(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.log(val2);	  float    val2    =(float)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	221	None	replace
679	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)-  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)-  1;	  float    val2    =(float)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	221	None	replace
680	[BUG]  [BUGGY]  float  val2  =(float)Math.rint(val1);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.rint(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.rint(val1);	  float    val2    =(float)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	221	None	replace
681	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val2)-  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val2)-  1;	  float    val2    =(float)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	221	None	replace
682	[BUG]  [BUGGY]  long  val2  =  val2.longValue()  *  val1.longValue();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val2.longValue()  *  val1.longValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val2.longValue()  *  val1.longValue();	  long    val2    =    val1.longValue()    *    val2.longValue();    	non-compiled	[CE]  orphaned  case	150	None	replace
683	[BUG]  [BUGGY]  long  val2  =  val1.longValue()  *  val2.longValue()  +  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.longValue()  *  val2.longValue()  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.longValue()  *  val2.longValue()  +  1;	  long    val2    =    val1.longValue()    *    val2.longValue();    	non-compiled	[CE]  orphaned  case	150	None	replace
684	[BUG]  [BUGGY]  int  val2  =  val1.longValue()  *  val2.longValue();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1.longValue()  *  val2.longValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1.longValue()  *  val2.longValue();	  long    val2    =    val1.longValue()    *    val2.longValue();    	non-compiled	[CE]  orphaned  case	150	None	replace
685	[BUG]  [BUGGY]  long  val2  =  val1.longValue()  /  val2.longValue();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.longValue()  /  val2.longValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.longValue()  /  val2.longValue();	  long    val2    =    val1.longValue()    *    val2.longValue();    	non-compiled	[CE]  orphaned  case	150	None	replace
686	[BUG]  [BUGGY]  long  val2  =  val1.getLongValue()  *  val2.getLongValue();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.getLongValue()  *  val2.getLongValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.getLongValue()  *  val2.getLongValue();	  long    val2    =    val1.longValue()    *    val2.longValue();    	non-compiled	[CE]  orphaned  case	150	None	replace
687	[BUG]  [BUGGY]  long  val2  =  val1,  val2.longValue()  *  val1.longValue();  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2.longValue()  *  val1.longValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2.longValue()  *  val1.longValue();	  long    val2    =    val1.longValue()    *    val2.longValue();    	non-compiled	[CE]  ';'  expected	150	None	replace
688	[BUG]  [BUGGY]  long  val2  =  val1.longValue()  /  val2;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.longValue()  /  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.longValue()  /  val2;	  long    val2    =    val1.longValue()    *    val2;    	non-compiled	[CE]  orphaned  case	117	None	replace
689	[BUG]  [BUGGY]  long  val2  =  val1.doubleValue()  *  val2;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.doubleValue()  *  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.doubleValue()  *  val2;	  long    val2    =    val1.longValue()    *    val2;    	non-compiled	[CE]  orphaned  case	117	None	replace
690	[BUG]  [BUGGY]  long  val2  =  val2.longValue()  *  val1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val2.longValue()  *  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val2.longValue()  *  val1;	  long    val2    =    val1.longValue()    *    val2;    	non-compiled	[CE]  orphaned  case	117	None	replace
691	[BUG]  [BUGGY]  long  val2  =  val1.longValue()  *  val2  +  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.longValue()  *  val2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.longValue()  *  val2  +  1;	  long    val2    =    val1.longValue()    *    val2;    	non-compiled	[CE]  orphaned  case	117	None	replace
692	[BUG]  [BUGGY]  long  val2  =  val1.length()  *  val2;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length()  *  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length()  *  val2;	  long    val2    =    val1.longValue()    *    val2;    	non-compiled	[CE]  orphaned  case	117	None	replace
693	[BUG]  [BUGGY]  int  val2  =  val1.longValue()  *  val2;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1.longValue()  *  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1.longValue()  *  val2;	  long    val2    =    val1.longValue()    *    val2;    	non-compiled	[CE]  orphaned  case	117	None	replace
694	[BUG]  [BUGGY]  switch(val1,  val2,  val2)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2,  val2)  {	  switch(val1,    val2,    val1)    {    	non-compiled	[CE]  ')'  expected	125	None	replace
695	[BUG]  [BUGGY]  switch(val1,  val2,  val3)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2,  val3)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2,  val3)  {	  switch(val1,    val2,    val1)    {    	non-compiled	[CE]  ')'  expected	125	None	replace
696	[BUG]  [BUGGY]  switch(val1,  val2,  val0)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2,  val0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2,  val0)  {	  switch(val1,    val2,    val1)    {    	non-compiled	[CE]  ')'  expected	125	None	replace
697	[BUG]  [BUGGY]  switch(val1,  val2,  val4)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2,  val4)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2,  val4)  {	  switch(val1,    val2,    val1)    {    	non-compiled	[CE]  ')'  expected	125	None	replace
698	[BUG]  [BUGGY]  switch(val1,  val2,  val5)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2,  val5)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2,  val5)  {	  switch(val1,    val2,    val1)    {    	non-compiled	[CE]  ')'  expected	125	None	replace
699	[BUG]  [BUGGY]  int  val2  =  val2.longValue();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val2.longValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val2.longValue();	  long    val2    =    val2.longValue();    	non-compiled	[CE]  orphaned  case	153	None	replace
700	[BUG]  [BUGGY]  long  val2  =  val2.longValue()  +  1;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val2.longValue()  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val2.longValue()  +  1;	  long    val2    =    val2.longValue();    	non-compiled	[CE]  orphaned  case	153	None	replace
701	[BUG]  [BUGGY]  long  val2  =  val2.doubleValue();  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val2.doubleValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val2.doubleValue();	  long    val2    =    val2.longValue();    	non-compiled	[CE]  orphaned  case	153	None	replace
702	[BUG]  [BUGGY]  long  val2  =  val1,  val2.longValue();  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2.longValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2.longValue();	  long    val2    =    val2.longValue();    	non-compiled	[CE]  ';'  expected	153	None	replace
703	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	95	None	replace
704	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    safeMultiply(val1,    val2);    	non-compiled	[CE]  not  a  statement	95	None	replace
705	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	95	None	replace
706	[BUG]  [BUGGY]  int  val2  =  Math.min(val2,  val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(val2,  val2);	  int    val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	37	None	replace
707	[BUG]  [BUGGY]  int  val2  =  Math.max(val2,  val1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.max(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.max(val2,  val1);	  int    val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	37	None	replace
708	[BUG]  [BUGGY]  int  val2  =  Math.min(val2,  val1)-  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(val2,  val1)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(val2,  val1)-  1;	  int    val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	37	None	replace
709	[BUG]  [BUGGY]  Switch(val1,  val2,  val3)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  val3)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  val3)  {	  Switch(val1,    val2,    val2)    {    	non-compiled	[CE]  ';'  expected	146	None	replace
710	[BUG]  [BUGGY]  SafeMultiply(val1,  val2,  val1)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply(val1,  val2,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply(val1,  val2,  val1)  {	  Switch(val1,    val2,    val2)    {    	non-compiled	[CE]  ';'  expected	146	None	replace
711	[BUG]  [BUGGY]  Switch(val1,  val2,  val4)  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  val4)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  val4)  {	  Switch(val1,    val2,    val2)    {    	non-compiled	[CE]  ';'  expected	146	None	replace
712	[BUG]  [BUGGY]  SafeMultiply(val1,  val2,  val2)  {  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply(val1,  val2,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply(val1,  val2,  val2)  {	  Switch(val1,    val2,    val2)    {    	non-compiled	[CE]  ';'  expected	146	None	replace
713	[BUG]  [BUGGY]  Switch(val1,  val2,  val0)  {  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  val0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  val0)  {	  Switch(val1,    val2,    val2)    {    	non-compiled	[CE]  ';'  expected	146	None	replace
714	[BUG]  [BUGGY]  safeMultiply(val2,  val1,  val2);  [CE]  orphaned  case  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2,  val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val1,  val2);	  safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	165	None	replace
715	[BUG]  [BUGGY]  safeMultiply(val2,  val2);  [CE]  orphaned  case  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val2);	  safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	165	None	replace
716	[BUG]  [BUGGY]  if(val2  ==  0  ||  val1!=  val2)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  0  ||  val1!=  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  0  ||  val1!=  val2)  {	  if(val2    ==    0    ||    val1    >=    val2)    {    	non-compiled	[CE]  orphaned  case	373	None	replace
717	[BUG]  [BUGGY]  if(val1  ==  0  ||  val2  >=  0)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  0  ||  val2  >=  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  0  ||  val2  >=  0)  {	  if(val2    ==    0    ||    val1    >=    val2)    {    	non-compiled	[CE]  orphaned  case	373	None	replace
718	[BUG]  [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	362	None	replace
719	[BUG]  [BUGGY]  long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  >  expected	362	None	replace
720	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	362	None	replace
721	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	362	None	replace
722	[BUG]  [BUGGY]  int  val2  =  val1.longValue()  +  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1.longValue()  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1.longValue()  +  1;	  long    val2    =    val1.longValue()    +    1;    	non-compiled	[CE]  orphaned  case	151	None	replace
723	[BUG]  [BUGGY]  long  val2  =  val1.longValue()  *  1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.longValue()  *  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.longValue()  *  1;	  long    val2    =    val1.longValue()    +    1;    	non-compiled	[CE]  orphaned  case	151	None	replace
724	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	8	None	replace
725	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	8	None	replace
726	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	8	None	replace
727	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	179	None	replace
728	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  >  expected	179	None	replace
729	[BUG]  [BUGGY]  for(int  val2  =  1;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	179	None	replace
730	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1,  val2.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	179	None	replace
731	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	179	None	replace
732	[BUG]  [BUGGY]  tryFactory().safeMultiply(val1,  val2,  val1);  [CE]  orphaned  case  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFactory().safeMultiply(val1,  val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFactory().safeMultiply(val1,  val2,  val1);	  tryFactory().safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	342	None	replace
733	[BUG]  [BUGGY]  tryFactory().safeMultiply(val1,  val2,  val2);  [CE]  orphaned  case  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFactory().safeMultiply(val1,  val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFactory().safeMultiply(val1,  val2,  val2);	  tryFactory().safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	342	None	replace
734	[BUG]  [BUGGY]  tryFactory().safeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFactory().safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFactory().safeMultiply(val2,  val1);	  tryFactory().safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	342	None	replace
735	[BUG]  [BUGGY]  tryFactory().safeMultiply(val1,  val2,  false);  [CE]  orphaned  case  [FE]                  ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFactory().safeMultiply(val1,  val2,  false);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFactory().safeMultiply(val1,  val2,  false);	  tryFactory().safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	342	None	replace
736	[BUG]  [BUGGY]  tryFactory().safeMultiply(val1,  val2,  val1).reset();  [CE]  orphaned  case  [FE]                    ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFactory().safeMultiply(val1,  val2,  val1).reset();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFactory().safeMultiply(val1,  val2,  val1).reset();	  tryFactory().safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	342	None	replace
737	[BUG]  [BUGGY]  tryFactory().safeMultiply(val1,  val2,  val3);  [CE]  orphaned  case  [FE]                      ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFactory().safeMultiply(val1,  val2,  val3);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFactory().safeMultiply(val1,  val2,  val3);	  tryFactory().safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	342	None	replace
738	[BUG]  [BUGGY]  long  val2  =  getValue(val1)-  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1)-  1;	  long    val2    =    getValue(val1);    	non-compiled	[CE]  orphaned  case	186	None	replace
739	[BUG]  [BUGGY]  long  val2  =  getValue(val1)+  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1)+  1;	  long    val2    =    getValue(val1);    	non-compiled	[CE]  orphaned  case	186	None	replace
740	[BUG]  [BUGGY]  long  val2  =  getValue(val2)-  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val2)-  1;	  long    val2    =    getValue(val1);    	non-compiled	[CE]  orphaned  case	186	None	replace
741	[BUG]  [BUGGY]  long  val2  =  getLongValue(val1);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getLongValue(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getLongValue(val1);	  long    val2    =    getValue(val1);    	non-compiled	[CE]  orphaned  case	186	None	replace
742	[BUG]  [BUGGY]  long  val2  =  getValue(val1)/  2;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1)/  2;	  long    val2    =    getValue(val1);    	non-compiled	[CE]  orphaned  case	186	None	replace
743	[BUG]  [BUGGY]  long  val2  =  getLocalValue(val1);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getLocalValue(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getLocalValue(val1);	  long    val2    =    getValue(val1);    	non-compiled	[CE]  orphaned  case	186	None	replace
744	[BUG]  [BUGGY]  long  val2  =  getValue(val1)-  2;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1)-  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1)-  2;	  long    val2    =    getValue(val1);    	non-compiled	[CE]  orphaned  case	186	None	replace
745	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	355	1	add
746	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	355	1	add
747	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	355	1	add
748	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	355	1	add
749	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [CE]  <identifier>  expected  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	non-compiled	[CE]  <identifier>  expected	355	None	add
750	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	355	None	add
751	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	355	None	add
752	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
753	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	55	1	add
754	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	55	1	add
755	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	55	None	add
756	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
757	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
758	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]              ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	55	1	add
759	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]              ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	55	1	add
760	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]                ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	55	None	add
761	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]                  ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
762	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]                    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
763	[BUG]  [BUGGY]  Switch(val1,  val2,  true)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  true)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  true)  {	  Switch(val1,    val2,    false)    {    	non-compiled	[CE]  ';'  expected	144	None	replace
764	[BUG]  [BUGGY]  Switch(val1,  val2,  false,  true)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  false,  true)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  false,  true)  {	  Switch(val1,    val2,    false)    {    	non-compiled	[CE]  ';'  expected	144	None	replace
765	[BUG]  [BUGGY]  Switch(val1,  val2,  true,  false)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  true,  false)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  true,  false)  {	  Switch(val1,    val2,    false)    {    	non-compiled	[CE]  ';'  expected	144	None	replace
766	[BUG]  [BUGGY]  Switch(val1,  val2,  null)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  null)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  null)  {	  Switch(val1,    val2,    false)    {    	non-compiled	[CE]  ';'  expected	144	None	replace
767	[BUG]  [BUGGY]  Switch(val1,  val2,  null,  false)  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  null,  false)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  null,  false)  {	  Switch(val1,    val2,    false)    {    	non-compiled	[CE]  ';'  expected	144	None	replace
768	[BUG]  [BUGGY]  Switch(val1,  false,  val2)  {  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  false,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  false,  val2)  {	  Switch(val1,    val2,    false)    {    	non-compiled	[CE]  ';'  expected	144	None	replace
769	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)-  getValue(val1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)-  getValue(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)-  getValue(val1);	  int    val2    =    getValue(val2)-    getValue(val1);    	non-compiled	[CE]  orphaned  case	135	None	replace
770	[BUG]  [BUGGY]  int  val2  =  getValue(val2)-  getValue(val1)-  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)-  getValue(val1)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)-  getValue(val1)-  1;	  int    val2    =    getValue(val2)-    getValue(val1);    	non-compiled	[CE]  orphaned  case	135	None	replace
771	[BUG]  [BUGGY]  float  val2  =  getValue(val2)-  getValue(val1);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  getValue(val2)-  getValue(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val2)-  getValue(val1);	  int    val2    =    getValue(val2)-    getValue(val1);    	non-compiled	[CE]  orphaned  case	135	None	replace
772	[BUG]  [BUGGY]  int  val2  =  getValue(val2)-  getValue(val1)+  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)-  getValue(val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)-  getValue(val1)+  1;	  int    val2    =    getValue(val2)-    getValue(val1);    	non-compiled	[CE]  orphaned  case	135	None	replace
773	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	11	None	replace
774	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	11	None	replace
775	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	11	None	replace
776	[BUG]  [BUGGY]  if(val2  <  =  val1)  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  <  =  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  <  =  val1)  {  return  val2;  }	  if(val1    <    =    val2)    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
777	[BUG]  [BUGGY]  while(val1  <  =  val2)  {  return  val2;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  =  val2)  {  return  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  =  val2)  {  return  val2;	  if(val1    <    =    val2)    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
778	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	282	None	add
779	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	282	None	add
780	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	282	None	add
781	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	282	1	add
782	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	282	1	add
783	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	282	1	add
784	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	282	1	add
785	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]              ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	282	None	add
786	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]                ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	282	None	add
787	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2  <  val1)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]                  ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2  <  val1)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2  <  val1)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	282	None	add
788	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]                    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	282	1	add
789	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]                    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	282	1	add
790	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)/  getValue(val2);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)/  getValue(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)/  getValue(val2);	  int    val2    =    getValue(val1,    val2)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	136	None	replace
791	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)/  getValue(val1);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)/  getValue(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)/  getValue(val1);	  int    val2    =    getValue(val1,    val2)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	136	None	replace
792	[BUG]  [BUGGY]  int  val2  =  getValue(val2,  val1)-  getValue(val2);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2,  val1)-  getValue(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2,  val1)-  getValue(val2);	  int    val2    =    getValue(val1,    val2)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	136	None	replace
793	[BUG]  [BUGGY]  int  val2  =  safeMultiply(val1,  val2)-  getValue(val2);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  safeMultiply(val1,  val2)-  getValue(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  safeMultiply(val1,  val2)-  getValue(val2);	  int    val2    =    getValue(val1,    val2)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	136	None	replace
794	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)-  getValue(val2)-  1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)-  getValue(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)-  getValue(val2)-  1;	  int    val2    =    getValue(val1,    val2)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	136	None	replace
795	[BUG]  [BUGGY]  float  val2  =  getValue(val1,  val2)-  getValue(val2);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  getValue(val1,  val2)-  getValue(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val1,  val2)-  getValue(val2);	  int    val2    =    getValue(val1,    val2)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	136	None	replace
796	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >=  0)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >=  0)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  >=  0)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    0)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	276	None	replace
797	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  >=  0)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  >=  0)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  >=  0)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    0)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	276	None	replace
798	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    0)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	276	None	replace
799	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  ==  0)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  ==  0)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  ==  0)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    0)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	276	None	replace
800	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2!=  0)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2!=  0)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2!=  0)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    0)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	276	None	replace
801	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >>  0)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >>  0)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  >>  0)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    0)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	276	None	replace
802	[BUG]  [BUGGY]  for(long  val2  =  0;  val1  <  val2.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(long  val2  =  0;  val1  <  val2.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val2  =  0;  val1  <  val2.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    0)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	276	None	replace
803	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }  [CE]  >  expected  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    0)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  >  expected	276	None	replace
804	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  <  val2.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    0)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	276	None	replace
805	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)/  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)/  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)/  1;	  int    val2    =    getValue(val1,    val2)-    1;    	non-compiled	[CE]  orphaned  case	74	None	replace
806	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)-  1L;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)-  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)-  1L;	  int    val2    =    getValue(val1,    val2)-    1;    	non-compiled	[CE]  orphaned  case	74	None	replace
807	[BUG]  [BUGGY]  int  val2  =  getValue(val2,  val1)-  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2,  val1)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2,  val1)-  1;	  int    val2    =    getValue(val1,    val2)-    1;    	non-compiled	[CE]  orphaned  case	74	None	replace
808	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)/  1L;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)/  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)/  1L;	  int    val2    =    getValue(val1,    val2)-    1;    	non-compiled	[CE]  orphaned  case	74	None	replace
809	[BUG]  [BUGGY]  if(val2  >=  val1)  {  return  val2;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1)  {  return  val2;  }	          if(val1    >=    val2)    {    return    val2;    }    if(val1    >>    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	204	None	replace
810	[BUG]  [BUGGY]  while(val1  <  val2)  {  val2  >=  val1;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  val2  >=  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  val2  >=  val1;	          if(val1    >=    val2)    {    return    val2;    }    if(val1    >>    val2)    {    return    val2;    }    	non-compiled	[CE]  not  a  statement	204	None	replace
811	[BUG]  [BUGGY]  while(val1  >=  val2)  {  val2  >>  val1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  >=  val2)  {  val2  >>  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  >=  val2)  {  val2  >>  val1;	          if(val1    >=    val2)    {    return    val2;    }    if(val1    >>    val2)    {    return    val2;    }    	non-compiled	[CE]  not  a  statement	204	None	replace
812	[BUG]  [BUGGY]  long  val1  =  0;  val  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	381	None	replace
813	[BUG]  [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	381	None	replace
814	[BUG]  [BUGGY]  float  val2  =(float)Math.log(val1)/  val2;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.log(val1)/  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.log(val1)/  val2;	  float    val2    =(float)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	312	None	replace
815	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1)/  val2;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1)/  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1)/  val2;	  float    val2    =(float)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	312	None	replace
816	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val2)/  val1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val2)/  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val2)/  val1;	  float    val2    =(float)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	312	None	replace
817	[BUG]  [BUGGY]  float  val2  =(float)Math.log(val2)/  val1;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.log(val2)/  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.log(val2)/  val1;	  float    val2    =(float)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	312	None	replace
818	[BUG]  [BUGGY]  float  val2  =(float)Math.ceil(val1)/  val2;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.ceil(val1)/  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.ceil(val1)/  val2;	  float    val2    =(float)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	312	None	replace
819	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)/  val2L;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1)/  val2L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)/  val2L;	  float    val2    =(float)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	312	None	replace
820	[BUG]  [BUGGY]  tries[val1]  =  safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tries[val1]  =  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tries[val1]  =  safeMultiply(val1,  val2);	  tries[val1]    =    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	343	None	replace
821	[BUG]  [BUGGY]  tries[val1]  =  safeMultiply(val2,  val2);  [CE]  orphaned  case  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tries[val1]  =  safeMultiply(val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tries[val1]  =  safeMultiply(val2,  val2);	  tries[val1]    =    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	343	None	replace
822	[BUG]  [BUGGY]  tries[val2]  =  safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                  ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tries[val2]  =  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tries[val2]  =  safeMultiply(val1,  val2);	  tries[val1]    =    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	343	None	replace
823	[BUG]  [BUGGY]  if(val1  >=  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }	  tries[val1]    =    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	343	None	replace
824	[BUG]  [BUGGY]  tries[val1]  =  safeMultiply(val2,  val1,  val2);  [CE]  orphaned  case  [FE]                      ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tries[val1]  =  safeMultiply(val2,  val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tries[val1]  =  safeMultiply(val2,  val1,  val2);	  tries[val1]    =    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	343	None	replace
825	[BUG]  [BUGGY]  if(val1  ==  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }	  tries[val1]    =    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	343	None	replace
826	[BUG]  [BUGGY]  if(val1  >=  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }	  tries[val1]    =    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	343	None	replace
827	[BUG]  [BUGGY]  if(val1  ==  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }	  tries[val1]    =    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	343	None	replace
828	[BUG]  [BUGGY]  long  val2  =  0L;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0L;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0L;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	9	None	replace
829	[BUG]  [BUGGY]  long  val2  =  1;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  1;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  1;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	9	None	replace
830	[BUG]  [BUGGY]  long  val2  =  val1;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	9	None	replace
831	[BUG]  [BUGGY]  short  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	9	None	replace
832	[BUG]  [BUGGY]  long  val2  =  val1;  val  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1;  val  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1;  val  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	9	None	replace
833	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	9	None	replace
834	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	369	None	replace
835	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	369	None	replace
836	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	369	None	replace
837	[BUG]  [BUGGY]  for(int  val2  =  1;  val  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	369	None	replace
838	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  <  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	369	None	replace
839	[BUG]  [BUGGY]  Class  <?>  val2  =  val1.getClass().getSimpleName();  [CE]  orphaned  case  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Class  <?>  val2  =  val1.getClass().getSimpleName();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Class  <?>  val2  =  val1.getClass().getSimpleName();	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	283	None	replace
840	[BUG]  [BUGGY]  Class  <?>  val2  =  val1.getClass().getRawClass();  [CE]  orphaned  case  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Class  <?>  val2  =  val1.getClass().getRawClass();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Class  <?>  val2  =  val1.getClass().getRawClass();	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	283	None	replace
841	[BUG]  [BUGGY]  Class  <?>  val2  =  val1.getRawClass();  [CE]  orphaned  case  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Class  <?>  val2  =  val1.getRawClass();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Class  <?>  val2  =  val1.getRawClass();	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	283	None	replace
842	[BUG]  [BUGGY]  Class  <?>  val2  =  val1.getClass().getName();  [CE]  orphaned  case  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Class  <?>  val2  =  val1.getClass().getName();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Class  <?>  val2  =  val1.getClass().getName();	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	283	None	replace
843	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	346	None	replace
844	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	346	None	replace
845	[BUG]  [BUGGY]  for(int  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	346	None	replace
846	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  <  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  <  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  <  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	346	None	replace
847	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	346	None	replace
848	[BUG]  [BUGGY]  for(int  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  <  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  <  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  <  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	346	None	replace
849	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)/(float)Math.floor(val2);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1)/(float)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)/(float)Math.floor(val2);	  float    val2    =(float)Math.floor(val1)-(float)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	232	None	replace
850	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val2)-(float)Math.floor(val1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val2)-(float)Math.floor(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val2)-(float)Math.floor(val1);	  float    val2    =(float)Math.floor(val1)-(float)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	232	None	replace
851	[BUG]  [BUGGY]  float  val2  =(float)Math.log(val1)/(float)Math.floor(val2);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.log(val1)/(float)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.log(val1)/(float)Math.floor(val2);	  float    val2    =(float)Math.floor(val1)-(float)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	232	None	replace
852	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val2)/(float)Math.floor(val1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val2)/(float)Math.floor(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val2)/(float)Math.floor(val1);	  float    val2    =(float)Math.floor(val1)-(float)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	232	None	replace
853	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1,  val2)/(float)Math.floor(val2);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1,  val2)/(float)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1,  val2)/(float)Math.floor(val2);	  float    val2    =(float)Math.floor(val1)-(float)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	232	None	replace
854	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  /  2;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  /  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  /  2;	  long    val2    =    val1    *    val2    +    2;    	non-compiled	[CE]  orphaned  case	121	None	replace
855	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  -  2;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  -  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  -  2;	  long    val2    =    val1    *    val2    +    2;    	non-compiled	[CE]  orphaned  case	121	None	replace
856	[BUG]  [BUGGY]  long  val2  =  val1,  val2  +  2;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2  +  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2  +  2;	  long    val2    =    val1    *    val2    +    2;    	non-compiled	[CE]  ';'  expected	121	None	replace
857	[BUG]  [BUGGY]  long  val2  =  val1  +  val2  +  2;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  +  val2  +  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  +  val2  +  2;	  long    val2    =    val1    *    val2    +    2;    	non-compiled	[CE]  orphaned  case	121	None	replace
858	[BUG]  [BUGGY]  long  val2  =  val1.length  *  val2  +  2;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length  *  val2  +  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length  *  val2  +  2;	  long    val2    =    val1    *    val2    +    2;    	non-compiled	[CE]  orphaned  case	121	None	replace
859	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  <  <  2;  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  <  <  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  <  <  2;	  long    val2    =    val1    *    val2    +    2;    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
860	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	13	None	replace
861	[BUG]  [BUGGY]  boolean  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	13	None	replace
862	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	13	None	replace
863	[BUG]  [BUGGY]  float  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	13	None	replace
864	[BUG]  [BUGGY]  short  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	13	None	replace
865	[BUG]  [BUGGY]  int  val2  =  0L;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0L;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0L;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	13	None	replace
866	[BUG]  [BUGGY]  double  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	13	None	replace
867	[BUG]  [BUGGY]  if(val2  ==  val1)  {  return  0;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  val1)  {  return  0;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  val1)  {  return  0;  }	  if(val1    ==    val2)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	223	None	replace
868	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    val++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	380	None	replace
869	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    val++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	380	None	replace
870	[BUG]  [BUGGY]  int  val2  =  0;  val  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    val++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	380	None	replace
871	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    val++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	380	None	replace
872	[BUG]  [BUGGY]  long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	195	None	replace
873	[BUG]  [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	195	None	replace
874	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	327	None	replace
875	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	327	None	replace
876	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	327	None	replace
877	[BUG]  [BUGGY]  switch(val2  <  =  val1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val2  <  =  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val2  <  =  val1)  {	  switch(val1    <    =    val2)    {    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
878	[BUG]  [BUGGY]  switch(val1  >=  val2)  {  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1  >=  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1  >=  val2)  {	  switch(val1    <    =    val2)    {    	non-compiled	[CE]  incompatible  types	163	None	replace
879	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	52	None	replace
880	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	52	None	replace
881	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	52	None	replace
882	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	52	None	replace
883	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	52	None	replace
884	[BUG]  [BUGGY]  for(int  val2  =  1;  val  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	52	None	replace
885	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val    >=    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	291	None	replace
886	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val    >=    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	291	None	replace
887	[BUG]  [BUGGY]  long  val2  =  0;  val  >=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val  >=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  >=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val    >=    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  not  a  statement	291	None	replace
888	[BUG]  [BUGGY]  for(int  val2  =  1;  val  >=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val  >=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val  >=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val    >=    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	291	None	replace
889	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)-  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)-  1;	  int    val2    =(int)Math.floor(val1)-    1;    	non-compiled	[CE]  orphaned  case	218	None	replace
890	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)-  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)-  1;	  int    val2    =(int)Math.floor(val1)-    1;    	non-compiled	[CE]  orphaned  case	218	None	replace
891	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val1)-  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.floor(val1)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val1)-  1;	  int    val2    =(int)Math.floor(val1)-    1;    	non-compiled	[CE]  orphaned  case	218	None	replace
892	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val1)-  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val1)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val1)-  1;	  int    val2    =(int)Math.floor(val1)-    1;    	non-compiled	[CE]  orphaned  case	218	None	replace
893	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1)-  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1)-  1;	  int    val2    =(int)Math.floor(val1)-    1;    	non-compiled	[CE]  orphaned  case	218	None	replace
894	[BUG]  [BUGGY]  if(val2  <  val1  ||  val2  >  val1)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  <  val1  ||  val2  >  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  <  val1  ||  val2  >  val1)  {	  if(val1    <    val2    ||    val1    >    val2)    {    	non-compiled	[CE]  orphaned  case	70	None	replace
895	[BUG]  [BUGGY]  if(val1  >=  val2  ||  val1  <  val1  ||  val2  >  val1)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2  ||  val1  <  val1  ||  val2  >  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2  ||  val1  <  val1  ||  val2  >  val1)  {	  if(val1    <    val2    ||    val1    >    val2)    {    	non-compiled	[CE]  orphaned  case	70	None	replace
896	[BUG]  [BUGGY]  if(val1  <  =  val2  ||  val1  >  val2)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  =  val2  ||  val1  >  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  =  val2  ||  val1  >  val2)  {	  if(val1    <    val2    ||    val1    >    val2)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
897	[BUG]  [BUGGY]  if(val1  >=  val2  ||  val1  <  val1  ||  val2  >  val2)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2  ||  val1  <  val1  ||  val2  >  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2  ||  val1  <  val1  ||  val2  >  val2)  {	  if(val1    <    val2    ||    val1    >    val2)    {    	non-compiled	[CE]  orphaned  case	70	None	replace
898	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)/  val1L;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2)/  val1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)/  val1L;	  int    val2    =(int)Math.floor(val1)/    val2L;    	non-compiled	[CE]  orphaned  case	65	None	replace
899	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2L  +  1;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2L  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2L  +  1;	  int    val2    =(int)Math.floor(val1)/    val2L;    	non-compiled	[CE]  orphaned  case	65	None	replace
900	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val1)/  val2L;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val1)/  val2L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val1)/  val2L;	  int    val2    =(int)Math.floor(val1)/    val2L;    	non-compiled	[CE]  orphaned  case	65	None	replace
901	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2L  *  val2;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2L  *  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2L  *  val2;	  int    val2    =(int)Math.floor(val1)/    val2L;    	non-compiled	[CE]  orphaned  case	65	None	replace
902	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  safeMultiply(val1,  val2);	  	compilable	  [FE]  StackOverflowError  	81	1	add
903	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  safeMultiply(val1,  val2);	  	compilable	  [FE]  StackOverflowError  	81	1	add
904	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  safeMultiply(val2,  val1);	  	compilable	  [FE]  StackOverflowError  	81	1	add
905	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  safeMultiply(val2,  val1);	  	compilable	  [FE]  StackOverflowError  	81	1	add
906	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  SafeMultiply(val1,  val2);  safeMultiply(val1,  val2);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  SafeMultiply(val1,  val2);  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val2);    SafeMultiply(val1,  val2);  safeMultiply(val1,  val2);	  	non-compiled	[CE]  cannot  find  symbol	81	None	add
907	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val1,  val2);	  	compilable	  [FE]  StackOverflowError  	81	1	add
908	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val1,  val2);	  	compilable	  [FE]  StackOverflowError  	81	1	add
909	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  secureMultiply(val1,  val2);  safeMultiply(val1,  val2);  [CE]  cannot  find  symbol  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  secureMultiply(val1,  val2);  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val2);    secureMultiply(val1,  val2);  safeMultiply(val1,  val2);	  	non-compiled	[CE]  cannot  find  symbol	81	None	add
910	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  cleanMultiply(val1,  val2);  safeMultiply(val1,  val2);  [CE]  cannot  find  symbol  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  cleanMultiply(val1,  val2);  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val2);    cleanMultiply(val1,  val2);  safeMultiply(val1,  val2);	  	non-compiled	[CE]  cannot  find  symbol	81	None	add
911	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  safeMultiply(val1);  safeMultiply(val2,  val1);  [CE]  no  suitable  method  found  for  safeMultiply(long)  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  safeMultiply(val1);  safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val2);    safeMultiply(val1);  safeMultiply(val2,  val1);	  	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long)	81	None	add
912	[BUG]  [BUGGY]  while(val1  <  =  val2)  {  throw  new  ArithmeticException( " ");  [CE]  illegal  start  of  expression  [FE]                  ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  =  val2)  {  throw  new  ArithmeticException( " ");  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  =  val2)  {  throw  new  ArithmeticException( " ");	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
913	[BUG]  [BUGGY]  while(val2  <  val1)  {  throw  new  ArithmeticException( " ");  [CE]  orphaned  case  [FE]                    ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val2  <  val1)  {  throw  new  ArithmeticException( " ");  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val2  <  val1)  {  throw  new  ArithmeticException( " ");	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  orphaned  case	19	None	replace
914	[BUG]  [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  [CE]  orphaned  case  [FE]                      ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  >=  val2)  {  throw  new  ArithmeticException( " ");	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  orphaned  case	19	None	replace
915	[BUG]  [BUGGY]  while(val1  >  val2)  {  throw  new  ArithmeticException( " ");  [CE]  orphaned  case  [FE]                        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  >  val2)  {  throw  new  ArithmeticException( " ");  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  >  val2)  {  throw  new  ArithmeticException( " ");	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  orphaned  case	19	None	replace
916	[BUG]  [BUGGY]  whilst(val1  <  val2)  {  throw  new  ArithmeticException( " ");  [CE]  [FE]                          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  whilst(val1  <  val2)  {  throw  new  ArithmeticException( " ");  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	whilst(val1  <  val2)  {  throw  new  ArithmeticException( " ");	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  	19	None	replace
917	[BUG]  [BUGGY]  while(val1  <  val1)  {  throw  new  ArithmeticException( " ");  [CE]  orphaned  case  [FE]                            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val1)  {  throw  new  ArithmeticException( " ");  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val1)  {  throw  new  ArithmeticException( " ");	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  orphaned  case	19	None	replace
918	[BUG]  [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long  value ");  [CE]  orphaned  case  [FE]                              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long  value ");  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long  value ");	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  orphaned  case	19	None	replace
919	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)/  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  1;	  int    val2    =    getValue(val1)+    1;    	non-compiled	[CE]  orphaned  case	187	None	replace
920	[BUG]  [BUGGY]  int  val2  =  getValue(val2)+  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)+  1;	  int    val2    =    getValue(val1)+    1;    	non-compiled	[CE]  orphaned  case	187	None	replace
921	[BUG]  [BUGGY]  int  val2  =  getValue(val1)+  1L;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)+  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)+  1L;	  int    val2    =    getValue(val1)+    1;    	non-compiled	[CE]  orphaned  case	187	None	replace
922	[BUG]  [BUGGY]  int  val2  =  getValue(val2)/  1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)/  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)/  1;	  int    val2    =    getValue(val1)+    1;    	non-compiled	[CE]  orphaned  case	187	None	replace
923	[BUG]  [BUGGY]  int  val2  =  getValue(val1)+  3;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)+  3;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)+  3;	  int    val2    =    getValue(val1)+    1;    	non-compiled	[CE]  orphaned  case	187	None	replace
924	[BUG]  [BUGGY]  if(val2!=  val1)  {  return  val2;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2!=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2!=  val1)  {  return  val2;  }	  if(val1!=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	110	None	replace
925	[BUG]  [BUGGY]  if(val2  >=  val1)  {  return  0;  }  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >=  val1)  {  return  0;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1)  {  return  0;  }	  if(val1    >=    val2)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	222	None	replace
926	[BUG]  [BUGGY]  SafeMultiply(val2,  val1)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply(val2,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply(val2,  val1)  {	  SafeMultiply(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	142	None	replace
927	[BUG]  [BUGGY]  SafeMultiply(val2,  val1,  val2)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply(val2,  val1,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply(val2,  val1,  val2)  {	  SafeMultiply(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	142	None	replace
928	[BUG]  [BUGGY]  SafeMultiply(val1,  val2,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply(val1,  val2,  false);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply(val1,  val2,  false);	  SafeMultiply(val1,    val2)    {    	non-compiled	[CE]  orphaned  case	142	None	replace
929	[BUG]  [BUGGY]  SafeMultiply(val1,  val2,  0)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply(val1,  val2,  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply(val1,  val2,  0)  {	  SafeMultiply(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	142	None	replace
930	[BUG]  [BUGGY]  if(val1  >  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }	          safeMultiply(val1,    val2);    safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	82	None	replace
931	[BUG]  [BUGGY]  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }	          safeMultiply(val1,    val2);    safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	82	None	replace
932	[BUG]  [BUGGY]  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val2,  val1);  }	          safeMultiply(val1,    val2);    safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	82	None	replace
933	[BUG]  [BUGGY]  if(val1  >  val2)  {  safeMultiply(val2,  val1);  }  else  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2)  {  safeMultiply(val2,  val1);  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  safeMultiply(val2,  val1);  }  else  {  safeMultiply(val1,  val2);  }	          safeMultiply(val1,    val2);    safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	82	None	replace
934	[BUG]  [BUGGY]  if(val1  >  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val2,  val1);  }	          safeMultiply(val1,    val2);    safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	82	None	replace
935	[BUG]  [BUGGY]  if(val1  >=  val2)  {  safeMultiply(val2,  val1);  }  else  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  safeMultiply(val2,  val1);  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  safeMultiply(val2,  val1);  }  else  {  safeMultiply(val1,  val2);  }	          safeMultiply(val1,    val2);    safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	82	None	replace
936	[BUG]  [BUGGY]  SafeRange(val1,  val2,  val1)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRange(val1,  val2,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRange(val1,  val2,  val1)  {	  SafeRange(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	313	None	replace
937	[BUG]  [BUGGY]  SafeRange(val2,  val1)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRange(val2,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRange(val2,  val1)  {	  SafeRange(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	313	None	replace
938	[BUG]  [BUGGY]  SafeRange(val1,  val2,  val2)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRange(val1,  val2,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRange(val1,  val2,  val2)  {	  SafeRange(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	313	None	replace
939	[BUG]  [BUGGY]  SafeRange(val2,  val1,  val2)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRange(val2,  val1,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRange(val2,  val1,  val2)  {	  SafeRange(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	313	None	replace
940	[BUG]  [BUGGY]  SafeRange(val1,  val2,  0)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRange(val1,  val2,  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRange(val1,  val2,  0)  {	  SafeRange(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	313	None	replace
941	[BUG]  [BUGGY]  SafeRange(val1,  val1)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRange(val1,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRange(val1,  val1)  {	  SafeRange(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	313	None	replace
942	[BUG]  [BUGGY]  SafeRange(val1,  val2,  false)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRange(val1,  val2,  false)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRange(val1,  val2,  false)  {	  SafeRange(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	313	None	replace
943	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	254	1	add
944	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	254	1	add
945	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	254	1	add
946	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	254	1	add
947	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	254	None	add
948	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ", ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( ", ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	254	1	add
949	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ", ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ", ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( ", ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	254	1	add
950	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	254	None	add
951	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  -  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  -  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  -  1;	  long    val2    =    val1    *    val2    +    1;    	non-compiled	[CE]  orphaned  case	115	None	replace
952	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  /  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  /  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  /  1;	  long    val2    =    val1    *    val2    +    1;    	non-compiled	[CE]  orphaned  case	115	None	replace
953	[BUG]  [BUGGY]  long  val2  =  val1  +  val2  +  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  +  val2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  +  val2  +  1;	  long    val2    =    val1    *    val2    +    1;    	non-compiled	[CE]  orphaned  case	115	None	replace
954	[BUG]  [BUGGY]  long  val2  =  val1.length  *  val2  +  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length  *  val2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length  *  val2  +  1;	  long    val2    =    val1    *    val2    +    1;    	non-compiled	[CE]  orphaned  case	115	None	replace
955	[BUG]  [BUGGY]  long  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	24	None	replace
956	[BUG]  [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	24	None	replace
957	[BUG]  [BUGGY]  for(int  val1  =  0L;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0L;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0L;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	24	None	replace
958	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1)/(double)Math.floor(val2);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1)/(double)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1)/(double)Math.floor(val2);	  double    val2    =(double)Math.floor(val1)-(double)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	236	None	replace
959	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val2)-(double)Math.floor(val1);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val2)-(double)Math.floor(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val2)-(double)Math.floor(val1);	  double    val2    =(double)Math.floor(val1)-(double)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	236	None	replace
960	[BUG]  [BUGGY]  double  val2  =(double)Math.log(val1)/(double)Math.floor(val2);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.log(val1)/(double)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.log(val1)/(double)Math.floor(val2);	  double    val2    =(double)Math.floor(val1)-(double)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	236	None	replace
961	[BUG]  [BUGGY]  double  val2  =(double)Math.log(val1)-(double)Math.log(val2);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.log(val1)-(double)Math.log(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.log(val1)-(double)Math.log(val2);	  double    val2    =(double)Math.floor(val1)-(double)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	236	None	replace
962	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)-(double)Math.floor(val2);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1)-(double)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)-(double)Math.floor(val2);	  double    val2    =(double)Math.floor(val1)-(double)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	236	None	replace
963	[BUG]  [BUGGY]  double  val2  =(double)Math.log(val2)-(double)Math.floor(val1);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.log(val2)-(double)Math.floor(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.log(val2)-(double)Math.floor(val1);	  double    val2    =(double)Math.floor(val1)-(double)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	236	None	replace
964	[BUG]  [BUGGY]  double  val2  =(double)Math.log(val1)-(double)Math.floor(val2);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.log(val1)-(double)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.log(val1)-(double)Math.floor(val2);	  double    val2    =(double)Math.floor(val1)-(double)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	236	None	replace
965	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	279	None	replace
966	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	279	None	replace
967	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	279	None	replace
968	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	279	None	replace
969	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	279	None	replace
970	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0L;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	269	None	replace
971	[BUG]  [BUGGY]  boolean  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	269	None	replace
972	[BUG]  [BUGGY]  short  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	269	None	replace
973	[BUG]  [BUGGY]  double  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	269	None	replace
974	[BUG]  [BUGGY]  SafeMultiply(val2)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply(val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply(val2)  {	  Switch(val2)    {    	non-compiled	[CE]  ';'  expected	214	None	replace
975	[BUG]  [BUGGY]  SafeMutator.safeMultiply(val1,  val2,  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMutator.safeMultiply(val1,  val2,  false);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeMultiply(val1,  val2,  false);	  Switch(val2)    {    	non-compiled	[CE]  orphaned  case	214	None	replace
976	[BUG]  [BUGGY]  while(val2!=  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val2!=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val2!=  val1)  {  throw  new  ArithmeticException( " ");  }	  while(val2    >=    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	379	None	replace
977	[BUG]  [BUGGY]  while(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }	  while(val2    >=    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	379	None	replace
978	[BUG]  [BUGGY]  while(val1  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  >=  val1)  {  throw  new  ArithmeticException( " ");  }	  while(val2    >=    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	379	None	replace
979	[BUG]  [BUGGY]  while(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }	  while(val2    >=    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	379	None	replace
980	[BUG]  [BUGGY]  while(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }	  while(val2    >=    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	379	None	replace
981	[BUG]  [BUGGY]  while(val1  >>  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  >>  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  >>  val2)  {  throw  new  ArithmeticException( " ");  }	  while(val2    >=    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	379	None	replace
982	[BUG]  [BUGGY]  SafeMutator.safeMultiply(val1,  val2,  val1)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMutator.safeMultiply(val1,  val2,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeMultiply(val1,  val2,  val1)  {	  SafeMutator.safeMultiply(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	147	None	replace
983	[BUG]  [BUGGY]  SafeMutator.safeMultiply(val2,  val1)  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMutator.safeMultiply(val2,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeMultiply(val2,  val1)  {	  SafeMutator.safeMultiply(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	147	None	replace
984	[BUG]  [BUGGY]  SafeMutator.safeMultiply(val1,  val2,  0);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMutator.safeMultiply(val1,  val2,  0);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeMultiply(val1,  val2,  0);	  SafeMutator.safeMultiply(val1,    val2)    {    	non-compiled	[CE]  orphaned  case	147	None	replace
985	[BUG]  [BUGGY]  SafeMutator.safeMultiply(val1,  val2,  val2)  {  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMutator.safeMultiply(val1,  val2,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeMultiply(val1,  val2,  val2)  {	  SafeMutator.safeMultiply(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	147	None	replace
986	[BUG]  [BUGGY]  SafeMutator.safeMultiply(val1,  val2,  null);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMutator.safeMultiply(val1,  val2,  null);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeMultiply(val1,  val2,  null);	  SafeMutator.safeMultiply(val1,    val2)    {    	non-compiled	[CE]  orphaned  case	147	None	replace
987	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	12	None	replace
988	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	12	None	replace
989	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	12	None	replace
990	[BUG]  [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0,  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
991	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	12	None	replace
992	[BUG]  [BUGGY]  int  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	46	None	replace
993	[BUG]  [BUGGY]  long  val2  =  0L;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0L;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0L;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	46	None	replace
994	[BUG]  [BUGGY]  long  val2  =  1;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  1;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  1;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	46	None	replace
995	[BUG]  [BUGGY]  long  val2  =  0L;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0L;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0L;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	46	None	replace
996	[BUG]  [BUGGY]  long  val2  =  val1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	46	None	replace
997	[BUG]  [BUGGY]  long  val2  =  val1;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	46	None	replace
998	[BUG]  [BUGGY]  short  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val2  =  0;  val  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	46	None	replace
999	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  return  -1L;  }	  if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	358	None	replace
1000	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  return  -1L;  }	  if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	358	None	replace
1001	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1!=  val2)  {  return  -1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1!=  val2)  {  return  -1;  }	  if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	358	None	replace
1002	[BUG]  [BUGGY]  if(val1  <  =  val2)  {  return  -1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  =  val2)  {  return  -1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  =  val2)  {  return  -1;  }	  if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  expression	358	None	replace
1003	[BUG]  [BUGGY]  if(val2  >=  val1)  {  return  -1;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >=  val1)  {  return  -1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1)  {  return  -1;  }	  if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	358	None	replace
1004	[BUG]  [BUGGY]  if(val2  ==  val1)  {  return  val1;  }  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  val1)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  val1)  {  return  val1;  }	  if(val2    >=    val1)    {    return    val1;    }    	non-compiled	[CE]  orphaned  case	357	None	replace
1005	[BUG]  [BUGGY]  while(val2  >=  val1)  {  return  val1;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val2  >=  val1)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val2  >=  val1)  {  return  val1;  }	  if(val2    >=    val1)    {    return    val1;    }    	non-compiled	[CE]  orphaned  case	357	None	replace
1006	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  >  expected	97	None	replace
1007	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	97	None	replace
1008	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	97	None	replace
1009	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	97	None	replace
1010	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	97	None	replace
1011	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  >  expected  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0L;  val2  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  >  expected	97	None	replace
1012	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/(int)Math.floor(val2,  val1);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/(int)Math.floor(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/(int)Math.floor(val2,  val1);	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2,    val1);    	non-compiled	[CE]  orphaned  case	237	None	replace
1013	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)-(long)Math.floor(val2,  val1);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1)-(long)Math.floor(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)-(long)Math.floor(val2,  val1);	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2,    val1);    	non-compiled	[CE]  orphaned  case	237	None	replace
1014	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)-(float)Math.floor(val2,  val1);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1)-(float)Math.floor(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)-(float)Math.floor(val2,  val1);	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2,    val1);    	non-compiled	[CE]  orphaned  case	237	None	replace
1015	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val1)-(char)Math.floor(val2,  val1);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.floor(val1)-(char)Math.floor(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val1)-(char)Math.floor(val2,  val1);	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2,    val1);    	non-compiled	[CE]  orphaned  case	237	None	replace
1016	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1)-(double)Math.floor(val2,  val1);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1)-(double)Math.floor(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1)-(double)Math.floor(val2,  val1);	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2,    val1);    	non-compiled	[CE]  orphaned  case	237	None	replace
1017	[BUG]  [BUGGY]  Switch(val1  >=  val2)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1  >=  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1  >=  val2)  {	  Switch(val1    ==    val2)    {    	non-compiled	[CE]  ';'  expected	281	None	replace
1018	[BUG]  [BUGGY]  Switch(val1  {  val2)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1  {  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1  {  val2)  {	  Switch(val1    ==    val2)    {    	non-compiled	[CE]  ')'  expected	281	None	replace
1019	[BUG]  [BUGGY]  Switch(val1  >  val2)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1  >  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1  >  val2)  {	  Switch(val1    ==    val2)    {    	non-compiled	[CE]  ';'  expected	281	None	replace
1020	[BUG]  [BUGGY]  ||(val1  >=  val1)&&(val2!=  val1))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val1  >=  val1)&&(val2!=  val1))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1  >=  val1)&&(val2!=  val1))  {  return  val2;  }	  ||(val1    >=    val2)&&(val2!=    val1))    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
1021	[BUG]  [BUGGY]  ||(val1  >>  val2)&&(val2!=  val1))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val1  >>  val2)&&(val2!=  val1))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1  >>  val2)&&(val2!=  val1))  {  return  val2;  }	  ||(val1    >=    val2)&&(val2!=    val1))    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
1022	[BUG]  [BUGGY]  ||(val1  ==  val2)&&(val2!=  val1))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val1  ==  val2)&&(val2!=  val1))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1  ==  val2)&&(val2!=  val1))  {  return  val2;  }	  ||(val1    >=    val2)&&(val2!=    val1))    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
1023	[BUG]  [BUGGY]  ||(val1!=  val2)&&(val2!=  val1))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val1!=  val2)&&(val2!=  val1))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1!=  val2)&&(val2!=  val1))  {  return  val2;  }	  ||(val1    >=    val2)&&(val2!=    val1))    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
1024	[BUG]  [BUGGY]  if(val1  >=  val2)  {  tries.put(val1,  val2);  }  [CE]  orphaned  case  [FE]                    ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  tries.put(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  tries.put(val1,  val2);  }	  tries.put(val1,    val2);    	non-compiled	[CE]  orphaned  case	20	None	replace
1025	[BUG]  [BUGGY]  if(val1  ==  val2)  {  tries.put(val1,  val2);  }  [CE]  orphaned  case  [FE]                      ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  tries.put(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  tries.put(val1,  val2);  }	  tries.put(val1,    val2);    	non-compiled	[CE]  orphaned  case	20	None	replace
1026	[BUG]  [BUGGY]  if(val1  >=  val2)  {  tries.put(val1,  val2);  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  tries.put(val1,  val2);  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  tries.put(val1,  val2);  }  else  {  throw  new  ArithmeticException( " ");  }	  tries.put(val1,    val2);    	non-compiled	[CE]  orphaned  case	20	None	replace
1027	[BUG]  [BUGGY]  if(val1  ==  val2)  {  tries.put(val1,  val2);  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  tries.put(val1,  val2);  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  tries.put(val1,  val2);  }  else  {  throw  new  ArithmeticException( " ");  }	  tries.put(val1,    val2);    	non-compiled	[CE]  orphaned  case	20	None	replace
1028	[BUG]  [BUGGY]  if(val1  >=  val2)  {  tries.put(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  tries.put(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  tries.put(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }	  tries.put(val1,    val2);    	non-compiled	[CE]  orphaned  case	20	None	replace
1029	[BUG]  [BUGGY]  if(val1  >  val2)  {  tries.put(val1,  val2);  }  [CE]  orphaned  case  [FE]                              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2)  {  tries.put(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  tries.put(val1,  val2);  }	  tries.put(val1,    val2);    	non-compiled	[CE]  orphaned  case	20	None	replace
1030	[BUG]  [BUGGY]  if(val1  ==  val2)  {  tries.put(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  tries.put(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  tries.put(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }	  tries.put(val1,    val2);    	non-compiled	[CE]  orphaned  case	20	None	replace
1031	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1)  {  throw  new  ArithmeticException( " ");  }	  safeMultiply(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	293	None	replace
1032	[BUG]  [BUGGY]  safeMultiply(val2,  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2,  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val1)  {  throw  new  ArithmeticException( " ");  }	  safeMultiply(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	293	None	replace
1033	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ".doubleValue());  }  [CE]  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ".doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ".doubleValue());  }	  safeMultiply(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	293	None	replace
1034	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ".getMessage());  }  [CE]  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ".getMessage());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ".getMessage());  }	  safeMultiply(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	293	None	replace
1035	[BUG]  [BUGGY]  safeMultiply(val1,  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val1)  {  throw  new  ArithmeticException( " ");  }	  safeMultiply(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	293	None	replace
1036	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ",  val2);  }  [CE]  [FE]                  ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ",  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ",  val2);  }	  safeMultiply(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	293	None	replace
1037	[BUG]  [BUGGY]  int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	319	None	replace
1038	[BUG]  [BUGGY]  long  val1  =  0L;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0L;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0L;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	319	None	replace
1039	[BUG]  [BUGGY]  int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	319	None	replace
1040	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ".);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ".);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ".);  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	319	None	replace
1041	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0L;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	319	None	replace
1042	[BUG]  [BUGGY]  for(long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	319	None	replace
1043	[BUG]  [BUGGY]  if(val1  >=  val1)  {  return  0L;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val1)  {  return  0L;  }	  if(val2    >=    val1)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	278	None	replace
1044	[BUG]  [BUGGY]  int  val2  =  val1.doubleValue();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1.doubleValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1.doubleValue();	  int    val2    =    val1.longValue();    	non-compiled	[CE]  orphaned  case	148	None	replace
1045	[BUG]  [BUGGY]  int  val2  =  val1.intValue();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1.intValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1.intValue();	  int    val2    =    val1.longValue();    	non-compiled	[CE]  orphaned  case	148	None	replace
1046	[BUG]  [BUGGY]  float  val2  =  val1.longValue();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  val1.longValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  val1.longValue();	  int    val2    =    val1.longValue();    	non-compiled	[CE]  orphaned  case	148	None	replace
1047	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
1048	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
1049	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
1050	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
1051	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
1052	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
1053	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	243	None	add
1054	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
1055	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
1056	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0	  	non-compiled	[CE]  ';'  expected	243	None	add
1057	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
1058	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
1059	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	243	None	add
1060	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
1061	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
1062	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
1063	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
1064	[BUG]  [BUGGY]  if(val2  >=  val1  ||  val2  ==  val1)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >=  val1  ||  val2  ==  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1  ||  val2  ==  val1)  {	  if(val1    >=    val2    ||    val1    ==    val2)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
1065	[BUG]  [BUGGY]  if(val1  >  val2  ||  val1  ==  val2)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2  ||  val1  ==  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2  ||  val1  ==  val2)  {	  if(val1    >=    val2    ||    val1    ==    val2)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
1066	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  secureMultiply(val2,  val1);  [CE]  orphaned  case  [FE]                StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  secureMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  secureMultiply(val2,  val1);	          safeMultiply(val1,    val2);    secureMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	87	None	replace
1067	[BUG]  [BUGGY]  safeMultiply(val2,  val1);  secureMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                  StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2,  val1);  secureMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val1);  secureMultiply(val1,  val2);	          safeMultiply(val1,    val2);    secureMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	87	None	replace
1068	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  ensureMultiply(val2,  val1);  [CE]  orphaned  case  [FE]                    StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  ensureMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  ensureMultiply(val2,  val1);	          safeMultiply(val1,    val2);    secureMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	87	None	replace
1069	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1);  secureMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                      StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1);  secureMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1);  secureMultiply(val1,  val2);	          safeMultiply(val1,    val2);    secureMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	87	None	replace
1070	[BUG]  [BUGGY]  secureMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                        StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  secureMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	secureMultiply(val1,  val2);	          safeMultiply(val1,    val2);    secureMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	87	None	replace
1071	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1,  val2)+  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1,  val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1,  val2)+  1;	  int    val2    =(int)Math.floor(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	104	None	replace
1072	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1,  val2)+  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1,  val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1,  val2)+  1;	  int    val2    =(int)Math.floor(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	104	None	replace
1073	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2,  val1)+  1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2,  val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2,  val1)+  1;	  int    val2    =(int)Math.floor(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	104	None	replace
1074	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val1,  val2)+  1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.floor(val1,  val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val1,  val2)+  1;	  int    val2    =(int)Math.floor(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	104	None	replace
1075	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  1L;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)/  1L;	  int    val2    =(int)Math.floor(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	104	None	replace
1076	[BUG]  [BUGGY]  if(val2  <  =  val1)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  <  =  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  <  =  val1)  {  return  0L;  }	  if(val1    <    =    val2)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	392	None	replace
1077	[BUG]  [BUGGY]  while(val1  <  val2)  {  if(val2  <  =  val1)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  if(val2  <  =  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  if(val2  <  =  val1)  {  return  0L;  }	  if(val1    <    =    val2)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	392	None	replace
1078	[BUG]  [BUGGY]  if(val1  <  =  val2  ||  val1  >  val2)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  =  val2  ||  val1  >  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  =  val2  ||  val1  >  val2)  {  return  0L;  }	  if(val1    <    =    val2)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	392	None	replace
1079	[BUG]  [BUGGY]  if(val1  <  =  val2  ||  val1  <  =  val2)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  =  val2  ||  val1  <  =  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  =  val2  ||  val1  <  =  val2)  {  return  0L;  }	  if(val1    <    =    val2)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	392	None	replace
1080	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  1L;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  1L;	  int    val2    =    getValue(val1)-    1;    	non-compiled	[CE]  orphaned  case	185	None	replace
1081	[BUG]  [BUGGY]  int  val2  =  getValue(val2)-  1L;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)-  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)-  1L;	  int    val2    =    getValue(val1)-    1;    	non-compiled	[CE]  orphaned  case	185	None	replace
1082	[BUG]  [BUGGY]  float  val2  =  getValue(val1)-  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  getValue(val1)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val1)-  1;	  int    val2    =    getValue(val1)-    1;    	non-compiled	[CE]  orphaned  case	185	None	replace
1083	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	368	None	replace
1084	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	368	None	replace
1085	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	368	None	replace
1086	[BUG]  [BUGGY]  long  val1  =  0;  val  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	368	None	replace
1087	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	368	None	replace
1088	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	368	None	replace
1089	[BUG]  [BUGGY]  int  val2  =  Math.min(val2,  length);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(val2,  length);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(val2,  length);	  int    val2    =    Math.min(length,    val1);    	non-compiled	[CE]  orphaned  case	337	None	replace
1090	[BUG]  [BUGGY]  long  val2  =  Math.min(length,  val1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  Math.min(length,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  Math.min(length,  val1);	  int    val2    =    Math.min(length,    val1);    	non-compiled	[CE]  orphaned  case	337	None	replace
1091	[BUG]  [BUGGY]  int  val2  =  Math.min(length,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(length,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(length,  val2);	  int    val2    =    Math.min(length,    val1);    	non-compiled	[CE]  orphaned  case	337	None	replace
1092	[BUG]  [BUGGY]  int  val2  =  Math.max(length,  val2);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.max(length,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.max(length,  val2);	  int    val2    =    Math.min(length,    val1);    	non-compiled	[CE]  orphaned  case	337	None	replace
1093	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  getValue(val1,  val2);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)/  getValue(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  getValue(val1,  val2);	  int    val2    =    getValue(val1)-    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	139	None	replace
1094	[BUG]  [BUGGY]  int  val2  =  getValue(val2)-  getValue(val1,  val1);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)-  getValue(val1,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)-  getValue(val1,  val1);	  int    val2    =    getValue(val1)-    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	139	None	replace
1095	[BUG]  [BUGGY]  long  val2  =  getValue(val1)-  getValue(val1,  val2);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1)-  getValue(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1)-  getValue(val1,  val2);	  int    val2    =    getValue(val1)-    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	139	None	replace
1096	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  getValue(val1,  val2)-  1;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  getValue(val1,  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  getValue(val1,  val2)-  1;	  int    val2    =    getValue(val1)-    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	139	None	replace
1097	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)-  getValue(val1,  val2);  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)-  getValue(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)-  getValue(val1,  val2);	  int    val2    =    getValue(val1)-    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	139	None	replace
1098	[BUG]  [BUGGY]  float  val2  =  getValue(val1)-  getValue(val1,  val2);  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  getValue(val1)-  getValue(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val1)-  getValue(val1,  val2);	  int    val2    =    getValue(val1)-    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	139	None	replace
1099	[BUG]  [BUGGY]  if(val2!=  val1)  {  return  0L;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2!=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2!=  val1)  {  return  0L;  }	  if(val1!=    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	227	None	replace
1100	[BUG]  [BUGGY]  int  val2  =  val1  *  val2.longValue();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1  *  val2.longValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1  *  val2.longValue();	  long    val2    =    val1    *    val2.longValue();    	non-compiled	[CE]  orphaned  case	280	None	replace
1101	[BUG]  [BUGGY]  long  val2  =  val1  *  val2.longValue()  +  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2.longValue()  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2.longValue()  +  1;	  long    val2    =    val1    *    val2.longValue();    	non-compiled	[CE]  orphaned  case	280	None	replace
1102	[BUG]  [BUGGY]  long  val2  =  val1  *  val2.getValue();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2.getValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2.getValue();	  long    val2    =    val1    *    val2.longValue();    	non-compiled	[CE]  orphaned  case	280	None	replace
1103	[BUG]  [BUGGY]  long  val2  =  val1  *  val2.doubleValue();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2.doubleValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2.doubleValue();	  long    val2    =    val1    *    val2.longValue();    	non-compiled	[CE]  orphaned  case	280	None	replace
1104	[BUG]  [BUGGY]  if(val2  <  val1)  {  return  val2;  }  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  <  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  <  val1)  {  return  val2;  }	  if(val1    <    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	297	None	replace
1105	[BUG]  [BUGGY]  ||(val1  <  val2)&&(val2  <  val1))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val1  <  val2)&&(val2  <  val1))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1  <  val2)&&(val2  <  val1))  {  return  val2;  }	  if(val1    <    val2)    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	297	None	replace
1106	[BUG]  [BUGGY]  double  val2  =  getValue(val1)-  getValue(val2);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =  getValue(val1)-  getValue(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =  getValue(val1)-  getValue(val2);	  float    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	366	None	replace
1107	[BUG]  [BUGGY]  float  val2  =  getValue(val1)/  getValue(val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  getValue(val1)/  getValue(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val1)/  getValue(val2);	  float    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	366	None	replace
1108	[BUG]  [BUGGY]  float  val2  =  getValue(val1)-  getValue(val2)-  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  getValue(val1)-  getValue(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val1)-  getValue(val2)-  1;	  float    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	366	None	replace
1109	[BUG]  [BUGGY]  safeMultiply(val1)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1)  {	  SafeMultiply(val1)    {    	non-compiled	[CE]  ';'  expected	215	None	replace
1110	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >=  1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >=  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  >=  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	275	None	replace
1111	[BUG]  [BUGGY]  for(long  val2  =  0;  val1  <  val2.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(long  val2  =  0;  val1  <  val2.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val2  =  0;  val1  <  val2.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	275	None	replace
1112	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >>  1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >>  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  >>  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	275	None	replace
1113	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  ==  1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  ==  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  ==  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	275	None	replace
1114	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  <  =  1)  {  safeMultiply(val1,  val2);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  <  =  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  <  =  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  illegal  start  of  expression	275	None	replace
1115	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	275	None	replace
1116	[BUG]  [BUGGY]  while(val1  >  val2)  {  return  val2;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  >  val2)  {  return  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  >  val2)  {  return  val2;	  while(val1    >=    val2)    {    return    val2;    	non-compiled	[CE]  orphaned  case	113	None	replace
1117	[BUG]  [BUGGY]  while(val1!=  val2)  {  return  val2;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1!=  val2)  {  return  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1!=  val2)  {  return  val2;	  while(val1    >=    val2)    {    return    val2;    	non-compiled	[CE]  orphaned  case	113	None	replace
1118	[BUG]  [BUGGY]  while(val1  ==  val2)  {  return  val2;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  ==  val2)  {  return  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  ==  val2)  {  return  val2;	  while(val1    >=    val2)    {    return    val2;    	non-compiled	[CE]  orphaned  case	113	None	replace
1119	[BUG]  [BUGGY]  while(val1  >=  val2)  {  return  val2;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  >=  val2)  {  return  val2;  }	  while(val1    >=    val2)    {    return    val2;    	non-compiled	[CE]  orphaned  case	113	None	replace
1120	[BUG]  [BUGGY]  while(val1  >>  val2)  {  return  val2;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  >>  val2)  {  return  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  >>  val2)  {  return  val2;	  while(val1    >=    val2)    {    return    val2;    	non-compiled	[CE]  orphaned  case	113	None	replace
1121	[BUG]  [BUGGY]  while(val2  >=  val1)  {  return  val1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val2  >=  val1)  {  return  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val2  >=  val1)  {  return  val1;	  while(val1    >=    val2)    {    return    val2;    	non-compiled	[CE]  orphaned  case	113	None	replace
1122	[BUG]  [BUGGY]  long  val2  =  Math.min(val1,  val2)-  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  Math.min(val1,  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  Math.min(val1,  val2)-  1;	  int    val2    =    Math.min(val1,    val2)-    1;    	non-compiled	[CE]  orphaned  case	43	None	replace
1123	[BUG]  [BUGGY]  int  val2  =  Math.max(val2,  val1)-  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.max(val2,  val1)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.max(val2,  val1)-  1;	  int    val2    =    Math.min(val1,    val2)-    1;    	non-compiled	[CE]  orphaned  case	43	None	replace
1124	[BUG]  [BUGGY]  int  val2  =  Math.min(val1,  val2)-  1L;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(val1,  val2)-  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(val1,  val2)-  1L;	  int    val2    =    Math.min(val1,    val2)-    1;    	non-compiled	[CE]  orphaned  case	43	None	replace
1125	[BUG]  [BUGGY]  int  val2  =  Math.max(val1,  val2)-  1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.max(val1,  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.max(val1,  val2)-  1;	  int    val2    =    Math.min(val1,    val2)-    1;    	non-compiled	[CE]  orphaned  case	43	None	replace
1126	[BUG]  [BUGGY]  int  val2  =  Math.min(val1,  val2)-  2;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(val1,  val2)-  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(val1,  val2)-  2;	  int    val2    =    Math.min(val1,    val2)-    1;    	non-compiled	[CE]  orphaned  case	43	None	replace
1127	[BUG]  [BUGGY]  int  val2  =  Math.min(0,  val2)-  1;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(0,  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(0,  val2)-  1;	  int    val2    =    Math.min(val1,    val2)-    1;    	non-compiled	[CE]  orphaned  case	43	None	replace
1128	[BUG]  [BUGGY]  boolean  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	323	None	replace
1129	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0L;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	323	None	replace
1130	[BUG]  [BUGGY]  short  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	323	None	replace
1131	[BUG]  [BUGGY]  double  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	323	None	replace
1132	[BUG]  [BUGGY]  for(int  val2  =  1;  val!=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val!=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val!=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val!=    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	290	None	replace
1133	[BUG]  [BUGGY]  long  val2  =  0;  val!=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val!=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val!=  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val!=    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  not  a  statement	290	None	replace
1134	[BUG]  [BUGGY]  for(int  val2  =  0;  val!=  val2.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val!=  val2.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val!=  val2.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val!=    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	290	None	replace
1135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1136	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1138	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1140	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2!=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2!=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1142	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2!=  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2!=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2!=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1144	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2!=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2!=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1146	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2!=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2!=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2!=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2!=  val1)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2!=  val1)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1148	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2!=  val1)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2!=  val1)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2!=  val1)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1149	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	211	None	add
1150	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  if(val1  >>  val1)  {  return  val2;  }  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  if(val1  >>  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  if(val1  >>  val1)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	211	None	add
1151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1152	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1153	[BUG]  [BUGGY]  switch(val1,  val2).restrictNullOrUndefined()  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictNullOrUndefined()  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictNullOrUndefined()  {	  switch(val1,    val2).restrictByNotNullOrUndefined()    {    	non-compiled	[CE]  ')'  expected	377	None	replace
1154	[BUG]  [BUGGY]  switch(val2,  val1).restrictByNotNullOrUndefined()  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val2,  val1).restrictByNotNullOrUndefined()  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val2,  val1).restrictByNotNullOrUndefined()  {	  switch(val1,    val2).restrictByNotNullOrUndefined()    {    	non-compiled	[CE]  ')'  expected	377	None	replace
1155	[BUG]  [BUGGY]  switch(val1,  val2)&&  val2.restrictByNotNullOrUndefined()  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2)&&  val2.restrictByNotNullOrUndefined()  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2)&&  val2.restrictByNotNullOrUndefined()  {	  switch(val1,    val2).restrictByNotNullOrUndefined()    {    	non-compiled	[CE]  ')'  expected	377	None	replace
1156	[BUG]  [BUGGY]  switch(val1,  val2).restrictStrictByNotNullOrUndefined()  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictStrictByNotNullOrUndefined()  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictStrictByNotNullOrUndefined()  {	  switch(val1,    val2).restrictByNotNullOrUndefined()    {    	non-compiled	[CE]  ')'  expected	377	None	replace
1157	[BUG]  [BUGGY]  switch(val1,  val2).restrictByNotEmpty()  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictByNotEmpty()  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictByNotEmpty()  {	  switch(val1,    val2).restrictByNotNullOrUndefined()    {    	non-compiled	[CE]  ')'  expected	377	None	replace
1158	[BUG]  [BUGGY]  Switch(val2,  val1,  val2)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val2,  val1,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val2,  val1,  val2)  {	  Switch(val2,    val1)    {    	non-compiled	[CE]  ';'  expected	145	None	replace
1159	[BUG]  [BUGGY]  Switch(val2,  val2)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val2,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val2,  val2)  {	  Switch(val2,    val1)    {    	non-compiled	[CE]  ';'  expected	145	None	replace
1160	[BUG]  [BUGGY]  switch(val1,  double  val2)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  double  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  double  val2)  {	  switch(val1,    int    val2)    {    	non-compiled	[CE]  ')'  expected	126	None	replace
1161	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	383	None	replace
1162	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	383	None	replace
1163	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	383	None	replace
1164	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  val++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	383	None	replace
1165	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	383	None	replace
1166	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	383	None	replace
1167	[BUG]  [BUGGY]  for(int  val2  =  1;  val  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	383	None	replace
1168	[BUG]  [BUGGY]  boolean  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	199	None	replace
1169	[BUG]  [BUGGY]  int  val2  =  0L;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0L;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0L;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	199	None	replace
1170	[BUG]  [BUGGY]  short  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	199	None	replace
1171	[BUG]  [BUGGY]  float  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	199	None	replace
1172	[BUG]  [BUGGY]  double  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	199	None	replace
1173	[BUG]  [BUGGY]  int  val2  =  1;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  1;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  1;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	199	None	replace
1174	[BUG]  [BUGGY]  boolean  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	33	None	replace
1175	[BUG]  [BUGGY]  if(val1  <  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	33	None	replace
1176	[BUG]  [BUGGY]  double  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	33	None	replace
1177	[BUG]  [BUGGY]  null  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  null  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	null  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	33	None	replace
1178	[BUG]  [BUGGY]  int  val2  =  0L;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0L;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0L;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	33	None	replace
1179	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)/  2  +  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)/  2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)/  2  +  1;	  int    val2    =    getValue(val1,    val2)/    2;    	non-compiled	[CE]  orphaned  case	76	None	replace
1180	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)/  3;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)/  3;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)/  3;	  int    val2    =    getValue(val1,    val2)/    2;    	non-compiled	[CE]  orphaned  case	76	None	replace
1181	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)/  4;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)/  4;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)/  4;	  int    val2    =    getValue(val1,    val2)/    2;    	non-compiled	[CE]  orphaned  case	76	None	replace
1182	[BUG]  [BUGGY]  int  val2  =  getValue(val2,  val1)/  2;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2,  val1)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2,  val1)/  2;	  int    val2    =    getValue(val1,    val2)/    2;    	non-compiled	[CE]  orphaned  case	76	None	replace
1183	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)/  2  *  1;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)/  2  *  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)/  2  *  1;	  int    val2    =    getValue(val1,    val2)/    2;    	non-compiled	[CE]  orphaned  case	76	None	replace
1184	[BUG]  [BUGGY]  int  val2  =  val1  *  val2);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1  *  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1  *  val2);	  long    val2    =    val1    *    val2);    	non-compiled	[CE]  ';'  expected	390	None	replace
1185	[BUG]  [BUGGY]  long  val2  =  val1  *  val2)-  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2)-  1;	  long    val2    =    val1    *    val2);    	non-compiled	[CE]  ';'  expected	390	None	replace
1186	[BUG]  [BUGGY]  long  val2  =  val1.length  *  val2);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length  *  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length  *  val2);	  long    val2    =    val1    *    val2);    	non-compiled	[CE]  ';'  expected	390	None	replace
1187	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val2,  val1);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val2,  val1);	  int    val2    =(int)Math.floor(val2,    val1);    	non-compiled	[CE]  orphaned  case	105	None	replace
1188	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val2,  val1);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val2,  val1);	  int    val2    =(int)Math.floor(val2,    val1);    	non-compiled	[CE]  orphaned  case	105	None	replace
1189	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val2,  val1);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.floor(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val2,  val1);	  int    val2    =(int)Math.floor(val2,    val1);    	non-compiled	[CE]  orphaned  case	105	None	replace
1190	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2,  val1)-  1;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2,  val1)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2,  val1)-  1;	  int    val2    =(int)Math.floor(val2,    val1);    	non-compiled	[CE]  orphaned  case	105	None	replace
1191	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val2,  val1);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val2,  val1);	  int    val2    =(int)Math.floor(val2,    val1);    	non-compiled	[CE]  orphaned  case	105	None	replace
1192	[BUG]  [BUGGY]  byte  val2  =(byte)Math.floor(val2,  val1);  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  byte  val2  =(byte)Math.floor(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	byte  val2  =(byte)Math.floor(val2,  val1);	  int    val2    =(int)Math.floor(val2,    val1);    	non-compiled	[CE]  orphaned  case	105	None	replace
1193	[BUG]  [BUGGY]  long  val2  =  val1  +  val2  *  val1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  +  val2  *  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  +  val2  *  val1;	  long    val2    =    val1    +    val2;    	non-compiled	[CE]  orphaned  case	120	None	replace
1194	[BUG]  [BUGGY]  long  val2  =  val1  +  val2  +  1L;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  +  val2  +  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  +  val2  +  1L;	  long    val2    =    val1    +    val2;    	non-compiled	[CE]  orphaned  case	120	None	replace
1195	[BUG]  [BUGGY]  long  val2  =  val1  +  val2.length;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  +  val2.length;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  +  val2.length;	  long    val2    =    val1    +    val2;    	non-compiled	[CE]  orphaned  case	120	None	replace
1196	[BUG]  [BUGGY]  while(val1  <  val2)  {  return  val2;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  return  val2;  }	  while(val1    <    val2)    {    return    val2;    	non-compiled	[CE]  orphaned  case	299	None	replace
1197	[BUG]  [BUGGY]  while(val1  <  val2)  {  return  val2  +  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  return  val2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  return  val2  +  1;	  while(val1    <    val2)    {    return    val2;    	non-compiled	[CE]  orphaned  case	299	None	replace
1198	[BUG]  [BUGGY]  while(val2  <  val1)  {  return  val1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val2  <  val1)  {  return  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val2  <  val1)  {  return  val1;	  while(val1    <    val2)    {    return    val2;    	non-compiled	[CE]  orphaned  case	299	None	replace
1199	[BUG]  [BUGGY]  while(val1  <  val2  ||  val1  >  val2)  {  return  val2;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2  ||  val1  >  val2)  {  return  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2  ||  val1  >  val2)  {  return  val2;	  while(val1    <    val2)    {    return    val2;    	non-compiled	[CE]  orphaned  case	299	None	replace
1200	[BUG]  [BUGGY]  while(val1  <  val1)  {  return  val2;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val1)  {  return  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val1)  {  return  val2;	  while(val1    <    val2)    {    return    val2;    	non-compiled	[CE]  orphaned  case	299	None	replace
1201	[BUG]  [BUGGY]  whilst(val1  <  val2)  {  return  val2;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  whilst(val1  <  val2)  {  return  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	whilst(val1  <  val2)  {  return  val2;	  while(val1    <    val2)    {    return    val2;    	non-compiled	[CE]  ';'  expected	299	None	replace
1202	[BUG]  [BUGGY]  long  val2  =  Math.min(val2,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  Math.min(val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  Math.min(val2,  val2);	  long    val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	39	None	replace
1203	[BUG]  [BUGGY]  long  val2  =  Math.max(val2,  val1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  Math.max(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  Math.max(val2,  val1);	  long    val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	39	None	replace
1204	[BUG]  [BUGGY]  long  val2  =  Math.min(val2,  val2)-  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  Math.min(val2,  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  Math.min(val2,  val2)-  1;	  long    val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	39	None	replace
1205	[BUG]  [BUGGY]  long  val2  =  Math.max(0,  val2);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  Math.max(0,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  Math.max(0,  val2);	  long    val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	39	None	replace
1206	[BUG]  [BUGGY]  long  val2  =  Math.min(val2,  val1)-  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  Math.min(val2,  val1)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  Math.min(val2,  val1)-  1;	  long    val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	39	None	replace
1207	[BUG]  [BUGGY]  long  val2  =  Math.min(0,  val2);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  Math.min(0,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  Math.min(0,  val2);	  long    val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	39	None	replace
1208	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	184	None	replace
1209	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  orphaned  case  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	184	None	replace
1210	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  >  expected  [FE]                                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  >  expected	184	None	replace
1211	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  orphaned  case  [FE]                                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	184	None	replace
1212	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2,  val2);  }  [CE]  orphaned  case  [FE]                                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2,  val2);  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	184	None	replace
1213	[BUG]  [BUGGY]  for(int  val2  =  1;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  orphaned  case  [FE]                                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	184	None	replace
1214	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  orphaned  case  [FE]                                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	184	None	replace
1215	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)/(long)Math.floor(val2);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1)/(long)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)/(long)Math.floor(val2);	  long    val2    =(long)Math.floor(val1)-(long)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	230	None	replace
1216	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val2)-(long)Math.floor(val1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val2)-(long)Math.floor(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val2)-(long)Math.floor(val1);	  long    val2    =(long)Math.floor(val1)-(long)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	230	None	replace
1217	[BUG]  [BUGGY]  safelyMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                  StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safelyMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safelyMultiply(val1,  val2);	          safeMultiply(val1,    val2);    safelyMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	88	None	replace
1218	[BUG]  [BUGGY]  safelyMultiply(val2,  val1);  [CE]  orphaned  case  [FE]                    StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safelyMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safelyMultiply(val2,  val1);	          safeMultiply(val1,    val2);    safelyMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	88	None	replace
1219	[BUG]  [BUGGY]  String  val2  =(String)Math.floor(val1,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  String  val2  =(String)Math.floor(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	String  val2  =(String)Math.floor(val1,  val2);	  char    val2    =(char)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	339	None	replace
1220	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val1,  val2)-  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.floor(val1,  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val1,  val2)-  1;	  char    val2    =(char)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	339	None	replace
1221	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val1,  val2)/  2;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.floor(val1,  val2)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val1,  val2)/  2;	  char    val2    =(char)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	339	None	replace
1222	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  >  expected	272	None	replace
1223	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0L;  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  >  expected	272	None	replace
1224	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1225	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1227	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1228	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	202	None	add
1229	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1230	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1232	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1233	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1234	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1235	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	202	None	add
1236	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1237	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1238	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1239	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1240	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >>  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	202	None	add
1241	[BUG]  [BUGGY]  while(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }	  while(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	14	None	replace
1242	[BUG]  [BUGGY]  while(val1  [Delete]  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  [Delete]  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  [Delete]  val2)  {  throw  new  ArithmeticException( " ");  }	  while(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	14	None	replace
1243	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1,  val2)-  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1,  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1,  val2)-  1;	  int    val2    =(int)Math.floor(val1,    val2)-    1;    	non-compiled	[CE]  orphaned  case	101	None	replace
1244	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1,  val2)-  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1,  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1,  val2)-  1;	  int    val2    =(int)Math.floor(val1,    val2)-    1;    	non-compiled	[CE]  orphaned  case	101	None	replace
1245	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-  1L;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)-  1L;	  int    val2    =(int)Math.floor(val1,    val2)-    1;    	non-compiled	[CE]  orphaned  case	101	None	replace
1246	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  /  1L;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  /  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  /  1L;	  long    val2    =    val1    *    val2    +    1L;    	non-compiled	[CE]  orphaned  case	118	None	replace
1247	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  -  1L;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  -  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  -  1L;	  long    val2    =    val1    *    val2    +    1L;    	non-compiled	[CE]  orphaned  case	118	None	replace
1248	[BUG]  [BUGGY]  long  val2  =  val1,  val2  +  1L;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2  +  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2  +  1L;	  long    val2    =    val1    *    val2    +    1L;    	non-compiled	[CE]  ';'  expected	118	None	replace
1249	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +  1L  +  1L;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +  1L  +  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +  1L  +  1L;	  long    val2    =    val1    *    val2    +    1L;    	non-compiled	[CE]  orphaned  case	118	None	replace
1250	[BUG]  [BUGGY]  long  val2  =  val1.length  *  val2  +  1L;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length  *  val2  +  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length  *  val2  +  1L;	  long    val2    =    val1    *    val2    +    1L;    	non-compiled	[CE]  orphaned  case	118	None	replace
1251	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	32	None	replace
1252	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	32	None	replace
1253	[BUG]  [BUGGY]  long  val2  =  val1.doubleValue().doubleValue();  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.doubleValue().doubleValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.doubleValue().doubleValue();	  long    val2    =    val1.longValue().longValue();    	non-compiled	[CE]  orphaned  case	155	None	replace
1254	[BUG]  [BUGGY]  long  val2  =  val1.longValue().longValue()  +  1;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.longValue().longValue()  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.longValue().longValue()  +  1;	  long    val2    =    val1.longValue().longValue();    	non-compiled	[CE]  orphaned  case	155	None	replace
1255	[BUG]  [BUGGY]  long  val2  =  val1.length().longValue();  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length().longValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length().longValue();	  long    val2    =    val1.longValue().longValue();    	non-compiled	[CE]  orphaned  case	155	None	replace
1256	[BUG]  [BUGGY]  long  val2  =  val2.longValue().longValue();  [CE]  orphaned  case  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val2.longValue().longValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val2.longValue().longValue();	  long    val2    =    val1.longValue().longValue();    	non-compiled	[CE]  orphaned  case	155	None	replace
1257	[BUG]  [BUGGY]  long  val2  =  val1.longValue().longValue()  *  val2.longValue();  [CE]  orphaned  case  [FE]                                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.longValue().longValue()  *  val2.longValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.longValue().longValue()  *  val2.longValue();	  long    val2    =    val1.longValue().longValue();    	non-compiled	[CE]  orphaned  case	155	None	replace
1258	[BUG]  [BUGGY]  long  val2  =  val1.doubleValue().longValue();  [CE]  orphaned  case  [FE]                                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.doubleValue().longValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.doubleValue().longValue();	  long    val2    =    val1.longValue().longValue();    	non-compiled	[CE]  orphaned  case	155	None	replace
1259	[BUG]  [BUGGY]  int  val2  =  val1.longValue().longValue();  [CE]  orphaned  case  [FE]                                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1.longValue().longValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1.longValue().longValue();	  long    val2    =    val1.longValue().longValue();    	non-compiled	[CE]  orphaned  case	155	None	replace
1260	[BUG]  [BUGGY]  long  val2  =  val1.longValue().longValue()  +  2;  [CE]  orphaned  case  [FE]                                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.longValue().longValue()  +  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.longValue().longValue()  +  2;	  long    val2    =    val1.longValue().longValue();    	non-compiled	[CE]  orphaned  case	155	None	replace
1261	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	28	None	replace
1262	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	28	None	replace
1263	[BUG]  [BUGGY]  for(int  val2  =  1;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	28	None	replace
1264	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  >  expected	93	None	replace
1265	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  >  expected	93	None	replace
1266	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)/(int)Math.floor(val1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2)/(int)Math.floor(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)/(int)Math.floor(val1);	  int    val2    =(int)Math.floor(val2)-(int)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	234	None	replace
1267	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val2)-(char)Math.floor(val1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.floor(val2)-(char)Math.floor(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val2)-(char)Math.floor(val1);	  int    val2    =(int)Math.floor(val2)-(int)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	234	None	replace
1268	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)/  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)/  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  getValue(val2)/  1;	  int    val2    =    getValue(val1)-    getValue(val2)+    1;    	non-compiled	[CE]  orphaned  case	138	None	replace
1269	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)/  2;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  getValue(val2)/  2;	  int    val2    =    getValue(val1)-    getValue(val2)+    1;    	non-compiled	[CE]  orphaned  case	138	None	replace
1270	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)+  2;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)+  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  getValue(val2)+  2;	  int    val2    =    getValue(val1)-    getValue(val2)+    1;    	non-compiled	[CE]  orphaned  case	138	None	replace
1271	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)/  1L;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)/  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  getValue(val2)/  1L;	  int    val2    =    getValue(val1)-    getValue(val2)+    1;    	non-compiled	[CE]  orphaned  case	138	None	replace
1272	[BUG]  [BUGGY]  if(val2  >=  val1  ||  val2!=  val1)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >=  val1  ||  val2!=  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1  ||  val2!=  val1)  {	  if(val1    >=    val2    ||    val1!=    val2)    {    	non-compiled	[CE]  orphaned  case	194	None	replace
1273	[BUG]  [BUGGY]  if(val1!=  val2  ||  val1!=  val1)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1!=  val2  ||  val1!=  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1!=  val2  ||  val1!=  val1)  {	  if(val1    >=    val2    ||    val1!=    val2)    {    	non-compiled	[CE]  orphaned  case	194	None	replace
1274	[BUG]  [BUGGY]  Switch(val1,  val2,  val5)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  val5)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  val5)  {	  Switch(val1,    val2,    val1)    {    	non-compiled	[CE]  ';'  expected	140	None	replace
1275	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)-  1L;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)-  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  getValue(val2)-  1L;	  int    val2    =    getValue(val1)-    getValue(val2)-    1;    	non-compiled	[CE]  orphaned  case	132	None	replace
1276	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)-  2;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)-  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  getValue(val2)-  2;	  int    val2    =    getValue(val1)-    getValue(val2)-    1;    	non-compiled	[CE]  orphaned  case	132	None	replace
1277	[BUG]  [BUGGY]  if(val1  ==  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val2,  val1);  }	          safeMultiply(val1,    val2);    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	86	None	replace
1278	[BUG]  [BUGGY]  if(val1  <  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val2,  val1);  }	          safeMultiply(val1,    val2);    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	86	None	replace
1279	[BUG]  [BUGGY]  if(val1  <  0L  ||  val2  >  0L)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  0L  ||  val2  >  0L)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  0L  ||  val2  >  0L)  {	  if(val1    ==    0L)    {    	non-compiled	[CE]  orphaned  case	159	None	replace
1280	[BUG]  [BUGGY]  if(val1  ==  0L  ||  val2  ==  0)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  0L  ||  val2  ==  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  0L  ||  val2  ==  0)  {	  if(val1    ==    0L)    {    	non-compiled	[CE]  orphaned  case	159	None	replace
1281	[BUG]  [BUGGY]  if(val1  ==  0L  ||  val2!=  0L)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  0L  ||  val2!=  0L)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  0L  ||  val2!=  0L)  {	  if(val1    ==    0L)    {    	non-compiled	[CE]  orphaned  case	159	None	replace
1282	[BUG]  [BUGGY]  if(val1  >=  0)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  0)  {	  if(val1    ==    0L)    {    	non-compiled	[CE]  orphaned  case	159	None	replace
1283	[BUG]  [BUGGY]  if(val1  ==  0L  ||  val2  ==  -1)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  0L  ||  val2  ==  -1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  0L  ||  val2  ==  -1)  {	  if(val1    ==    0L)    {    	non-compiled	[CE]  orphaned  case	159	None	replace
1284	[BUG]  [BUGGY]  long  val2  =  0L;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0L;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0L;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	196	None	replace
1285	[BUG]  [BUGGY]  long  val2  =  1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	196	None	replace
1286	[BUG]  [BUGGY]  long  val2  =  val1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	196	None	replace
1287	[BUG]  [BUGGY]  long  val2  =  val1;  val  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1;  val  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1;  val  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	196	None	replace
1288	[BUG]  [BUGGY]  short  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	196	None	replace
1289	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
1290	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
1291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
1292	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
1293	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	205	None	add
1294	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	205	None	add
1295	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
1296	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
1297	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	205	None	add
1298	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
1299	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
1300	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
1301	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
1302	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	205	None	add
1303	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val2;  }  [CE]  incompatible  types  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	205	None	add
1304	[BUG]  [BUGGY]  boolean  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	301	None	replace
1305	[BUG]  [BUGGY]  short  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	301	None	replace
1306	[BUG]  [BUGGY]  double  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	301	None	replace
1307	[BUG]  [BUGGY]  double  val2  =  getValue(val1,  val2);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =  getValue(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =  getValue(val1,  val2);	  float    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	388	None	replace
1308	[BUG]  [BUGGY]  float  val2  =  getValue(val1,  val2)-  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  getValue(val1,  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val1,  val2)-  1;	  float    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	388	None	replace
1309	[BUG]  [BUGGY]  float  val2  =  getValue(val1,  val2)+  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  getValue(val1,  val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val1,  val2)+  1;	  float    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	388	None	replace
1310	[BUG]  [BUGGY]  float  val2  =  getValue(val1,  val2)/  2;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  getValue(val1,  val2)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val1,  val2)/  2;	  float    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	388	None	replace
1311	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val1);  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val1);  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	180	None	replace
1312	[BUG]  [BUGGY]  long  val1  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  >  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  >  expected	180	None	replace
1313	[BUG]  [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	180	None	replace
1314	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  >  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  >  expected	180	None	replace
1315	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2).return0L;  }  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2).return0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2).return0L;  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	180	None	replace
1316	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	270	None	replace
1317	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	270	None	replace
1318	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	270	None	replace
1319	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	270	None	replace
1320	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	270	None	replace
1321	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	270	None	replace
1322	[BUG]  [BUGGY]  long  val2  =  1;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  1;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  1;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	47	None	replace
1323	[BUG]  [BUGGY]  short  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	47	None	replace
1324	[BUG]  [BUGGY]  long  val2  =  val1.length;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	47	None	replace
1325	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	47	None	replace
1326	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	303	None	replace
1327	[BUG]  [BUGGY]  for(int  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	303	None	replace
1328	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	303	None	replace
1329	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	303	None	replace
1330	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	303	None	replace
1331	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	10	None	replace
1332	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	10	None	replace
1333	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	10	None	replace
1334	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	10	None	replace
1335	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	181	None	replace
1336	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  >  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  >  expected	181	None	replace
1337	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	181	None	replace
1338	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	198	None	replace
1339	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	198	None	replace
1340	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	198	None	replace
1341	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	198	None	replace
1342	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	198	None	replace
1343	[BUG]  [BUGGY]  if(val1  <  val2  ||  val2  >  0)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val2  >  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val2  >  0)  {	  if(val1    ==    val2    ||    val2    ==    0)    {    	non-compiled	[CE]  orphaned  case	158	None	replace
1344	[BUG]  [BUGGY]  if(val1  >  val2  ||  val2  ==  0)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2  ||  val2  ==  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2  ||  val2  ==  0)  {	  if(val1    ==    val2    ||    val2    ==    0)    {    	non-compiled	[CE]  orphaned  case	158	None	replace
1345	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val1;	  int    val2    =(int)Math.floor(val2)/    val1;    	non-compiled	[CE]  orphaned  case	64	None	replace
1346	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val1)/  val2;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val1)/  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val1)/  val2;	  int    val2    =(int)Math.floor(val2)/    val1;    	non-compiled	[CE]  orphaned  case	64	None	replace
1347	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  val1;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)/  val1;	  int    val2    =(int)Math.floor(val2)/    val1;    	non-compiled	[CE]  orphaned  case	64	None	replace
1348	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val2)/  val1;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val2)/  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val2)/  val1;	  int    val2    =(int)Math.floor(val2)/    val1;    	non-compiled	[CE]  orphaned  case	64	None	replace
1349	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2,  val1)+  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2,  val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  getValue(val2,  val1)+  1;	  int    val2    =    getValue(val1)-    getValue(val2,    val1);    	non-compiled	[CE]  orphaned  case	137	None	replace
1350	[BUG]  [BUGGY]  long  val2  =  Math.min(value1,  val2);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  Math.min(value1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  Math.min(value1,  val2);	  int    val2    =    Math.min(value1,    val2);    	non-compiled	[CE]  orphaned  case	40	None	replace
1351	[BUG]  [BUGGY]  int  val2  =  Math.min(value2,  val1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(value2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(value2,  val1);	  int    val2    =    Math.min(value1,    val2);    	non-compiled	[CE]  orphaned  case	40	None	replace
1352	[BUG]  [BUGGY]  int  val2  =  Math.min(val2,  value1);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(val2,  value1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(val2,  value1);	  int    val2    =    Math.min(value1,    val2);    	non-compiled	[CE]  orphaned  case	40	None	replace
1353	[BUG]  [BUGGY]  float  val2  =  Math.min(value1,  val2);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  Math.min(value1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  Math.min(value1,  val2);	  int    val2    =    Math.min(value1,    val2);    	non-compiled	[CE]  orphaned  case	40	None	replace
1354	[BUG]  [BUGGY]  int  val2  =  Math.min(value1,  val2)-  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(value1,  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(value1,  val2)-  1;	  int    val2    =    Math.min(value1,    val2);    	non-compiled	[CE]  orphaned  case	40	None	replace
1355	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	94	None	replace
1356	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  val2;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)/  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  val2;	  int    val2    =    getValue(val1)-    val2;    	non-compiled	[CE]  orphaned  case	250	None	replace
1357	[BUG]  [BUGGY]  int  val2  =  getValue(val2)-  val1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)-  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)-  val1;	  int    val2    =    getValue(val1)-    val2;    	non-compiled	[CE]  orphaned  case	250	None	replace
1358	[BUG]  [BUGGY]  long  val2  =  getValue(val1)-  val2;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1)-  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1)-  val2;	  int    val2    =    getValue(val1)-    val2;    	non-compiled	[CE]  orphaned  case	250	None	replace
1359	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  val2  +  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  val2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  val2  +  1;	  int    val2    =    getValue(val1)-    val2;    	non-compiled	[CE]  orphaned  case	250	None	replace
1360	[BUG]  [BUGGY]  int  val2  =  getValue(val2)/  val1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)/  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)/  val1;	  int    val2    =    getValue(val1)-    val2;    	non-compiled	[CE]  orphaned  case	250	None	replace
1361	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  val2  *  val2;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  val2  *  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  val2  *  val2;	  int    val2    =    getValue(val1)-    val2;    	non-compiled	[CE]  orphaned  case	250	None	replace
1362	[BUG]  [BUGGY]  While(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  While(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	While(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  While(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	325	None	replace
1363	[BUG]  [BUGGY]  While(val1  <  =  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  While(val1  <  =  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	While(val1  <  =  val2)  {  throw  new  ArithmeticException( " ");  }	  While(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	325	None	replace
1364	[BUG]  [BUGGY]  While(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  While(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	While(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  While(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	325	None	replace
1365	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val2);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val2);	  double    val2    =(double)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	365	None	replace
1366	[BUG]  [BUGGY]  double  val2  =(double)Math.log(val1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.log(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.log(val1);	  double    val2    =(double)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	365	None	replace
1367	[BUG]  [BUGGY]  double  val2  =(double)Math.log(val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.log(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.log(val2);	  double    val2    =(double)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	365	None	replace
1368	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1)/  2;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1)/  2;	  double    val2    =(double)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	365	None	replace
1369	[BUG]  [BUGGY]  double  val2  =(double)Math.rint(val1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.rint(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.rint(val1);	  double    val2    =(double)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	365	None	replace
1370	[BUG]  [BUGGY]  long  val2  =(double)Math.floor(val1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(double)Math.floor(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(double)Math.floor(val1);	  double    val2    =(double)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	365	None	replace
1371	[BUG]  [BUGGY]  val2  =  Math.min(val2,  val2);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  val2  =  Math.min(val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	val2  =  Math.min(val2,  val2);	  val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	44	None	replace
1372	[BUG]  [BUGGY]  val2  =  Math.max(val2,  val1);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  val2  =  Math.max(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	val2  =  Math.max(val2,  val1);	  val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	44	None	replace
1373	[BUG]  [BUGGY]  val2  =  Math.min(val1,  val2);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  val2  =  Math.min(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	val2  =  Math.min(val1,  val2);	  val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	44	None	replace
1374	[BUG]  [BUGGY]  val2  =  Math.max(0,  val2);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  val2  =  Math.max(0,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	val2  =  Math.max(0,  val2);	  val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	44	None	replace
1375	[BUG]  [BUGGY]  int  val2  =  getValue(val2)/  2;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)/  2;	  int    val2    =    getValue(val1)-    2;    	non-compiled	[CE]  orphaned  case	190	None	replace
1376	[BUG]  [BUGGY]  int  val2  =  getValue(val2)-  2;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)-  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)-  2;	  int    val2    =    getValue(val1)-    2;    	non-compiled	[CE]  orphaned  case	190	None	replace
1377	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  2  +  1;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  2  +  1;	  int    val2    =    getValue(val1)-    2;    	non-compiled	[CE]  orphaned  case	190	None	replace
1378	[BUG]  [BUGGY]  float  val2  =  getValue(val1)-  2;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  getValue(val1)-  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val1)-  2;	  int    val2    =    getValue(val1)-    2;    	non-compiled	[CE]  orphaned  case	190	None	replace
1379	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  2  +  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)/  2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  2  +  1;	  int    val2    =    getValue(val1)/    2;    	non-compiled	[CE]  orphaned  case	189	None	replace
1380	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  4;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)/  4;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  4;	  int    val2    =    getValue(val1)/    2;    	non-compiled	[CE]  orphaned  case	189	None	replace
1381	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  2  *  1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)/  2  *  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  2  *  1;	  int    val2    =    getValue(val1)/    2;    	non-compiled	[CE]  orphaned  case	189	None	replace
1382	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  3;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)/  3;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  3;	  int    val2    =    getValue(val1)/    2;    	non-compiled	[CE]  orphaned  case	189	None	replace
1383	[BUG]  [BUGGY]  int  val2  =  getValue(val2)/  2L;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)/  2L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)/  2L;	  int    val2    =    getValue(val1)/    2;    	non-compiled	[CE]  orphaned  case	189	None	replace
1384	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  2  +  3;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)/  2  +  3;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  2  +  3;	  int    val2    =    getValue(val1)/    2;    	non-compiled	[CE]  orphaned  case	189	None	replace
1385	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  0L);  [CE]  orphaned  case  [FE]                  StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  0L);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  0L);	  safeMultiply(val1,    val2,    0);    	non-compiled	[CE]  orphaned  case	169	None	replace
1386	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  1);  [CE]  orphaned  case  [FE]                    StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  1);	  safeMultiply(val1,    val2,    0);    	non-compiled	[CE]  orphaned  case	169	None	replace
1387	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  0,  val1);  [CE]  orphaned  case  [FE]                      StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  0,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  0,  val1);	  safeMultiply(val1,    val2,    0);    	non-compiled	[CE]  orphaned  case	169	None	replace
1388	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  2);  [CE]  orphaned  case  [FE]                        StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  2);	  safeMultiply(val1,    val2,    0);    	non-compiled	[CE]  orphaned  case	169	None	replace
1389	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  0,  val2);  [CE]  orphaned  case  [FE]                          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  0,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  0,  val2);	  safeMultiply(val1,    val2,    0);    	non-compiled	[CE]  orphaned  case	169	None	replace
1390	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  0,  val1.length);  [CE]  orphaned  case  [FE]                            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  0,  val1.length);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  0,  val1.length);	  safeMultiply(val1,    val2,    0);    	non-compiled	[CE]  orphaned  case	169	None	replace
1391	[BUG]  [BUGGY]  switch(val1,  val2,  true)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2,  true)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2,  true)  {	  switch(val1,    val2,    false)    {    	non-compiled	[CE]  ')'  expected	127	None	replace
1392	[BUG]  [BUGGY]  switch(val1,  val2),  false)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2),  false)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2),  false)  {	  switch(val1,    val2,    false)    {    	non-compiled	[CE]  ')'  expected	127	None	replace
1393	[BUG]  [BUGGY]  switch(val1,  val2,  null)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2,  null)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2,  null)  {	  switch(val1,    val2,    false)    {    	non-compiled	[CE]  ')'  expected	127	None	replace
1394	[BUG]  [BUGGY]  switch(val1,  val2,  false,  true)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2,  false,  true)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2,  false,  true)  {	  switch(val1,    val2,    false)    {    	non-compiled	[CE]  ')'  expected	127	None	replace
1395	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	173	None	add
1396	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	173	1	add
1397	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	173	1	add
1398	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	173	None	add
1399	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	173	None	add
1400	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	173	None	add
1401	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]              ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	173	None	add
1402	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]                ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	173	1	add
1403	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]                ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	173	1	add
1404	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]                  ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	173	None	add
1405	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]                    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	173	None	add
1406	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2!=  val1)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]                      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2!=  val1)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2!=  val1)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	173	None	add
1407	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  <  val2)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  <  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  <  val2)  {	  if(val2    <    val1)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
1408	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  <  val1)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  <  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  <  val1)  {	  if(val2    <    val1)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
1409	[BUG]  [BUGGY]  safeMultiply(val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2)  {  throw  new  ArithmeticException( " ");  }	  safeMultiply(val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	326	None	replace
1410	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	51	None	replace
1411	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	51	None	replace
1412	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	51	None	replace
1413	[BUG]  [BUGGY]  short  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	51	None	replace
1414	[BUG]  [BUGGY]  boolean  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	51	None	replace
1415	[BUG]  [BUGGY]  float  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	51	None	replace
1416	[BUG]  [BUGGY]  double  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	51	None	replace
1417	[BUG]  [BUGGY]  ensureMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ensureMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	ensureMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }	  allowMultiply(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	295	None	replace
1418	[BUG]  [BUGGY]  enableMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  enableMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	enableMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }	  allowMultiply(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	295	None	replace
1419	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  >  expected	177	None	replace
1420	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	177	None	replace
1421	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	177	None	replace
1422	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	177	None	replace
1423	[BUG]  [BUGGY]  switch(val2  /  val1)  {  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val2  /  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val2  /  val1)  {	  switch(val1    /    val2)    {    	non-compiled	[CE]  possible  loss  of  precision	267	None	replace
1424	[BUG]  [BUGGY]  switch(val1.doubleValue()  /  val2)  {  [CE]  long  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1.doubleValue()  /  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1.doubleValue()  /  val2)  {	  switch(val1    /    val2)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	267	None	replace
1425	[BUG]  [BUGGY]  switch(val1  /  val2,  val1)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1  /  val2,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1  /  val2,  val1)  {	  switch(val1    /    val2)    {    	non-compiled	[CE]  ')'  expected	267	None	replace
1426	[BUG]  [BUGGY]  float  val2  =  getValue(val1,  val1);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  getValue(val1,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val1,  val1);	  int    val2    =    getValue(val1,    val1);    	non-compiled	[CE]  orphaned  case	79	None	replace
1427	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val1)-  1;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val1)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val1)-  1;	  int    val2    =    getValue(val1,    val1);    	non-compiled	[CE]  orphaned  case	79	None	replace
1428	[BUG]  [BUGGY]  long  val2  =  0;  val1  >=  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  >=  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  >=  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    >=    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	273	None	replace
1429	[BUG]  [BUGGY]  for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    >=    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	273	None	replace
1430	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  >=  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  >=  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  >=  val1.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    >=    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	273	None	replace
1431	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  >=  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  >=  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  >=  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    >=    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	273	None	replace
1432	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	48	None	replace
1433	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	48	None	replace
1434	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	48	None	replace
1435	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  true);  [CE]  orphaned  case  [FE]                StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  true);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  true);	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ")    +   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	336	None	replace
1436	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  null);  [CE]  orphaned  case  [FE]                  StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  null);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  null);	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ")    +   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	336	None	replace
1437	[BUG]  [BUGGY]  long  val2  =  Math.max(0,  val1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  Math.max(0,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  Math.max(0,  val1);	  long    val2    =    Math.min(val1,    val2);    	non-compiled	[CE]  orphaned  case	38	None	replace
1438	[BUG]  [BUGGY]  long  val2  =  Math.log(val1,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  Math.log(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  Math.log(val1,  val2);	  long    val2    =    Math.min(val1,    val2);    	non-compiled	[CE]  orphaned  case	38	None	replace
1439	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val2).reset();  [CE]  orphaned  case  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val2).reset();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val2).reset();	  safeMultiply(val1,    val2,    val1).reset();    	non-compiled	[CE]  orphaned  case	258	None	replace
1440	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1).set(val1);  [CE]  orphaned  case  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1).set(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1).set(val1);	  safeMultiply(val1,    val2,    val1).reset();    	non-compiled	[CE]  orphaned  case	258	None	replace
1441	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1).set(val2);  [CE]  orphaned  case  [FE]              StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1).set(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1).set(val2);	  safeMultiply(val1,    val2,    val1).reset();    	non-compiled	[CE]  orphaned  case	258	None	replace
1442	[BUG]  [BUGGY]  safeMultiply(val2,  val1).reset();  [CE]  orphaned  case  [FE]                StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2,  val1).reset();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val1).reset();	  safeMultiply(val1,    val2,    val1).reset();    	non-compiled	[CE]  orphaned  case	258	None	replace
1443	[BUG]  [BUGGY]  long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	360	None	replace
1444	[BUG]  [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	360	None	replace
1445	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	360	None	replace
1446	[BUG]  [BUGGY]  for(long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	360	None	replace
1447	[BUG]  [BUGGY]  switch(val1.doubleValue()  *  val2)  {  [CE]  long  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1.doubleValue()  *  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1.doubleValue()  *  val2)  {	  switch(val1    *    val2)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	286	None	replace
1448	[BUG]  [BUGGY]  switch(val2  *  val1)  {  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val2  *  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val2  *  val1)  {	  switch(val1    *    val2)    {    	non-compiled	[CE]  possible  loss  of  precision	286	None	replace
1449	[BUG]  [BUGGY]  switch(val1.longValue()  *  val2)  {  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1.longValue()  *  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1.longValue()  *  val2)  {	  switch(val1    *    val2)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	286	None	replace
1450	[BUG]  [BUGGY]  if(val1  ==  val2)  {  switch(val1,  val2)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  switch(val1,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  switch(val1,  val2)  {	  switch(val1,    val1)    {    	non-compiled	[CE]  ')'  expected	123	None	replace
1451	[BUG]  [BUGGY]  if(val1  ==  val2)  {  switch(val1,  val1)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  switch(val1,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  switch(val1,  val1)  {	  switch(val1,    val1)    {    	non-compiled	[CE]  ')'  expected	123	None	replace
1452	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  false,  true);  [CE]  orphaned  case  [FE]                StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  false,  true);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  false,  true);	  safeMultiply(val1,    val2,    false);    	non-compiled	[CE]  orphaned  case	168	None	replace
1453	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  true,  false);  [CE]  orphaned  case  [FE]                  StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  true,  false);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  true,  false);	  safeMultiply(val1,    val2,    false);    	non-compiled	[CE]  orphaned  case	168	None	replace
1454	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  true,  true);  [CE]  orphaned  case  [FE]                    StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  true,  true);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  true,  true);	  safeMultiply(val1,    val2,    false);    	non-compiled	[CE]  orphaned  case	168	None	replace
1455	[BUG]  [BUGGY]  safeMultiply(val2,  val1,  false);  [CE]  orphaned  case  [FE]                      StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2,  val1,  false);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val1,  false);	  safeMultiply(val1,    val2,    false);    	non-compiled	[CE]  orphaned  case	168	None	replace
1456	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	268	None	replace
1457	[BUG]  [BUGGY]  int  val2  =  getValue(val2)+  2;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)+  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)+  2;	  int    val2    =    getValue(val1)+    2;    	non-compiled	[CE]  orphaned  case	191	None	replace
1458	[BUG]  [BUGGY]  long  val2  =  getValue(val1)+  2;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1)+  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1)+  2;	  int    val2    =    getValue(val1)+    2;    	non-compiled	[CE]  orphaned  case	191	None	replace
1459	[BUG]  [BUGGY]  int  val2  =  getValue(val1)+  2  +  1;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)+  2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)+  2  +  1;	  int    val2    =    getValue(val1)+    2;    	non-compiled	[CE]  orphaned  case	191	None	replace
1460	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val2);	  int    val2    =(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	219	None	replace
1461	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val2);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val2);	  int    val2    =(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	219	None	replace
1462	[BUG]  [BUGGY]  byte  val2  =(byte)Math.floor(val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  byte  val2  =(byte)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	byte  val2  =(byte)Math.floor(val2);	  int    val2    =(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	219	None	replace
1463	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val1);	  int    val2    =(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	219	None	replace
1464	[BUG]  [BUGGY]  for(int  val2  =  0;  val3  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val3  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val3  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val3    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	347	None	replace
1465	[BUG]  [BUGGY]  long  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val3    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	347	None	replace
1466	[BUG]  [BUGGY]  for(int  val2  =  0;  val3  <  val1,  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val3  <  val1,  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val3  <  val1,  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val3    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	347	None	replace
1467	[BUG]  [BUGGY]  for(int  val2  =  0;  val3  >=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val3  >=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val3  >=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val3    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	347	None	replace
1468	[BUG]  [BUGGY]  for(int  val2  =  1;  val3  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val3  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val3  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val3    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	347	None	replace
1469	[BUG]  [BUGGY]  for(int  val2  =  0;  val3!=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val3!=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val3!=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val3    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	347	None	replace
1470	[BUG]  [BUGGY]  int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val3    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	347	None	replace
1471	[BUG]  [BUGGY]  for(int  val2  =  0;  val3  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val3  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val3  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val3    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	347	None	replace
1472	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
1473	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
1474	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)/  VAL1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2)/  VAL1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)/  VAL1;	  int    val2    =(int)Math.floor(val1)/    VAL1;    	non-compiled	[CE]  orphaned  case	371	None	replace
1475	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)/  VAL1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1)/  VAL1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)/  VAL1;	  int    val2    =(int)Math.floor(val1)/    VAL1;    	non-compiled	[CE]  orphaned  case	371	None	replace
1476	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  VAL2;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  VAL2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  VAL2;	  int    val2    =(int)Math.floor(val1)/    VAL1;    	non-compiled	[CE]  orphaned  case	371	None	replace
1477	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)/  VAL1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1)/  VAL1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)/  VAL1;	  int    val2    =(int)Math.floor(val1)/    VAL1;    	non-compiled	[CE]  orphaned  case	371	None	replace
1478	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val1)/  VAL1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val1)/  VAL1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val1)/  VAL1;	  int    val2    =(int)Math.floor(val1)/    VAL1;    	non-compiled	[CE]  orphaned  case	371	None	replace
1479	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val2)/  VAL1;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val2)/  VAL1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val2)/  VAL1;	  int    val2    =(int)Math.floor(val1)/    VAL1;    	non-compiled	[CE]  orphaned  case	371	None	replace
1480	[BUG]  [BUGGY]  boolean  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	304	None	replace
1481	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	304	None	replace
1482	[BUG]  [BUGGY]  int  val2  =  0L;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0L;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0L;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	304	None	replace
1483	[BUG]  [BUGGY]  float  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	304	None	replace
1484	[BUG]  [BUGGY]  switch(val2  -  val1)  {  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val2  -  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val2  -  val1)  {	  switch(val1    -    val2)    {    	non-compiled	[CE]  possible  loss  of  precision	266	None	replace
1485	[BUG]  [BUGGY]  switch(val1.doubleValue()  -  val2)  {  [CE]  long  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1.doubleValue()  -  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1.doubleValue()  -  val2)  {	  switch(val1    -    val2)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	266	None	replace
1486	[BUG]  [BUGGY]  switch(val1.longValue()  -  val2)  {  [CE]  long  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1.longValue()  -  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1.longValue()  -  val2)  {	  switch(val1    -    val2)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	266	None	replace
1487	[BUG]  [BUGGY]  switch(val1  -  val2  -  val1)  {  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1  -  val2  -  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1  -  val2  -  val1)  {	  switch(val1    -    val2)    {    	non-compiled	[CE]  possible  loss  of  precision	266	None	replace
1488	[BUG]  [BUGGY]  switch(val1,  val2).restrictNullOrUndefined().restrictByNotNullOrUndefined())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictNullOrUndefined().restrictByNotNullOrUndefined())  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictNullOrUndefined().restrictByNotNullOrUndefined())  {	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  ')'  expected	376	None	replace
1489	[BUG]  [BUGGY]  Switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  ';'  expected	376	None	replace
1490	[BUG]  [BUGGY]  switch(val2,  val1).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val2,  val1).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val2,  val1).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  ')'  expected	376	None	replace
1491	[BUG]  [BUGGY]  switch(val1,  val2).restrictNullOrUndefined().restrictNullOrUndefined())  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictNullOrUndefined().restrictNullOrUndefined())  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictNullOrUndefined().restrictNullOrUndefined())  {	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  ')'  expected	376	None	replace
1492	[BUG]  [BUGGY]  switch(val1,  val1).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val1).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val1).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  ')'  expected	376	None	replace
1493	[BUG]  [BUGGY]  switch(val1,  val2.restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2.restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2.restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  ')'  expected	376	None	replace
1494	[BUG]  [BUGGY]  switch(val1,  val2).restrictStrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictStrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictStrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  ')'  expected	376	None	replace
1495	[BUG]  [BUGGY]  switch(val1,  val2).restrictAllNullOrUndefined().restrictByNotNullOrUndefined())  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictAllNullOrUndefined().restrictByNotNullOrUndefined())  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictAllNullOrUndefined().restrictByNotNullOrUndefined())  {	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  ')'  expected	376	None	replace
1496	[BUG]  [BUGGY]  long  val2  =  val1.doubleValue()  +  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.doubleValue()  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.doubleValue()  +  1;	  long    val2    =    val1.doubleValue();    	non-compiled	[CE]  orphaned  case	149	None	replace
1497	[BUG]  [BUGGY]  long  val2  =  val1.doubleValue()  +  2;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.doubleValue()  +  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.doubleValue()  +  2;	  long    val2    =    val1.doubleValue();    	non-compiled	[CE]  orphaned  case	149	None	replace
1498	[BUG]  [BUGGY]  long  val2  =  val1.doubleValue()  *  val2);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.doubleValue()  *  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.doubleValue()  *  val2);	  long    val2    =    val1.doubleValue();    	non-compiled	[CE]  ';'  expected	149	None	replace
1499	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  >  expected	96	None	replace
1500	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	96	None	replace
1501	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2  <  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	96	None	replace
1502	[BUG]  [BUGGY]  long  val2  =  val1.length  /  val2;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length  /  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length  /  val2;	  long    val2    =    val1.length    *    val2;    	non-compiled	[CE]  orphaned  case	119	None	replace
1503	[BUG]  [BUGGY]  long  val2  =  val2.length  *  val1.length;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val2.length  *  val1.length;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val2.length  *  val1.length;	  long    val2    =    val1.length    *    val2;    	non-compiled	[CE]  orphaned  case	119	None	replace
1504	[BUG]  [BUGGY]  long  val2  =  val2.length  *  val1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val2.length  *  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val2.length  *  val1;	  long    val2    =    val1.length    *    val2;    	non-compiled	[CE]  orphaned  case	119	None	replace
1505	[BUG]  [BUGGY]  long  val2  =  val1.length  -  val2;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length  -  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length  -  val2;	  long    val2    =    val1.length    *    val2;    	non-compiled	[CE]  orphaned  case	119	None	replace
1506	[BUG]  [BUGGY]  long  val2  =  val1.length  *  val2.length;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length  *  val2.length;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length  *  val2.length;	  long    val2    =    val1.length    *    val2;    	non-compiled	[CE]  orphaned  case	119	None	replace
1507	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val2)-  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val2)-  1;	  long    val2    =(long)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	217	None	replace
1508	[BUG]  [BUGGY]  long  val2  =(long)Math.log(val1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.log(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.log(val1);	  long    val2    =(long)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	217	None	replace
1509	[BUG]  [BUGGY]  long  val2  =(long)Math.log(val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.log(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.log(val2);	  long    val2    =(long)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	217	None	replace
1510	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val2.length;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	385	None	replace
1511	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	385	None	replace
1512	[BUG]  [BUGGY]  for(int  val1  =  1;  val  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	385	None	replace
1513	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	385	None	replace
1514	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	385	None	replace
1515	[BUG]  [BUGGY]  if(val1  <  =  val2  ||  val1  >  val1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  =  val2  ||  val1  >  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  =  val2  ||  val1  >  val1)  {	  if(val1    <    val2    ||    val1    >    val1)    {    	non-compiled	[CE]  illegal  start  of  expression	344	None	replace
1516	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  >  val2  ||  val1  >=  val2)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  >  val2  ||  val1  >=  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  >  val2  ||  val1  >=  val2)  {	  if(val1    <    val2    ||    val1    >    val1)    {    	non-compiled	[CE]  orphaned  case	344	None	replace
1517	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  ==  val1)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  ==  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  ==  val1)  {	  if(val1    <    val2    ||    val1    >    val1)    {    	non-compiled	[CE]  orphaned  case	344	None	replace
1518	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	59	1	add
1519	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	59	1	add
1520	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	59	1	add
1521	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	59	1	add
1522	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
1523	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
1524	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  [CE]  <identifier>  expected  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( " ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	non-compiled	[CE]  <identifier>  expected	59	None	add
1525	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]              ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	59	None	add
1526	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]                ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	59	None	add
1527	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2.length  +  1;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2.length  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2.length  +  1;	  int    val2    =(int)Math.floor(val1)/    val2.length;    	non-compiled	[CE]  orphaned  case	67	None	replace
1528	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)/  val2.length;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1)/  val2.length;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)/  val2.length;	  int    val2    =(int)Math.floor(val1)/    val2.length;    	non-compiled	[CE]  orphaned  case	67	None	replace
1529	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2.length  +  2;  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2.length  +  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2.length  +  2;	  int    val2    =(int)Math.floor(val1)/    val2.length;    	non-compiled	[CE]  orphaned  case	67	None	replace
1530	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)/  val2.length;  [CE]  orphaned  case  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1)/  val2.length;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)/  val2.length;	  int    val2    =(int)Math.floor(val1)/    val2.length;    	non-compiled	[CE]  orphaned  case	67	None	replace
1531	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)/  val1.length;  [CE]  orphaned  case  [FE]                                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2)/  val1.length;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)/  val1.length;	  int    val2    =(int)Math.floor(val1)/    val2.length;    	non-compiled	[CE]  orphaned  case	67	None	replace
1532	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2.length  -  1;  [CE]  orphaned  case  [FE]                                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2.length  -  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2.length  -  1;	  int    val2    =(int)Math.floor(val1)/    val2.length;    	non-compiled	[CE]  orphaned  case	67	None	replace
1533	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val1)/  val2.length;  [CE]  orphaned  case  [FE]                                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val1)/  val2.length;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val1)/  val2.length;	  int    val2    =(int)Math.floor(val1)/    val2.length;    	non-compiled	[CE]  orphaned  case	67	None	replace
1534	[BUG]  [BUGGY]  if(val2!=  val1)  {  return  0;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2!=  val1)  {  return  0;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2!=  val1)  {  return  0;  }	  if(val1!=    val2)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	225	None	replace
1535	[BUG]  [BUGGY]  if(val2  <  =  val1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  <  =  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  <  =  val1)  {	  if(val1    <    =    val2)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
1536	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  <  =  val2)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  <  =  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  <  =  val2)  {	  if(val1    <    =    val2)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
1537	[BUG]  [BUGGY]  if(val1  >  val2  ||  val1  ==  val1)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2  ||  val1  ==  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2  ||  val1  ==  val1)  {	  if(val1    ==    val2    ||    val1    ==    val1)    {    	non-compiled	[CE]  orphaned  case	160	None	replace
1538	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	31	None	replace
1539	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	31	None	replace
1540	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	31	None	replace
1541	[BUG]  [BUGGY]  int  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	31	None	replace
1542	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  SafeMutator.safeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  SafeMutator.safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  SafeMutator.safeMultiply(val2,  val1);	          safeMultiply(val1,    val2);    SafeMutator.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	289	None	replace
1543	[BUG]  [BUGGY]  safeMultiply(val2,  val1);  SafeMutator.safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2,  val1);  SafeMutator.safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val1);  SafeMutator.safeMultiply(val1,  val2);	          safeMultiply(val1,    val2);    SafeMutator.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	289	None	replace
1544	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
1545	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	57	1	add
1546	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	57	1	add
1547	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
1548	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
1549	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
1550	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]              ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	57	None	add
1551	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]                ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
1552	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]                  ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
1553	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]                    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	57	1	add
1554	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]                    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	57	1	add
1555	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]                      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	57	1	add
1556	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]                      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	57	1	add
1557	[BUG]  [BUGGY]  for(int  val1,  val2  ==  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1,  val2  ==  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1,  val2  ==  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1,    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	316	None	replace
1558	[BUG]  [BUGGY]  for(int  val1,  val2  >=  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1,  val2  >=  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1,  val2  >=  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1,    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	316	None	replace
1559	[BUG]  [BUGGY]  for(int  val1,  val2  ==  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1,  val2  ==  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1,  val2  ==  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1,    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	316	None	replace
1560	[BUG]  [BUGGY]  for(int  val1,  val2!=  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1,  val2!=  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1,  val2!=  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1,    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	316	None	replace
1561	[BUG]  [BUGGY]  for(int  val1,  val2!=  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1,  val2!=  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1,  val2!=  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1,    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	316	None	replace
1562	[BUG]  [BUGGY]  for(int  val1,  val2  >=  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1,  val2  >=  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1,  val2  >=  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1,    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	316	None	replace
1563	[BUG]  [BUGGY]  long  val1,  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1,  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1,  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1,    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	316	None	replace
1564	[BUG]  [BUGGY]  for(int  val1,  val2  <  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1,  val2  <  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1,  val2  <  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1,    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	316	None	replace
1565	[BUG]  [BUGGY]  for(int  val1,  val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1,  val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1,  val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1,    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	316	None	replace
1566	[BUG]  [BUGGY]  if(val2  ==  0  ||  val1  ==  0)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  0  ||  val1  ==  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  0  ||  val1  ==  0)  {	  if(val1    ==    0    ||    val2    ==    0)    {    	non-compiled	[CE]  orphaned  case	156	None	replace
1567	[BUG]  [BUGGY]  if(val1  ==  0.0  ||  val2  ==  0.0)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  0.0  ||  val2  ==  0.0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  0.0  ||  val2  ==  0.0)  {	  if(val1    ==    0    ||    val2    ==    0)    {    	non-compiled	[CE]  orphaned  case	156	None	replace
1568	[BUG]  [BUGGY]  if(val1  ==  0  &&  val2  ==  0)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  0  &&  val2  ==  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  0  &&  val2  ==  0)  {	  if(val1    ==    0    ||    val2    ==    0)    {    	non-compiled	[CE]  orphaned  case	156	None	replace
1569	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1,  val2)-  2;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1,  val2)-  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1,  val2)-  2;	  int    val2    =(int)Math.floor(val1,    val2)-    2;    	non-compiled	[CE]  orphaned  case	107	None	replace
1570	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1,  val2)-  2;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1,  val2)-  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1,  val2)-  2;	  int    val2    =(int)Math.floor(val1,    val2)-    2;    	non-compiled	[CE]  orphaned  case	107	None	replace
1571	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2,  val1)-  2;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2,  val1)-  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2,  val1)-  2;	  int    val2    =(int)Math.floor(val1,    val2)-    2;    	non-compiled	[CE]  orphaned  case	107	None	replace
1572	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val1,  val2)-  2;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.floor(val1,  val2)-  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val1,  val2)-  2;	  int    val2    =(int)Math.floor(val1,    val2)-    2;    	non-compiled	[CE]  orphaned  case	107	None	replace
1573	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val1,  val2)-  2;  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val1,  val2)-  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val1,  val2)-  2;	  int    val2    =(int)Math.floor(val1,    val2)-    2;    	non-compiled	[CE]  orphaned  case	107	None	replace
1574	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	36	None	replace
1575	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	36	None	replace
1576	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	36	None	replace
1577	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  <  val1.length;  val2++)  {  if(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  <  val1.length;  val2++)  {  if(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  <  val1.length;  val2++)  {  if(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	36	None	replace
1578	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	36	None	replace
1579	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1580	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1581	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1582	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1583	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	241	None	add
1584	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1585	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1586	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1587	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1588	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1589	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1590	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1591	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1592	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	241	None	add
1593	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	241	None	add
1594	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1595	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1596	[BUG]  [BUGGY]  float  val2  =  getValue(val2,  val1);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  getValue(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val2,  val1);	  int    val2    =    getValue(val2,    val1);    	non-compiled	[CE]  orphaned  case	77	None	replace
1597	[BUG]  [BUGGY]  int  val2  =  getValue(val2,  val1)+  1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2,  val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2,  val1)+  1;	  int    val2    =    getValue(val2,    val1);    	non-compiled	[CE]  orphaned  case	77	None	replace
1598	[BUG]  [BUGGY]  boolean  val2  =  getValue(val2,  val1);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  getValue(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  getValue(val2,  val1);	  int    val2    =    getValue(val2,    val1);    	non-compiled	[CE]  orphaned  case	77	None	replace
1599	[BUG]  [BUGGY]  long  val2  =(long)Math.log(val1,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.log(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.log(val1,  val2);	  long    val2    =(long)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	100	None	replace
1600	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    safeMultiply(val1,  val2);  safeMultiply(val2,  val1);	  	compilable	  [FE]  StackOverflowError  	85	1	add
1601	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    safeMultiply(val1,  val2);  safeMultiply(val2,  val1);	  	compilable	  [FE]  StackOverflowError  	85	1	add
1602	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  SafeMultiply(val1,  val2);  safeMultiply(val2,  val1);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  SafeMultiply(val1,  val2);  safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    SafeMultiply(val1,  val2);  safeMultiply(val2,  val1);	  	non-compiled	[CE]  cannot  find  symbol	85	None	add
1603	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	85	1	add
1604	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	85	1	add
1605	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  StackOverflowError  	85	1	add
1606	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  StackOverflowError  	85	1	add
1607	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val2,  val1);  safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    safeMultiply(val2,  val1);  safeMultiply(val2,  val1);	  	compilable	  [FE]  StackOverflowError  	85	1	add
1608	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val2,  val1);  safeMultiply(val2,  val1);  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val2,  val1);  safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    safeMultiply(val2,  val1);  safeMultiply(val2,  val1);	  	compilable	  [FE]  StackOverflowError  	85	1	add
1609	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  safeMultiply(val2,  val1).;  [CE]  <identifier>  expected  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  safeMultiply(val2,  val1).;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    safeMultiply(val1,  val2);  safeMultiply(val2,  val1).;	  	non-compiled	[CE]  <identifier>  expected	85	None	add
1610	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val1,  val2,  val1);  safeMultiply(val2,  val1);  [CE]  no  suitable  method  found  for  safeMultiply(long,int,long)  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val1,  val2,  val1);  safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    safeMultiply(val1,  val2,  val1);  safeMultiply(val2,  val1);	  	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long,int,long)	85	None	add
1611	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  secureMultiply(val1,  val2);  safeMultiply(val2,  val1);  [CE]  cannot  find  symbol  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  secureMultiply(val1,  val2);  safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    secureMultiply(val1,  val2);  safeMultiply(val2,  val1);	  	non-compiled	[CE]  cannot  find  symbol	85	None	add
1612	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  cleanMultiply(val1,  val2);  safeMultiply(val2,  val1);  [CE]  cannot  find  symbol  [FE]                    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  cleanMultiply(val1,  val2);  safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    cleanMultiply(val1,  val2);  safeMultiply(val2,  val1);	  	non-compiled	[CE]  cannot  find  symbol	85	None	add
1613	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)+  2;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)+  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)+  2;	  int    val2    =    getValue(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	75	None	replace
1614	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)+  1L;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)+  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)+  1L;	  int    val2    =    getValue(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	75	None	replace
1615	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    1;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	35	None	replace
1616	[BUG]  [BUGGY]  for(int  val2  =  1;  val1  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val1  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val1  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    1;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	35	None	replace
1617	[BUG]  [BUGGY]  int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    1;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	35	None	replace
1618	[BUG]  [BUGGY]  for(int  val2  =  2;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  2;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  2;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    1;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	35	None	replace
1619	[BUG]  [BUGGY]  Switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	378	None	replace
1620	[BUG]  [BUGGY]  switch(val2,  val1).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val2,  val1).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val2,  val1).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	378	None	replace
1621	[BUG]  [BUGGY]  switch(val1,  val2).restrictNullOrUndefined().restrictByNotNullOrUndefined());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictNullOrUndefined().restrictByNotNullOrUndefined());  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictNullOrUndefined().restrictByNotNullOrUndefined());	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	378	None	replace
1622	[BUG]  [BUGGY]  switch(val1,  val2).restrictNullOrUndefined().restrictNullOrUndefined());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictNullOrUndefined().restrictNullOrUndefined());  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictNullOrUndefined().restrictNullOrUndefined());	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	378	None	replace
1623	[BUG]  [BUGGY]  switch(val1,  val1).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val1).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val1).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	378	None	replace
1624	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  >  expected	320	None	replace
1625	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	320	None	replace
1626	[BUG]  [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0,  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	320	None	replace
1627	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	320	None	replace
1628	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/(int)Math.log(val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/(int)Math.log(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/(int)Math.log(val2);	  int    val2    =(int)Math.floor(val1)/(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	231	None	replace
1629	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	345	None	replace
1630	[BUG]  [BUGGY]  long  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	345	None	replace
1631	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	345	None	replace
1632	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	345	None	replace
1633	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0L;  val2  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0L;  val2  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	345	None	replace
1634	[BUG]  [BUGGY]  SafeMultiply(val1,  val2,  val1);  [CE]  orphaned  case  [FE]        StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply(val1,  val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply(val1,  val2,  val1);	  SafeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	257	None	replace
1635	[BUG]  [BUGGY]  SafeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply(val2,  val1);	  SafeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	257	None	replace
1636	[BUG]  [BUGGY]  SafeMultiply(val1,  val2,  val2);  [CE]  orphaned  case  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply(val1,  val2,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply(val1,  val2,  val2);	  SafeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	257	None	replace
1637	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  >  expected	324	None	replace
1638	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	324	None	replace
1639	[BUG]  [BUGGY]  SafeMutator.safeMultiply(val1)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMutator.safeMultiply(val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeMultiply(val1)  {	  Switch(val0)    {    	non-compiled	[CE]  ';'  expected	351	None	replace
1640	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)/  val2  *  val2;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1)/  val2  *  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)/  val2  *  val2;	  int    val2    =(int)Math.floor(val1)/    val2    *    val2;    	non-compiled	[CE]  orphaned  case	311	None	replace
1641	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val1)/  val2  *  val2;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val1)/  val2  *  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val1)/  val2  *  val2;	  int    val2    =(int)Math.floor(val1)/    val2    *    val2;    	non-compiled	[CE]  orphaned  case	311	None	replace
1642	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  total  *  val2;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  total  *  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  total  *  val2;	  int    val2    =(int)Math.floor(val1)/    val2    *    val2;    	non-compiled	[CE]  orphaned  case	311	None	replace
1643	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  2  *  val2;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  2  *  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  2  *  val2;	  int    val2    =(int)Math.floor(val1)/    val2    *    val2;    	non-compiled	[CE]  orphaned  case	311	None	replace
1644	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.floor(val1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.floor(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(int)Math.floor(val1);	  long    val2    =    val1    *    val2    +(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	307	None	replace
1645	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.floor(val2)-  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.floor(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(int)Math.floor(val2)-  1;	  long    val2    =    val1    *    val2    +(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	307	None	replace
1646	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(long)Math.floor(val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(long)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(long)Math.floor(val2);	  long    val2    =    val1    *    val2    +(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	307	None	replace
1647	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(long)Math.floor(val1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(long)Math.floor(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(long)Math.floor(val1);	  long    val2    =    val1    *    val2    +(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	307	None	replace
1648	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.log(val2);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.log(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(int)Math.log(val2);	  long    val2    =    val1    *    val2    +(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	307	None	replace
1649	[BUG]  [BUGGY]  int  val2  =  val1  *  val2  +(int)Math.floor(val2);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1  *  val2  +(int)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1  *  val2  +(int)Math.floor(val2);	  long    val2    =    val1    *    val2    +(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	307	None	replace
1650	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.ceil(val2);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.ceil(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(int)Math.ceil(val2);	  long    val2    =    val1    *    val2    +(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	307	None	replace
1651	[BUG]  [BUGGY]  long  val2  =  val1,  val2  +(int)Math.floor(val2);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2  +(int)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2  +(int)Math.floor(val2);	  long    val2    =    val1    *    val2    +(int)Math.floor(val2);    	non-compiled	[CE]  ';'  expected	307	None	replace
1652	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [CE]  orphaned  case  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	332	None	replace
1653	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.toString()  + "  * "  +  val2.toString());  }  [CE]  orphaned  case  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.toString()  + "  * "  +  val2.toString());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.toString()  + "  * "  +  val2.toString());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	332	None	replace
1654	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  if(val2!=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [CE]  orphaned  case  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  if(val2!=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  if(val2!=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	332	None	replace
1655	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
1656	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
1657	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
1658	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
1659	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
1660	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
1661	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0	  	non-compiled	[CE]  ';'  expected	262	None	add
1662	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >>  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	262	None	add
1663	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L	  	non-compiled	[CE]  ';'  expected	262	None	add
1664	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;	  	non-compiled	[CE]  illegal  start  of  expression	262	None	add
1665	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
1666	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
1667	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >>  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	262	None	add
1668	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
1669	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
1670	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2,  val2;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2,  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2,  val2;	  int    val2    =(int)Math.floor(val1)/    val2,    val1;    	non-compiled	[CE]  orphaned  case	68	None	replace
1671	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)/  val2,  val1;  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1)/  val2,  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)/  val2,  val1;	  int    val2    =(int)Math.floor(val1)/    val2,    val1;    	non-compiled	[CE]  orphaned  case	68	None	replace
1672	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)/  val1,  val2;  [CE]  orphaned  case  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2)/  val1,  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)/  val1,  val2;	  int    val2    =(int)Math.floor(val1)/    val2,    val1;    	non-compiled	[CE]  orphaned  case	68	None	replace
1673	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2,  val1  +  1;  [CE]  ';'  expected  [FE]                                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2,  val1  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2,  val1  +  1;	  int    val2    =(int)Math.floor(val1)/    val2,    val1;    	non-compiled	[CE]  ';'  expected	68	None	replace
1674	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2,  val1,  val2);  [CE]  ';'  expected  [FE]                                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2,  val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2,  val1,  val2);	  int    val2    =(int)Math.floor(val1)/    val2,    val1;    	non-compiled	[CE]  ';'  expected	68	None	replace
1675	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)/  val2,  val1;  [CE]  orphaned  case  [FE]                                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1)/  val2,  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)/  val2,  val1;	  int    val2    =(int)Math.floor(val1)/    val2,    val1;    	non-compiled	[CE]  orphaned  case	68	None	replace
1676	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  val2,  val1;  [CE]  orphaned  case  [FE]                                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  val2,  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)/  val2,  val1;	  int    val2    =(int)Math.floor(val1)/    val2,    val1;    	non-compiled	[CE]  orphaned  case	68	None	replace
1677	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2,  val3;  [CE]  orphaned  case  [FE]                                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2,  val3;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2,  val3;	  int    val2    =(int)Math.floor(val1)/    val2,    val1;    	non-compiled	[CE]  orphaned  case	68	None	replace
1678	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val1)/  val2,  val1;  [CE]  orphaned  case  [FE]                                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val1)/  val2,  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val1)/  val2,  val1;	  int    val2    =(int)Math.floor(val1)/    val2,    val1;    	non-compiled	[CE]  orphaned  case	68	None	replace
1679	[BUG]  [BUGGY]  SafeRaw(val1,  val2,  val1)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRaw(val1,  val2,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRaw(val1,  val2,  val1)  {	  SafeRaw(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	314	None	replace
1680	[BUG]  [BUGGY]  SafeRaw(val2,  val1)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRaw(val2,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRaw(val2,  val1)  {	  SafeRaw(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	314	None	replace
1681	[BUG]  [BUGGY]  SafeRaw(val1,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRaw(val1,  val2);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRaw(val1,  val2);	  SafeRaw(val1,    val2)    {    	non-compiled	[CE]  orphaned  case	314	None	replace
1682	[BUG]  [BUGGY]  SafeRaw(val1,  val2,  val2)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRaw(val1,  val2,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRaw(val1,  val2,  val2)  {	  SafeRaw(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	314	None	replace
1683	[BUG]  [BUGGY]  SafeRaw(val1,  val1)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRaw(val1,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRaw(val1,  val1)  {	  SafeRaw(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	314	None	replace
1684	[BUG]  [BUGGY]  SafeRaw(val1,  val2,  false)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRaw(val1,  val2,  false)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRaw(val1,  val2,  false)  {	  SafeRaw(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	314	None	replace
1685	[BUG]  [BUGGY]  SafeRaw(val1,  val2,  0)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRaw(val1,  val2,  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRaw(val1,  val2,  0)  {	  SafeRaw(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	314	None	replace
1686	[BUG]  [BUGGY]  return  val1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  return  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	return  val1;	  return    val2;    	non-compiled	[CE]  orphaned  case	300	None	replace
1687	[BUG]  [BUGGY]  return  val2  -  val1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  return  val2  -  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	return  val2  -  val1;	  return    val2;    	non-compiled	[CE]  orphaned  case	300	None	replace
1688	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  return  val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  return  val2;  }  else  {  safeMultiply(val1,  val2);  }	  return    val2;    	non-compiled	[CE]  orphaned  case	300	None	replace
1689	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1!=  val2)  {  return  val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1!=  val2)  {  return  val2;  }  else  {  safeMultiply(val1,  val2);  }	  return    val2;    	non-compiled	[CE]  orphaned  case	300	None	replace
1690	[BUG]  [BUGGY]  if(val2  ==  val1)  {  return  val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  val1)  {  return  val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  val1)  {  return  val2;  }  else  {  safeMultiply(val1,  val2);  }	  return    val2;    	non-compiled	[CE]  orphaned  case	300	None	replace
1691	[BUG]  [BUGGY]  if(val2  ==  val1)return  val2;  if(val1  >=  val2)  {  return  val2;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  val1)return  val2;  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  val1)return  val2;  if(val1  >=  val2)  {  return  val2;  }	  return    val2;    	non-compiled	[CE]  orphaned  case	300	None	replace
1692	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  val2;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  return  val2;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  return  val2;  }  else  {  throw  new  ArithmeticException( " ");  }	  return    val2;    	non-compiled	[CE]  orphaned  case	300	None	replace
1693	[BUG]  [BUGGY]  if(val2  ==  val1)return  val2;  if(val1!=  val2)  {  return  val2;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  val1)return  val2;  if(val1!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  val1)return  val2;  if(val1!=  val2)  {  return  val2;  }	  return    val2;    	non-compiled	[CE]  orphaned  case	300	None	replace
1694	[BUG]  [BUGGY]  enableMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  enableMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	enableMultiply(val1,  val2);	  allowMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	18	None	replace
1695	[BUG]  [BUGGY]  allowMultiply(val1,  val2,  val1);  [CE]  orphaned  case  [FE]                  ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  allowMultiply(val1,  val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	allowMultiply(val1,  val2,  val1);	  allowMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	18	None	replace
1696	[BUG]  [BUGGY]  enableMultiply(val1,  val2,  val1);  [CE]  orphaned  case  [FE]                    ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  enableMultiply(val1,  val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	enableMultiply(val1,  val2,  val1);	  allowMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	18	None	replace
1697	[BUG]  [BUGGY]  ensureMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                      ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ensureMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	ensureMultiply(val1,  val2);	  allowMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	18	None	replace
1698	[BUG]  [BUGGY]  float  val2  =(float)Math.log(val1,  val2);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.log(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.log(val1,  val2);	  float    val2    =(float)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	102	None	replace
1699	[BUG]  [BUGGY]  float  val2  =(float)Math.ceil(val1,  val2);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.ceil(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.ceil(val1,  val2);	  float    val2    =(float)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	102	None	replace
1700	[BUG]  [BUGGY]  boolean  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	317	None	replace
1701	[BUG]  [BUGGY]  short  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	317	None	replace
1702	[BUG]  [BUGGY]  double  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	317	None	replace
1703	[BUG]  [BUGGY]  float  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	317	None	replace
1704	[BUG]  [BUGGY]  int  val1  =  0L;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0L;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0L;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	317	None	replace
1705	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1,  val2)-  1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1,  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1,  val2)-  1;	  double    val2    =(double)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	106	None	replace
1706	[BUG]  [BUGGY]  double  val2  =(double)Math.log(val1,  val2);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.log(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.log(val1,  val2);	  double    val2    =(double)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	106	None	replace
1707	[BUG]  [BUGGY]  long  val2  =(double)Math.floor(val1,  val2);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(double)Math.floor(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(double)Math.floor(val1,  val2);	  double    val2    =(double)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	106	None	replace
1708	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1,  val2)/  2;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1,  val2)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1,  val2)/  2;	  double    val2    =(double)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	106	None	replace
1709	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1,  val2)+  1;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1,  val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1,  val2)+  1;	  double    val2    =(double)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	106	None	replace
1710	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val1)/(char)Math.floor(val2);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.floor(val1)/(char)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val1)/(char)Math.floor(val2);	  char    val2    =(char)Math.floor(val1)-(char)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	348	None	replace
1711	[BUG]  [BUGGY]  String  val2  =(String)Math.floor(val1)-(String)Math.floor(val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  String  val2  =(String)Math.floor(val1)-(String)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	String  val2  =(String)Math.floor(val1)-(String)Math.floor(val2);	  char    val2    =(char)Math.floor(val1)-(char)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	348	None	replace
1712	[BUG]  [BUGGY]  Integer  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Integer  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Integer  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  For(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	302	None	replace
1713	[BUG]  [BUGGY]  Integer  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Integer  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Integer  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  For(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	302	None	replace
1714	[BUG]  [BUGGY]  Integer  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Integer  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Integer  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  For(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	302	None	replace
1715	[BUG]  [BUGGY]  Integer  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Integer  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Integer  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  For(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	302	None	replace
1716	[BUG]  [BUGGY]  boolean  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	197	None	replace
1717	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	197	None	replace
1718	[BUG]  [BUGGY]  short  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	197	None	replace
1719	[BUG]  [BUGGY]  int  val2  =  0L;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0L;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0L;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	197	None	replace
1720	[BUG]  [BUGGY]  float  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	197	None	replace
1721	[BUG]  [BUGGY]  double  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	197	None	replace
1722	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +  1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  +  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	98	None	replace
1723	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  <  val1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  <  val1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  <  val1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	98	None	replace
1724	[BUG]  [BUGGY]  for(long  val2  =  0;  val1  <  val2.length;  val2  +  1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(long  val2  =  0;  val1  <  val2.length;  val2  +  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val2  =  0;  val1  <  val2.length;  val2  +  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	98	None	replace
1725	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	98	None	replace
1726	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +  1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  +  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	98	None	replace
1727	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >=  val1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >=  val1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  >=  val1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	98	None	replace
1728	[BUG]  [BUGGY]  tryFallThrough(val1,  val2,  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFallThrough(val1,  val2,  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFallThrough(val1,  val2,  val1)  {  throw  new  ArithmeticException( " ");  }	  tryFallThrough(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	341	None	replace
1729	[BUG]  [BUGGY]  tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1);  }  [CE]  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1);  }	  tryFallThrough(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	341	None	replace
1730	[BUG]  [BUGGY]  tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	  tryFallThrough(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	341	None	replace
1731	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1,  val2)/  val2;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1,  val2)/  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1,  val2)/  val2;	  int    val2    =(int)Math.floor(val1,    val2)/    val2;    	non-compiled	[CE]  orphaned  case	63	None	replace
1732	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  val2  +  1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  val2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)/  val2  +  1;	  int    val2    =(int)Math.floor(val1,    val2)/    val2;    	non-compiled	[CE]  orphaned  case	63	None	replace
1733	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val1;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val  <  val1;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val1;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val1;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  >  expected	354	None	replace
1734	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val1;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	354	None	replace
1735	[BUG]  [BUGGY]  for(int  val2  =  1;  val  <  val1;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  1;  val  <  val1;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  1;  val  <  val1;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val1;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	354	None	replace
1736	[BUG]  [BUGGY]  for(int  val2  =  0L;  val  <  val1;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0L;  val  <  val1;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0L;  val  <  val1;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val1;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	354	None	replace
1737	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	30	None	replace
1738	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	30	None	replace
1739	[BUG]  [BUGGY]  if(val2  ==  0  ||  val1  <  val2)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  0  ||  val1  <  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  0  ||  val1  <  val2)  {	  if(val2    ==    0    ||    val1    >    val2)    {    	non-compiled	[CE]  orphaned  case	372	None	replace
1740	[BUG]  [BUGGY]  if(val1  ==  val2  ||  val1  <  val2)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2  ||  val1  <  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2  ||  val1  <  val2)  {	  if(val2    ==    0    ||    val1    >    val2)    {    	non-compiled	[CE]  orphaned  case	372	None	replace
1741	[BUG]  [BUGGY]  if(val1  ==  val2  ||  val1  <  val1)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2  ||  val1  <  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2  ||  val1  <  val1)  {	  if(val2    ==    0    ||    val1    >    val2)    {    	non-compiled	[CE]  orphaned  case	372	None	replace
1742	[BUG]  [BUGGY]  if(val1  ==  val2  ||  val1  >  val1)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2  ||  val1  >  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2  ||  val1  >  val1)  {	  if(val2    ==    0    ||    val1    >    val2)    {    	non-compiled	[CE]  orphaned  case	372	None	replace
1743	[BUG]  [BUGGY]  tryFallThrough(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFallThrough(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFallThrough(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	  tryFallThrough(val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	16	None	replace
1744	[BUG]  [BUGGY]  tryFallThrough(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2);  }  [CE]  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFallThrough(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFallThrough(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2);  }	  tryFallThrough(val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	16	None	replace
1745	[BUG]  [BUGGY]  tryMultiply(val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryMultiply(val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryMultiply(val1)  {  throw  new  ArithmeticException( " ");  }	  tryFallThrough(val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	16	None	replace
1746	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	26	None	replace
1747	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	26	None	replace
1748	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	26	None	replace
1749	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	26	None	replace
1750	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	175	None	add
1751	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	175	1	add
1752	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	175	1	add
1753	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	175	None	add
1754	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	175	None	add
1755	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	175	None	add
1756	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]              ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	175	None	add
1757	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]                ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	175	1	add
1758	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]                ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	175	1	add
1759	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]                  ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	175	None	add
1760	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]                    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	175	None	add
1761	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]                      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	175	None	add
1762	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  >  expected	129	None	replace
1763	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  >  expected	129	None	replace
1764	[BUG]  [BUGGY]  int  val2  =  1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    1;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	201	None	replace
1765	[BUG]  [BUGGY]  for(int  val1  =  1;  val  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    1;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	201	None	replace
1766	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  if(val2!=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.toString()  + "  * "  +  val2.toString());  }  [CE]  orphaned  case  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  if(val2!=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.toString()  + "  * "  +  val2.toString());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  if(val2!=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.toString()  + "  * "  +  val2.toString());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.toString()    +   "    *   "    +    val2.toString());    }    	non-compiled	[CE]  orphaned  case	334	None	replace
1767	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.toString()  + ",  * "  +  val2.toString());  }  [CE]  orphaned  case  [FE]              StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.toString()  + ",  * "  +  val2.toString());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.toString()  + ",  * "  +  val2.toString());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.toString()    +   "    *   "    +    val2.toString());    }    	non-compiled	[CE]  orphaned  case	334	None	replace
1768	[BUG]  [BUGGY]  boolean  val2  =  getValue(val1,  val2)-  1;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  getValue(val1,  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  getValue(val1,  val2)-  1;	  boolean    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	80	None	replace
1769	[BUG]  [BUGGY]  boolean  val2  =  getValue(val1,  val2)+  1;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  getValue(val1,  val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  getValue(val1,  val2)+  1;	  boolean    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	80	None	replace
1770	[BUG]  [BUGGY]  boolean  val2  =  safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  safeMultiply(val1,  val2);	  boolean    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	80	None	replace
1771	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  >  1)  {  safeMultiply(val2,  val1);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  >  1)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  >  1)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    	non-compiled	[CE]  not  a  statement	94	None	replace
1772	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  >  0)  {  safeMultiply(val2,  val1);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  >  0)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  >  0)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    	non-compiled	[CE]  not  a  statement	94	None	replace
1773	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	52	None	replace
1774	[BUG]  [BUGGY]  For(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  For(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	For(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
1775	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  0L;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  0L;  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	52	None	replace
1776	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	52	None	replace
1777	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    >>    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	27	None	replace
1778	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val5);  [CE]  orphaned  case  [FE]              StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val5);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val5);	  safeMultiply(val1,    val2,    val3);    	non-compiled	[CE]  orphaned  case	167	None	replace
1779	[BUG]  [BUGGY]  safeMultiply(val1,  val2).reset();  [CE]  orphaned  case  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2).reset();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2).reset();	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	283	None	replace
1780	[BUG]  [BUGGY]  Safely(val1,  val2,  false)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Safely(val1,  val2,  false)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Safely(val1,  val2,  false)  {	  Safely(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	315	None	replace
1781	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +  1)  {  safeMultiply(val2,  val1);  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +  1)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  +  1)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	98	None	replace
1782	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  <  val1.length;  val2  +  1)  {  safeMultiply(val2,  val1);  }  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  <  val1.length;  val2  +  1)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  <  val1.length;  val2  +  1)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	98	None	replace
1783	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +  1)  {  safeMultiply(val2,  val1);  }  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +  1)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  +  1)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	98	None	replace
1784	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  *  1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  *  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  *  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	98	None	replace
1785	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2,  val1  *  val2;  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2,  val1  *  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2,  val1  *  val2;	  int    val2    =(int)Math.floor(val1)/    val2,    val1;    	non-compiled	[CE]  ';'  expected	68	None	replace
1786	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	272	None	replace
1787	[BUG]  [BUGGY]  int  val2  =  Math.max(val1,  val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.max(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.max(val1,  val2);	  int    val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	37	None	replace
1788	[BUG]  [BUGGY]  long  val2  =  val1.longValue()  +  val2.longValue().longValue();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.longValue()  +  val2.longValue().longValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.longValue()  +  val2.longValue().longValue();	  long    val2    =    val1.longValue()    +    val2.longValue();    	non-compiled	[CE]  orphaned  case	152	None	replace
1789	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	177	None	replace
1790	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	177	None	replace
1791	[BUG]  [BUGGY]  if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	197	None	replace
1792	[BUG]  [BUGGY]  if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	197	None	replace
1793	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	197	None	replace
1794	[BUG]  [BUGGY]  SafeMutator.safeMultiply(val1,  val2,  false)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMutator.safeMultiply(val1,  val2,  false)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeMultiply(val1,  val2,  false)  {	  SafeMutator.safeMultiply(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	147	None	replace
1795	[BUG]  [BUGGY]  if(val2!=  val1)  {  return  val1;  }  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2!=  val1)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2!=  val1)  {  return  val1;  }	  if(val2    >=    val1)    {    return    val1;    }    	non-compiled	[CE]  orphaned  case	357	None	replace
1796	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  val2;  }  else  if(val1  <  val2)  {  return  val2;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  return  val2;  }  else  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  return  val2;  }  else  if(val1  <  val2)  {  return  val2;  }	          if(val1    >=    val2)    {    return    val2;    }    If(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	213	None	replace
1797	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  val2;  }  else  if(val1  >  val2)  {  return  val2;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  return  val2;  }  else  if(val1  >  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  return  val2;  }  else  if(val1  >  val2)  {  return  val2;  }	          if(val1    >=    val2)    {    return    val2;    }    If(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	213	None	replace
1798	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  val2;  }  else  if(val1  <  val2)  {  return  val2;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2)  {  return  val2;  }  else  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  return  val2;  }  else  if(val1  <  val2)  {  return  val2;  }	          if(val1    >=    val2)    {    return    val2;    }    If(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	213	None	replace
1799	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  val2;  }  else  if(val1  <  val2)  {  return  val2;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  return  val2;  }  else  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  return  val2;  }  else  if(val1  <  val2)  {  return  val2;  }	          if(val1    >=    val2)    {    return    val2;    }    If(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	213	None	replace
1800	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val1;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val1;  }	          if(val1    >=    val2)    {    return    val2;    }    If(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	213	None	replace
1801	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  return  -val1;  }	  if(val1    <    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	393	None	replace
1802	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  {  return  0L;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)  {  return  0L;  }	  if(val1    ==    val2)    {    return    0;    }    	non-compiled	[CE]  ';'  expected	223	None	replace
1803	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  {  return  0;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)  {  return  0;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)  {  return  0;  }	  if(val1    ==    val2)    {    return    0;    }    	non-compiled	[CE]  ';'  expected	223	None	replace
1804	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +  1L  +  1L  +  1L;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +  1L  +  1L  +  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +  1L  +  1L  +  1L;	  long    val2    =    val1    *    val2    +    1L;    	non-compiled	[CE]  orphaned  case	118	None	replace
1805	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val2)/(char)Math.floor(val1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.floor(val2)/(char)Math.floor(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val2)/(char)Math.floor(val1);	  char    val2    =(char)Math.floor(val1)-(char)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	348	None	replace
1806	[BUG]  [BUGGY]  Integer  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Integer  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Integer  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  For(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	302	None	replace
1807	[BUG]  [BUGGY]  if(val1  ==  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }	          safeMultiply(val1,    val2);    safeMultiply(val1,    val1);    	non-compiled	[CE]  orphaned  case	92	None	replace
1808	[BUG]  [BUGGY]  if(val1  <  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }	          safeMultiply(val1,    val2);    safeMultiply(val1,    val1);    	non-compiled	[CE]  orphaned  case	92	None	replace
1809	[BUG]  [BUGGY]  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  }	          safeMultiply(val1,    val2);    safeMultiply(val1,    val1);    	non-compiled	[CE]  orphaned  case	92	None	replace
1810	[BUG]  [BUGGY]  if(val1  >>  val2  ||  val1!=  val1)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >>  val2  ||  val1!=  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >>  val2  ||  val1!=  val1)  {	  if(val1    >=    val2    ||    val1!=    val2)    {    	non-compiled	[CE]  orphaned  case	194	None	replace
1811	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2;  val3  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2;  val3  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2;  val3  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val3    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	370	None	replace
1812	[BUG]  [BUGGY]  for(int  val1  =  0;  val3  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val3  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val3  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val3    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	370	None	replace
1813	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val3++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val3++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val3++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val3    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	370	None	replace
1814	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val3++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val3++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  <  val1.length;  val3++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val3    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	370	None	replace
1815	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  val2;  }  if(val2  <  val1)  {  return  val1;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2)  {  return  val2;  }  if(val2  <  val1)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  return  val2;  }  if(val2  <  val1)  {  return  val1;  }	          if(val1    >=    val2)    {    return    val2;    }    if(val2    >=    val1)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	212	None	replace
1816	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val1;  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val1;  }	          if(val1    >=    val2)    {    return    val2;    }    if(val2    >=    val1)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	212	None	replace
1817	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }	          if(val1    >=    val2)    {    return    val2;    }    if(val2    >=    val1)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	212	None	replace
1818	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val1;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val1;  }	          if(val1    >=    val2)    {    return    val2;    }    if(val2    >=    val1)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	212	None	replace
1819	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1820	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1821	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1822	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1823	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1824	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1825	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1826	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1827	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1828	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1829	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1830	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1831	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	202	None	add
1832	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1833	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1834	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1835	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
1836	[BUG]  [BUGGY]  long  val2  =  val1;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	22	None	replace
1837	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1838	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1839	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1840	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1841	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1842	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1843	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	211	None	add
1844	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >>  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	211	None	add
1845	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1846	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1847	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1848	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1849	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1850	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1851	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1852	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
1853	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	268	None	replace
1854	[BUG]  [BUGGY]  safeMultiply(val1);  SafeMutator.safeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1);  SafeMutator.safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1);  SafeMutator.safeMultiply(val2,  val1);	          safeMultiply(val1,    val2);    SafeMutator.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	289	None	replace
1855	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1856	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1857	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1858	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1859	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	241	None	add
1860	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1861	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
1862	[BUG]  [BUGGY]  val2  =  Math.min(val2,  val1)-  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  val2  =  Math.min(val2,  val1)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	val2  =  Math.min(val2,  val1)-  1;	  val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	44	None	replace
1863	[BUG]  [BUGGY]  val2  =  Math.min(val2,  val1)+  1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  val2  =  Math.min(val2,  val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	val2  =  Math.min(val2,  val1)+  1;	  val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	44	None	replace
1864	[BUG]  [BUGGY]  for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	327	None	replace
1865	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1;  val2  >=  0;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1;  val2  >=  0;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1;  val2  >=  0;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val1;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	354	None	replace
1866	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1;  val2  >=  0;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1;  val2  >=  0;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1;  val2  >=  0;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val    <    val1;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	354	None	replace
1867	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1;  val2!=  0;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1;  val2!=  0;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1;  val2!=  0;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val1;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	354	None	replace
1868	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1;  val2  <  val2;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1;  val2  <  val2;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1;  val2  <  val2;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val1;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	354	None	replace
1869	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val    <    val1;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	354	None	replace
1870	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  return  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  return  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  return  safeMultiply(val1,  val2);  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	319	None	replace
1871	[BUG]  [BUGGY]  For(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  For(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	For(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	319	None	replace
1872	[BUG]  [BUGGY]  long  val2  =  safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  safeMultiply(val1,  val2);	  long    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	73	None	replace
1873	[BUG]  [BUGGY]  long  val2  =  getValue(val1,  val2)-  val2;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  getValue(val1,  val2)-  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  getValue(val1,  val2)-  val2;	  long    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	73	None	replace
1874	[BUG]  [BUGGY]  if(val1  >=  val2)  {  int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	301	None	replace
1875	[BUG]  [BUGGY]  boolean  val1  =  false;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val1  =  false;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val1  =  false;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	301	None	replace
1876	[BUG]  [BUGGY]  null  val1  =  val1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  null  val1  =  val1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	null  val1  =  val1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	301	None	replace
1877	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	328	None	replace
1878	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	328	None	replace
1879	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	328	None	replace
1880	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  /  2  +  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  /  2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2  /  2  +  1;	  int    val2    =(int)Math.floor(val1)/    val2    +    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
1881	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  -  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  -  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2  -  1;	  int    val2    =(int)Math.floor(val1)/    val2    +    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
1882	[BUG]  [BUGGY]  switch(val1,  val2  -  val1)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2  -  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2  -  val1)  {	  switch(val1,    val2,    val1)    {    	non-compiled	[CE]  ')'  expected	125	None	replace
1883	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val3,  val1);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val3,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val3,  val1);  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	179	None	replace
1884	[BUG]  [BUGGY]  Switch(val1,  val2).restrictByNotNullOrUndefined()  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2).restrictByNotNullOrUndefined()  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2).restrictByNotNullOrUndefined()  {	  switch(val1,    val2).restrictByNotNullOrUndefined()    {    	non-compiled	[CE]  ';'  expected	377	None	replace
1885	[BUG]  [BUGGY]  switch(val1,  val1).restrictByNotNullOrUndefined()  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val1).restrictByNotNullOrUndefined()  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val1).restrictByNotNullOrUndefined()  {	  switch(val1,    val2).restrictByNotNullOrUndefined()    {    	non-compiled	[CE]  ')'  expected	377	None	replace
1886	[BUG]  [BUGGY]  if(val2  ==  val1  ||  val2  >=  val1)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  val1  ||  val2  >=  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  val1  ||  val2  >=  val1)  {	  if(val1    ==    val2    ||    val1    >=    val2)    {    	non-compiled	[CE]  orphaned  case	252	None	replace
1887	[BUG]  [BUGGY]  SafeMultiply.freeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]        StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply.freeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply.freeMultiply(val1,  val2);	  SafeMultiply.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	389	None	replace
1888	[BUG]  [BUGGY]  SafeMultiply.freeMultiply(val1,  val2,  val1);  [CE]  orphaned  case  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply.freeMultiply(val1,  val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply.freeMultiply(val1,  val2,  val1);	  SafeMultiply.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	389	None	replace
1889	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	320	None	replace
1890	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	320	None	replace
1891	[BUG]  [BUGGY]  long  val2  =  val1  *  val2,  val1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2,  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2,  val1;	  long    val2    =    val1    *    val2,    val2);    	non-compiled	[CE]  orphaned  case	391	None	replace
1892	[BUG]  [BUGGY]  long  val2  =  val1  *  val1,  val2);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val1,  val2);	  long    val2    =    val1    *    val2,    val2);    	non-compiled	[CE]  ';'  expected	391	None	replace
1893	[BUG]  [BUGGY]  int  val2  =  val1  *  val2  -  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1  *  val2  -  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1  *  val2  -  1;	  int    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	114	None	replace
1894	[BUG]  [BUGGY]  int  val2  =  val1  *  val2  +  4;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  val1  *  val2  +  4;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  val1  *  val2  +  4;	  int    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	114	None	replace
1895	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	195	None	replace
1896	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	195	None	replace
1897	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	195	None	replace
1898	[BUG]  [BUGGY]  for(int  val1  =  0;  val1!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	195	None	replace
1899	[BUG]  [BUGGY]  SafeMutator.safeAdd(val1,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMutator.safeAdd(val1,  val2);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeAdd(val1,  val2);	  SafeMutator.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	143	None	replace
1900	[BUG]  [BUGGY]  safeMultiply(val1);  secureMultiply(val2,  val1);  [CE]  orphaned  case  [FE]                StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1);  secureMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1);  secureMultiply(val2,  val1);	          safeMultiply(val1,    val2);    secureMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	87	None	replace
1901	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	34	None	replace
1902	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	34	None	replace
1903	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val3  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val3  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val3  >=  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	34	None	replace
1904	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
1905	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2).return0;  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2).return0;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2).return0;  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	180	None	replace
1906	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2.length);  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2.length);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2.length);  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	180	None	replace
1907	[BUG]  [BUGGY]  for(int  val2  =  0;  val!=  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val!=  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val!=  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	184	None	replace
1908	[BUG]  [BUGGY]  for(int  val2  =  0;  val  >=  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  orphaned  case  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  >=  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  >=  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	184	None	replace
1909	[BUG]  [BUGGY]  float  val2  =  getValue(val1)-  getValue(val2)+  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  getValue(val1)-  getValue(val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val1)-  getValue(val2)+  1;	  float    val2    =    getValue(val1)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	366	None	replace
1910	[BUG]  [BUGGY]  if(val1  ==  val2)  {  int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	269	None	replace
1911	[BUG]  [BUGGY]  float  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	269	None	replace
1912	[BUG]  [BUGGY]  boolean  val1  =  false;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val1  =  false;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val1  =  false;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	269	None	replace
1913	[BUG]  [BUGGY]  safeMultiply(val2)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2)  {	  SafeMultiply(val1)    {    	non-compiled	[CE]  ';'  expected	215	None	replace
1914	[BUG]  [BUGGY]  float  val2  =  Math.min(length,  val1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  Math.min(length,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  Math.min(length,  val1);	  int    val2    =    Math.min(length,    val1);    	non-compiled	[CE]  orphaned  case	337	None	replace
1915	[BUG]  [BUGGY]  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }	          safeMultiply(val1,    val2);    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	86	None	replace
1916	[BUG]  [BUGGY]  if(val1  >  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }	          safeMultiply(val1,    val2);    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	86	None	replace
1917	[BUG]  [BUGGY]  float  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	323	None	replace
1918	[BUG]  [BUGGY]  if(val1  >=  val2)  {  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	323	None	replace
1919	[BUG]  [BUGGY]  if(val1  ==  val2)  {  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	323	None	replace
1920	[BUG]  [BUGGY]  boolean  val1  =  false;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val1  =  false;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val1  =  false;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	323	None	replace
1921	[BUG]  [BUGGY]  char  val2  =(char)Math.log(val1,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.log(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.log(val1,  val2);	  char    val2    =(char)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	339	None	replace
1922	[BUG]  [BUGGY]  char  val2  =(char)Math.ceil(val1,  val2);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.ceil(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.ceil(val1,  val2);	  char    val2    =(char)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	339	None	replace
1923	[BUG]  [BUGGY]  int  val2  =  getValue(val1)+  4;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)+  4;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)+  4;	  int    val2    =    getValue(val1)+    2;    	non-compiled	[CE]  orphaned  case	191	None	replace
1924	[BUG]  [BUGGY]  switch(val1)restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();  [CE]  '{'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1)restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1)restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();    	non-compiled	[CE]  '{'  expected	375	None	replace
1925	[BUG]  [BUGGY]  switch(val1,  val2).restrictAllNullOrUndefined().restrictByNotNullOrUndefined();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictAllNullOrUndefined().restrictByNotNullOrUndefined();  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictAllNullOrUndefined().restrictByNotNullOrUndefined();	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ')'  expected	375	None	replace
1926	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
1927	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
1928	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val2)/  val1L;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val2)/  val1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val2)/  val1L;	  int    val2    =(int)Math.floor(val1)/    val2L;    	non-compiled	[CE]  orphaned  case	65	None	replace
1929	[BUG]  [BUGGY]  ||(val1  <  val2))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val1  <  val2))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1  <  val2))  {  return  val2;  }	  if(val1    <    val2)    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	297	None	replace
1930	[BUG]  [BUGGY]  SafeMultiply(val1,  val2,  false)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply(val1,  val2,  false)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply(val1,  val2,  false)  {	  Switch(val1,    val2,    false)    {    	non-compiled	[CE]  ';'  expected	144	None	replace
1931	[BUG]  [BUGGY]  for(int  val2  =  0;  val!=  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val!=  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val!=  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val!=    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	290	None	replace
1932	[BUG]  [BUGGY]  for(int  val2  =  0;  val  ==  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  ==  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  ==  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val!=    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	290	None	replace
1933	[BUG]  [BUGGY]  for(int  val2  =  0;  val  >=  val2.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  >=  val2.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  >=  val2.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val!=    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	290	None	replace
1934	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  *  val1  +  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  *  val1  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2  *  val1  +  1;	  int    val2    =(int)Math.floor(val1)/    val2    *    val1;    	non-compiled	[CE]  orphaned  case	310	None	replace
1935	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val1,  val2);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val1,  val2);	  int    val2    =(int)Math.floor(val2,    val1);    	non-compiled	[CE]  orphaned  case	105	None	replace
1936	[BUG]  [BUGGY]  boolean  val2  =(boolean)Math.floor(val2,  val1);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =(boolean)Math.floor(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =(boolean)Math.floor(val2,  val1);	  int    val2    =(int)Math.floor(val2,    val1);    	non-compiled	[CE]  orphaned  case	105	None	replace
1937	[BUG]  [BUGGY]  switch(val1  -  val2,  val2)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1  -  val2,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1  -  val2,  val2)  {	  switch(val2,    val1)    {    	non-compiled	[CE]  ')'  expected	122	None	replace
1938	[BUG]  [BUGGY]  switch(val1  -  val1,  val2)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1  -  val1,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1  -  val1,  val2)  {	  switch(val2,    val1)    {    	non-compiled	[CE]  ')'  expected	122	None	replace
1939	[BUG]  [BUGGY]  safeMultiply(val1,  false);  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  false);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  false);	          if(val1    >=    val2)    {    return    val2;    }    if(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	203	None	replace
1940	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2,  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2,  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1,  val2,  val1.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val1,    val2.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	353	None	replace
1941	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2,  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2,  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1,  val2,  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val1,    val2.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	353	None	replace
1942	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  getValue(val3,  val2);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  getValue(val3,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  getValue(val3,  val2);	  int    val2    =    getValue(val1)-    getValue(val2,    val2);    	non-compiled	[CE]  orphaned  case	287	None	replace
1943	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
1944	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
1945	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
1946	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
1947	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
1948	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
1949	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
1950	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
1951	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
1952	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
1953	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
1954	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
1955	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
1956	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
1957	[BUG]  [BUGGY]  while(val1  <  val2)  {  return  val2  +  val1;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  return  val2  +  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  return  val2  +  val1;	  while(val1    <    val2)    {    return    val2;    	non-compiled	[CE]  orphaned  case	299	None	replace
1958	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	170	None	add
1959	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	170	1	add
1960	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	170	1	add
1961	[BUG]  [BUGGY]  for(long  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(long  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	382	None	replace
1962	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	382	None	replace
1963	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val3  <  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val3  <  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val3  <  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	346	None	replace
1964	[BUG]  [BUGGY]  for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	346	None	replace
1965	[BUG]  [BUGGY]  int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    1;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	201	None	replace
1966	[BUG]  [BUGGY]  tryFallThrough(val1,  val2)  {  return  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFallThrough(val1,  val2)  {  return  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFallThrough(val1,  val2)  {  return  safeMultiply(val1,  val2);  }	  tryFallThrough(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  ';'  expected	341	None	replace
1967	[BUG]  [BUGGY]  tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "* ");  }  [CE]  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "* ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "* ");  }	  tryFallThrough(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	341	None	replace
1968	[BUG]  [BUGGY]  tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [CE]  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }	  tryFallThrough(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	341	None	replace
1969	[BUG]  [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( " ".doubleValue());  }  [CE]  orphaned  case  [FE]        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( " ".doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  >=  val2)  {  throw  new  ArithmeticException( " ".doubleValue());  }	  while(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	14	None	replace
1970	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  getValue(val1,  val2)+  1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  getValue(val1,  val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  getValue(val1,  val2)+  1;	  int    val2    =    getValue(val1)-    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	139	None	replace
1971	[BUG]  [BUGGY]  int  val2  =  safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  safeMultiply(val1,  val2);	  int    val2    =    getValue(val1)-    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	139	None	replace
1972	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  {  return  val2;  }  [CE]  ';'  expected  [FE]        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)  {  return  val2;  }	  safeMultiply(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  ';'  expected	293	None	replace
1973	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	13	None	replace
1974	[BUG]  [BUGGY]  if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	13	None	replace
1975	[BUG]  [BUGGY]  if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	13	None	replace
1976	[BUG]  [BUGGY]  if(val1  <  val2)  {  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	13	None	replace
1977	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	10	None	replace
1978	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	10	None	replace
1979	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val2)/(long)Math.floor(val1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val2)/(long)Math.floor(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val2)/(long)Math.floor(val1);	  long    val2    =(long)Math.floor(val1)-(long)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	230	None	replace
1980	[BUG]  [BUGGY]  long  val2  =(long)Math.log(val1)-(long)Math.floor(val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.log(val1)-(long)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.log(val1)-(long)Math.floor(val2);	  long    val2    =(long)Math.floor(val1)-(long)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	230	None	replace
1981	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	362	None	replace
1982	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	362	None	replace
1983	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	362	None	replace
1984	[BUG]  [BUGGY]  for(int  val1  =  0;  val1!=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1!=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1!=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	362	None	replace
1985	[BUG]  [BUGGY]  for(int  val1  =  0;  val1!=  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1!=  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1!=  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	362	None	replace
1986	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  >=  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  >=  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  >=  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	362	None	replace
1987	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	362	None	replace
1988	[BUG]  [BUGGY]  int  val2  =  super.safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  super.safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  super.safeMultiply(val1,  val2);	  int    val2    =    getValue(val2);    	non-compiled	[CE]  orphaned  case	188	None	replace
1989	[BUG]  [BUGGY]  int  val2  =  safeMultiply(val1);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  safeMultiply(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  safeMultiply(val1);	  int    val2    =    getValue(val2);    	non-compiled	[CE]  orphaned  case	188	None	replace
1990	[BUG]  [BUGGY]  safeMutator.safeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMutator.safeMultiply(val2,  val1);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMutator.safeMultiply(val2,  val1);	  SafeMutator.safeMultiply(val1);    	non-compiled	[CE]  orphaned  case	216	None	replace
1991	[BUG]  [BUGGY]  safeMultiply(val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2);	  SafeMutator.safeMultiply(val1);    	non-compiled	[CE]  orphaned  case	216	None	replace
1992	[BUG]  [BUGGY]  if(val1  >  0  ||  val2  <  0)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  0  ||  val2  <  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  0  ||  val2  <  0)  {	  if(val1    ==    0    ||    val2    ==    0)    {    	non-compiled	[CE]  orphaned  case	156	None	replace
1993	[BUG]  [BUGGY]  int  val2  =  Math.max(val1,  val2)+  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.max(val1,  val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.max(val1,  val2)+  1;	  int    val2    =    Math.min(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	284	None	replace
1994	[BUG]  [BUGGY]  int  val2  =  Math.min(val1,  val2)%  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(val1,  val2)%  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(val1,  val2)%  1;	  int    val2    =    Math.min(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	284	None	replace
1995	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	360	None	replace
1996	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	360	None	replace
1997	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	360	None	replace
1998	[BUG]  [BUGGY]  for(int  val1  =  0;  val1!=  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1!=  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1!=  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	360	None	replace
1999	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	279	None	replace
2000	[BUG]  [BUGGY]  safeMultiply(val1,  val2).restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2).restrictByNotNullOrUndefined();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2).restrictByNotNullOrUndefined();	          if(val1    ==    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    	non-compiled	[CE]  orphaned  case	60	None	replace
2001	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1)-(double)Math.floor(val2)+  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1)-(double)Math.floor(val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1)-(double)Math.floor(val2)+  1;	  double    val2    =(double)Math.floor(val1)-(double)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	236	None	replace
2002	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val2)/(double)Math.floor(val1);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val2)/(double)Math.floor(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val2)/(double)Math.floor(val1);	  double    val2    =(double)Math.floor(val1)-(double)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	236	None	replace
2003	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	345	None	replace
2004	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	345	None	replace
2005	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	345	None	replace
2006	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1,  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	345	None	replace
2007	[BUG]  [BUGGY]  double  val2  =(double)Math.log(val2,  val1);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.log(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.log(val2,  val1);	  double    val2    =(double)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	106	None	replace
2008	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1,  val2)-  2;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1,  val2)-  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1,  val2)-  2;	  double    val2    =(double)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	106	None	replace
2009	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	30	None	replace
2010	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	30	None	replace
2011	[BUG]  [BUGGY]  safeMultiply(val1,  0,  val2);  [CE]  orphaned  case  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  0,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  0,  val2);	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	171	None	replace
2012	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >  val1)  {  safeMultiply(val2,  val1);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >  val1)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  >  val1)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    val1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	274	None	replace
2013	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  >  val2  +=  val1)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  >  val2  +=  val1)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  >  val2  +=  val1)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    val1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	274	None	replace
2014	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  >  val2  +=  val1)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  >  val2  +=  val1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  >  val2  +=  val1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    val1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	274	None	replace
2015	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +=  val2)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +=  val2)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  +=  val2)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    val1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	274	None	replace
2016	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    val1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	274	None	replace
2017	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  val2  *  val1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  val2  *  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)/  val2  *  val1;	  int    val2    =(int)Math.floor(val1,    val2)/    val2;    	non-compiled	[CE]  orphaned  case	63	None	replace
2018	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  total;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)/  total;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)/  total;	  int    val2    =(int)Math.floor(val1,    val2)/    val2;    	non-compiled	[CE]  orphaned  case	63	None	replace
2019	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	368	None	replace
2020	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	368	None	replace
2021	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	368	None	replace
2022	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	368	None	replace
2023	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1);  [CE]  orphaned  case  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1);	  throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  orphaned  case	17	None	replace
2024	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2025	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2026	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2027	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2028	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	205	None	add
2029	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2030	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2031	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2032	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2033	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >>  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	205	None	add
2034	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2035	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2036	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2037	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2038	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2039	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2040	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  >>  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  >>  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  >>  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	205	None	add
2041	[BUG]  [BUGGY]  if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	51	None	replace
2042	[BUG]  [BUGGY]  if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	51	None	replace
2043	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	51	None	replace
2044	[BUG]  [BUGGY]  switch(val1  >  val2)  {  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1  >  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1  >  val2)  {	  switch(val1    <    =    val2)    {    	non-compiled	[CE]  incompatible  types	163	None	replace
2045	[BUG]  [BUGGY]  switch(val1  >>  val2)  {  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1  >>  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1  >>  val2)  {	  switch(val1    <    =    val2)    {    	non-compiled	[CE]  possible  loss  of  precision	163	None	replace
2046	[BUG]  [BUGGY]  switch(val1  ==  val2)  {  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1  ==  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1  ==  val2)  {	  switch(val1    <    =    val2)    {    	non-compiled	[CE]  incompatible  types	163	None	replace
2047	[BUG]  [BUGGY]  long  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	29	None	replace
2048	[BUG]  [BUGGY]  if(val1  <  val2)  {  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	29	None	replace
2049	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2050	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2051	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2052	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2053	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2054	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2055	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2056	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2057	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2058	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2059	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	247	None	add
2060	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val1,  val2);  safeMultiply(val1.  val2);  [CE]  long  cannot  be  dereferenced  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val1,  val2);  safeMultiply(val1.  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val1);    safeMultiply(val1,  val2);  safeMultiply(val1.  val2);	  	non-compiled	[CE]  long  cannot  be  dereferenced	91	None	add
2061	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	387	None	replace
2062	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	387	None	replace
2063	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	387	None	replace
2064	[BUG]  [BUGGY]  for(int  val1  =  0;  val1!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	387	None	replace
2065	[BUG]  [BUGGY]  for(int  val1  =  0;  val1!=  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1!=  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1!=  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	387	None	replace
2066	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)/  2L;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2)/  2L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)/  2L;	  int    val2    =(int)Math.floor(val1)/    2;    	non-compiled	[CE]  orphaned  case	66	None	replace
2067	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  2  +  4;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  2  +  4;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  2  +  4;	  int    val2    =(int)Math.floor(val1)/    2;    	non-compiled	[CE]  orphaned  case	66	None	replace
2068	[BUG]  [BUGGY]  boolean  val2  =  getValue(val1,  val2)&&  safeMultiply(val2);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  getValue(val1,  val2)&&  safeMultiply(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  getValue(val1,  val2)&&  safeMultiply(val2);	  boolean    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	80	None	replace
2069	[BUG]  [BUGGY]  boolean  val2  =(val1  >=  val2)?  getValue(val1,  val2):  false;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =(val1  >=  val2)?  getValue(val1,  val2):  false;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =(val1  >=  val2)?  getValue(val1,  val2):  false;	  boolean    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	80	None	replace
2070	[BUG]  [BUGGY]  boolean  val2  =  super.safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  super.safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  super.safeMultiply(val1,  val2);	  boolean    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	80	None	replace
2071	[BUG]  [BUGGY]  float  val2  =  safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  safeMultiply(val1,  val2);	  float    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	388	None	replace
2072	[BUG]  [BUGGY]  float  val2  =  getValue(val1,  val2)-  2;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  getValue(val1,  val2)-  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val1,  val2)-  2;	  float    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	388	None	replace
2073	[BUG]  [BUGGY]  float  val2  =(float)Math.pow(10,  val1)/  val2;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.pow(10,  val1)/  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.pow(10,  val1)/  val2;	  float    val2    =(float)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	312	None	replace
2074	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	383	None	replace
2075	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	383	None	replace
2076	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	383	None	replace
2077	[BUG]  [BUGGY]  safeMultiply(val1,  val2).returnValue();  [CE]  orphaned  case  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2).returnValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2).returnValue();	          if(val1    ==    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	54	None	replace
2078	[BUG]  [BUGGY]  long  val2  =  val1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	9	None	replace
2079	[BUG]  [BUGGY]  long  val2  =  0L;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0L;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0L;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	9	None	replace
2080	[BUG]  [BUGGY]  long  val2  =  0;  val1  >  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  >  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  >  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	47	None	replace
2081	[BUG]  [BUGGY]  long  val2  =  0;  val1  +  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  +  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  +  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	47	None	replace
2082	[BUG]  [BUGGY]  long  val2  =  val1,  val2  *  val1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2  *  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2  *  val1;	  long    val2    =    val1,    val2;    	non-compiled	[CE]  ';'  expected	116	None	replace
2083	[BUG]  [BUGGY]  int  val2  =  safeMultiply(val1,  val2)-  getValue(val1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  safeMultiply(val1,  val2)-  getValue(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  safeMultiply(val1,  val2)-  getValue(val1);	  int    val2    =    getValue(val2)-    getValue(val1);    	non-compiled	[CE]  orphaned  case	135	None	replace
2084	[BUG]  [BUGGY]  if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	33	None	replace
2085	[BUG]  [BUGGY]  if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	33	None	replace
2086	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)-(int)Math.floor(val2,  val1);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2)-(int)Math.floor(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)-(int)Math.floor(val2,  val1);	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2,    val1);    	non-compiled	[CE]  orphaned  case	237	None	replace
2087	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2,  val1)+  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2,  val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2,  val1)+  1;	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2,    val1);    	non-compiled	[CE]  orphaned  case	237	None	replace
2088	[BUG]  [BUGGY]  long  val2  =  val1.length  *  val2  +  val2.length;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length  *  val2  +  val2.length;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length  *  val2  +  val2.length;	  long    val2    =    val1.length    *    val2;    	non-compiled	[CE]  orphaned  case	119	None	replace
2089	[BUG]  [BUGGY]  safeMultiply(val2,  val1);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue()  + "  *   "  +  val2.doubleValue());  }  [CE]  orphaned  case  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2,  val1);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue()  + "  *   "  +  val2.doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val1);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue()  + "  *   "  +  val2.doubleValue());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.doubleValue()    +   "    *   "    +    val2.doubleValue());    }    	non-compiled	[CE]  orphaned  case	333	None	replace
2090	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	11	None	replace
2091	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	11	None	replace
2092	[BUG]  [BUGGY]  for(long  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(long  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	11	None	replace
2093	[BUG]  [BUGGY]  int  val2  =  safeMultiply(val1,  val2)-  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  safeMultiply(val1,  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  safeMultiply(val1,  val2)-  1;	  int    val2    =    getValue(val1,    val2)-    1;    	non-compiled	[CE]  orphaned  case	74	None	replace
2094	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  -1);  [CE]  orphaned  case  [FE]                  StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  -1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  -1);	  safeMultiply(val1,    val2,    0);    	non-compiled	[CE]  orphaned  case	169	None	replace
2095	[BUG]  [BUGGY]  float  val2  =(float)Math.pow(10,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.pow(10,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.pow(10,  val2);	  float    val2    =(float)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	221	None	replace
2096	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  ==  ';'  [CE]  not  a  statement  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)  ==  ';'  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)  ==  ';'	  safeMultiply(val1,    val2)    	non-compiled	[CE]  not  a  statement	296	None	replace
2097	[BUG]  [BUGGY]  safeMultiply(val1,  val2)!=  ';'  [CE]  not  a  statement  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)!=  ';'  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)!=  ';'	  safeMultiply(val1,    val2)    	non-compiled	[CE]  not  a  statement	296	None	replace
2098	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  ==  0;  [CE]  not  a  statement  [FE]                  ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)  ==  0;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)  ==  0;	  safeMultiply(val1,    val2)    	non-compiled	[CE]  not  a  statement	296	None	replace
2099	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  ==  ';';  [CE]  not  a  statement  [FE]                    ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)  ==  ';';  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)  ==  ';';	  safeMultiply(val1,    val2)    	non-compiled	[CE]  not  a  statement	296	None	replace
2100	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(long)Math.pow(10,  val1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(long)Math.pow(10,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(long)Math.pow(10,  val1);	  long    val2    =    val1    *    val2    +(int)Math.pow(10,    val2);    	non-compiled	[CE]  orphaned  case	305	None	replace
2101	[BUG]  [BUGGY]  if(val1  >  val2)  {  tries.put(val1,  val2);  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2)  {  tries.put(val1,  val2);  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  tries.put(val1,  val2);  }  else  {  throw  new  ArithmeticException( " ");  }	  tries.put(val1,    val2);    	non-compiled	[CE]  orphaned  case	20	None	replace
2102	[BUG]  [BUGGY]  if(val1!=  val2)  {  tries.put(val1,  val2);  }  [CE]  orphaned  case  [FE]                      ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1!=  val2)  {  tries.put(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1!=  val2)  {  tries.put(val1,  val2);  }	  tries.put(val1,    val2);    	non-compiled	[CE]  orphaned  case	20	None	replace
2103	[BUG]  [BUGGY]  tryFactory().safeMultiply(val1,  val1);  [CE]  orphaned  case  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFactory().safeMultiply(val1,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFactory().safeMultiply(val1,  val1);	  tryFactory().safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	342	None	replace
2104	[BUG]  [BUGGY]  ||(val1  >  val2)&&(val2!=  val1))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val1  >  val2)&&(val2!=  val1))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1  >  val2)&&(val2!=  val1))  {  return  val2;  }	  ||(val1    >=    val2)&&(val2!=    val1))    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
2105	[BUG]  [BUGGY]  ||(val1  [Delete]  val2)&&(val2  ==  val1))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val1  [Delete]  val2)&&(val2  ==  val1))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1  [Delete]  val2)&&(val2  ==  val1))  {  return  val2;  }	  ||(val1    >=    val2)&&(val2!=    val1))    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
2106	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	359	None	replace
2107	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	359	None	replace
2108	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  false,  val1);  [CE]  orphaned  case  [FE]                StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  false,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  false,  val1);	  safeMultiply(val1,    val2,    false);    	non-compiled	[CE]  orphaned  case	168	None	replace
2109	[BUG]  [BUGGY]  for(long  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(long  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	361	None	replace
2110	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  return  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  return  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  return  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	361	None	replace
2111	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  return  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  return  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  return  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	386	None	replace
2112	[BUG]  [BUGGY]  SafeMultiply(val1,  val2);  safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                  StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply(val1,  val2);  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply(val1,  val2);  safeMultiply(val1,  val2);	          safeMultiply(val1,    val2);    safelyMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	88	None	replace
2113	[BUG]  [BUGGY]  SafeMultiply(val1,  val2);  safeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]                    StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply(val1,  val2);  safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply(val1,  val2);  safeMultiply(val2,  val1);	          safeMultiply(val1,    val2);    safelyMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	88	None	replace
2114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2115	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  ==  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2117	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2119	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2121	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2122	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val1;  }  if(val2  ==  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val1;  }  if(val2  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val1;  }  if(val2  ==  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	207	None	add
2123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val2  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val2  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2124	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val2  ==  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val2  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val2  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2125	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	207	None	add
2126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2127	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2129	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2130	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >>  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	207	None	add
2131	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	129	None	replace
2132	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val1,  val2,  val2);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val1,  val2,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  safeMultiply(val1,  val2,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	128	None	replace
2133	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  +  1)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  +  1)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  +  1)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  not  a  statement	128	None	replace
2134	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  ';'  expected	128	None	replace
2135	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val2);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	128	None	replace
2136	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)+  1L;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)+  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  getValue(val2)+  1L;	  int    val2    =    getValue(val1)-    getValue(val2)+    1;    	non-compiled	[CE]  orphaned  case	138	None	replace
2137	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)+  3;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  getValue(val2)+  3;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  getValue(val2)+  3;	  int    val2    =    getValue(val1)-    getValue(val2)+    1;    	non-compiled	[CE]  orphaned  case	138	None	replace
2138	[BUG]  [BUGGY]  SafeRange(val1,  val2,  true)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRange(val1,  val2,  true)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRange(val1,  val2,  true)  {	  SafeRange(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	313	None	replace
2139	[BUG]  [BUGGY]  safeMultiply(val0,  val1);  [CE]  orphaned  case  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val0,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val0,  val1);	  safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	165	None	replace
2140	[BUG]  [BUGGY]  safeMultiply(0,  val1);  [CE]  orphaned  case  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(0,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(0,  val1);	  safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	165	None	replace
2141	[BUG]  [BUGGY]  safeMultiply(val1,  val2)&&  safeMultiply(val2))  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)&&  safeMultiply(val2))  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)&&  safeMultiply(val2))  {  throw  new  ArithmeticException( " ");  }	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    >>    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  not  a  statement	172	None	replace
2142	[BUG]  [BUGGY]  safeMultiply(val1,  val2))  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2))  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2))  {  throw  new  ArithmeticException( " ");  }	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    >>    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  	172	None	replace
2143	[BUG]  [BUGGY]  safeMultiply(val1,  val2)&&  safeMultiply(val2,  val1))  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)&&  safeMultiply(val2,  val1))  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)&&  safeMultiply(val2,  val1))  {  throw  new  ArithmeticException( " ");  }	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    >>    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  not  a  statement	172	None	replace
2144	[BUG]  [BUGGY]  safeMultiply(val1,  val2)&&  safeMultiply(val2  <  val1))  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)&&  safeMultiply(val2  <  val1))  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)&&  safeMultiply(val2  <  val1))  {  throw  new  ArithmeticException( " ");  }	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    >>    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  not  a  statement	172	None	replace
2145	[BUG]  [BUGGY]  cuplurs  =  safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                  ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  cuplurs  =  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	cuplurs  =  safeMultiply(val1,  val2);	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    >>    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	172	None	replace
2146	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  VAL1  +  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  VAL1  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  VAL1  +  1;	  int    val2    =(int)Math.floor(val1)/    VAL1;    	non-compiled	[CE]  orphaned  case	371	None	replace
2147	[BUG]  [BUGGY]  for(long  val1  =  0;  val  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(long  val1  =  0;  val  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val1  =  0;  val  <  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	381	None	replace
2148	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	381	None	replace
2149	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	93	None	replace
2150	[BUG]  [BUGGY]  Switch(val1  ==  -1)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1  ==  -1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1  ==  -1)  {	  Switch(val2    ==    0)    {    	non-compiled	[CE]  ';'  expected	350	None	replace
2151	[BUG]  [BUGGY]  Switch(val1  ==  0.0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1  ==  0.0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1  ==  0.0)  {	  Switch(val2    ==    0)    {    	non-compiled	[CE]  ';'  expected	350	None	replace
2152	[BUG]  [BUGGY]  safely(val1,  val2);  [CE]  orphaned  case  [FE]                StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safely(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safely(val1,  val2);	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ")    +   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	336	None	replace
2153	[BUG]  [BUGGY]  long  val2  =  val1  *  val2.getLongValue();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2.getLongValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2.getLongValue();	  long    val2    =    val1    *    val2.longValue();    	non-compiled	[CE]  orphaned  case	280	None	replace
2154	[BUG]  [BUGGY]  for(long  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(long  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	24	None	replace
2155	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	24	None	replace
2156	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
2157	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	57	None	add
2158	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	57	None	add
2159	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	57	None	add
2160	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	57	None	add
2161	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]              ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	57	1	add
2162	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]              ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	57	1	add
2163	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]                ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	57	1	add
2164	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]                ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	57	1	add
2165	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1,  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	130	None	replace
2166	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	130	None	replace
2167	[BUG]  [BUGGY]  boolean  val2  =(boolean)Math.floor(val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =(boolean)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =(boolean)Math.floor(val2);	  int    val2    =(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	219	None	replace
2168	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2).reset();  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2).reset();  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val++)  {  safeMultiply(val1,  val2).reset();  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1).reset();    }    	non-compiled	[CE]  orphaned  case	292	None	replace
2169	[BUG]  [BUGGY]  for(int  val2  =  0;  val!=  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val!=  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val!=  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1).reset();    }    	non-compiled	[CE]  orphaned  case	292	None	replace
2170	[BUG]  [BUGGY]  for(int  val2  =  0;  val  >=  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  >=  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  >=  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1).reset();    }    	non-compiled	[CE]  orphaned  case	292	None	replace
2171	[BUG]  [BUGGY]  if(val1  ==  val2  ||  val1  ==  0.0)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2  ||  val1  ==  0.0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2  ||  val1  ==  0.0)  {	  if(val1    ==    val2    ||    val1    ==    0)    {    	non-compiled	[CE]  orphaned  case	251	None	replace
2172	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-  4;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-  4;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)-  4;	  int    val2    =(int)Math.floor(val1,    val2)-    3;    	non-compiled	[CE]  orphaned  case	285	None	replace
2173	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val1,  val2)-  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val1,  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val1,  val2)-  1;	  int    val2    =(int)Math.floor(val1,    val2)-    3;    	non-compiled	[CE]  orphaned  case	285	None	replace
2174	[BUG]  [BUGGY]  if(val1  ==  0L  ||  val2  >=  0L)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  0L  ||  val2  >=  0L)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  0L  ||  val2  >=  0L)  {	  if(val1    ==    0L)    {    	non-compiled	[CE]  orphaned  case	159	None	replace
2175	[BUG]  [BUGGY]  int  val2  =  getValue(value1,  val2)+  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(value1,  val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(value1,  val2)+  1;	  int    val2    =    getValue(value1,    val2);    	non-compiled	[CE]  orphaned  case	265	None	replace
2176	[BUG]  [BUGGY]  int  val2  =  getValue(val2)/  2  +  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)/  2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)/  2  +  1;	  int    val2    =    getValue(val1)/    2;    	non-compiled	[CE]  orphaned  case	189	None	replace
2177	[BUG]  [BUGGY]  allowMultiply(val1,  val2)  {  return  val2;  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  allowMultiply(val1,  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	allowMultiply(val1,  val2)  {  return  val2;  }	  if(val1    ==    val2)    {    return    val2;    }    	non-compiled	[CE]  ';'  expected	108	None	replace
2178	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  >=  val2.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    >=    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	273	None	replace
2179	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  >=  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  >=  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  >=  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    >=    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	273	None	replace
2180	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  >=  val2.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    >=    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	273	None	replace
2181	[BUG]  [BUGGY]  if(val1  ==  val2)  {  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	317	None	replace
2182	[BUG]  [BUGGY]  boolean  val1  =  false;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val1  =  false;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val1  =  false;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	317	None	replace
2183	[BUG]  [BUGGY]  int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	317	None	replace
2184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
2185	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
2186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
2187	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
2188	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;	  	non-compiled	[CE]  illegal  start  of  expression	262	None	add
2189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
2190	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
2191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
2192	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
2193	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)/  2  *  0L;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)/  2  *  0L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)/  2  *  0L;	  int    val2    =    getValue(val1,    val2)/    2;    	non-compiled	[CE]  orphaned  case	76	None	replace
2194	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)/  2  +  1L;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)/  2  +  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)/  2  +  1L;	  int    val2    =    getValue(val1,    val2)/    2;    	non-compiled	[CE]  orphaned  case	76	None	replace
2195	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(long)Math.rint((  int)val1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(long)Math.rint((  int)val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(long)Math.rint((  int)val1);	  long    val2    =    val1    *    val2    +(int)Math.rint((    int)val1);    	non-compiled	[CE]  orphaned  case	306	None	replace
2196	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.rint((  int)val1)+  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.rint((  int)val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(int)Math.rint((  int)val1)+  1;	  long    val2    =    val1    *    val2    +(int)Math.rint((    int)val1);    	non-compiled	[CE]  orphaned  case	306	None	replace
2197	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(char)Math.rint((  char)val1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(char)Math.rint((  char)val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(char)Math.rint((  char)val1);	  long    val2    =    val1    *    val2    +(int)Math.rint((    int)val1);    	non-compiled	[CE]  orphaned  case	306	None	replace
2198	[BUG]  [BUGGY]  if(val1!=  val2  ||  val1  >=  val1)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1!=  val2  ||  val1  >=  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1!=  val2  ||  val1  >=  val1)  {	  if(val1    <    val2    ||    val1    >=    val2)    {    	non-compiled	[CE]  orphaned  case	71	None	replace
2199	[BUG]  [BUGGY]  safeMultiply(val2,  val1);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.toString()  + "  *   "  +  val2.toString());  }  [CE]  orphaned  case  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2,  val1);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.toString()  + "  *   "  +  val2.toString());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val1);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.toString()  + "  *   "  +  val2.toString());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.toString()    +   "    *   "    +    val2.toString());    }    	non-compiled	[CE]  orphaned  case	334	None	replace
2200	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.toString()  + "  *   "  +  val2.toString());  }  [CE]  orphaned  case  [FE]              StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.toString()  + "  *   "  +  val2.toString());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.toString()  + "  *   "  +  val2.toString());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.toString()    +   "    *   "    +    val2.toString());    }    	non-compiled	[CE]  orphaned  case	334	None	replace
2201	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  val2;  }  else  if(val1  <  val2)  {  return  val1;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  return  val2;  }  else  if(val1  <  val2)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  return  val2;  }  else  if(val1  <  val2)  {  return  val1;  }	          if(val1    >=    val2)    {    return    val2;    }    if(val1    <    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	309	None	replace
2202	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  val2;  }  else  if(val1  >  val2)  {  return  val2;  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  return  val2;  }  else  if(val1  >  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  return  val2;  }  else  if(val1  >  val2)  {  return  val2;  }	          if(val1    >=    val2)    {    return    val2;    }    if(val1    <    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	309	None	replace
2203	[BUG]  [BUGGY]  Switch(val1  >>  val2)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1  >>  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1  >>  val2)  {	  Switch(val1    ==    val2)    {    	non-compiled	[CE]  ';'  expected	281	None	replace
2204	[BUG]  [BUGGY]  Switch(val1!=  val2)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1!=  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1!=  val2)  {	  Switch(val1    ==    val2)    {    	non-compiled	[CE]  ';'  expected	281	None	replace
2205	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)-  getValue(val3);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)-  getValue(val3);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)-  getValue(val3);	  int    val2    =    getValue(val1,    val2)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	136	None	replace
2206	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2,  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	32	None	replace
2207	[BUG]  [BUGGY]  long  val2  =  val1  *  val2)+  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2)+  1;	  long    val2    =    val1    *    val2);    	non-compiled	[CE]  ';'  expected	390	None	replace
2208	[BUG]  [BUGGY]  for(int  val1,  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1,  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1,  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	200	None	replace
2209	[BUG]  [BUGGY]  for(long  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(long  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val2  =  0;  val  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	200	None	replace
2210	[BUG]  [BUGGY]  while(val1  <  val2)  {  return  safeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                  ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  return  safeMultiply(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  return  safeMultiply(val1,  val2);	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  orphaned  case	19	None	replace
2211	[BUG]  [BUGGY]  while(val1!=  val2)  {  throw  new  ArithmeticException( " ");  [CE]  orphaned  case  [FE]                    ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1!=  val2)  {  throw  new  ArithmeticException( " ");  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1!=  val2)  {  throw  new  ArithmeticException( " ");	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  orphaned  case	19	None	replace
2212	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  1)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  1)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  +=  1)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	131	None	replace
2213	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +=  2)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  +=  2)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  +=  2)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	131	None	replace
2214	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-(int)Math.floor(val2,  val1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-(int)Math.floor(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)-(int)Math.floor(val2,  val1);	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2,    val2);    	non-compiled	[CE]  orphaned  case	260	None	replace
2215	[BUG]  [BUGGY]  long  val2  =  val1  +  val2  +  val1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  +  val2  +  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  +  val2  +  val1;	  long    val2    =    val1    +    val2;    	non-compiled	[CE]  orphaned  case	120	None	replace
2216	[BUG]  [BUGGY]  long  val2  =  val1  +  val2);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  +  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  +  val2);	  long    val2    =    val1    +    val2;    	non-compiled	[CE]  ';'  expected	120	None	replace
2217	[BUG]  [BUGGY]  long  val2  =  val1  +  val2  -  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  +  val2  -  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  +  val2  -  1;	  long    val2    =    val1    +    val2;    	non-compiled	[CE]  orphaned  case	120	None	replace
2218	[BUG]  [BUGGY]  long  val2  =  val1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	196	None	replace
2219	[BUG]  [BUGGY]  long  val2  =  val1;  val2  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1;  val2  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1;  val2  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	196	None	replace
2220	[BUG]  [BUGGY]  switch(val2,  val1)restrictByNotNullOrUndefined();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val2,  val1)restrictByNotNullOrUndefined();  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val2,  val1)restrictByNotNullOrUndefined();	  switch(val1,    val2).restrictByNotNullOrUndefined();    	non-compiled	[CE]  ')'  expected	374	None	replace
2221	[BUG]  [BUGGY]  switch(val1,  val2).restrictByNotEmptyOrNullOrUndefined();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictByNotEmptyOrNullOrUndefined();  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictByNotEmptyOrNullOrUndefined();	  switch(val1,    val2).restrictByNotNullOrUndefined();    	non-compiled	[CE]  ')'  expected	374	None	replace
2222	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  if(val2  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  if(val2  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2.length;  val2++)  {  if(val2  <  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
2223	[BUG]  [BUGGY]  tryFailure(val1,  val2,  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFailure(val1,  val2,  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFailure(val1,  val2,  val1)  {  throw  new  ArithmeticException( " ");  }	  tryFailure(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	340	None	replace
2224	[BUG]  [BUGGY]  tryFailure(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFailure(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFailure(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }	  tryFailure(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	340	None	replace
2225	[BUG]  [BUGGY]  long  val2  =  Math.min(val2,  val1)+  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  Math.min(val2,  val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  Math.min(val2,  val1)+  1;	  long    val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	39	None	replace
2226	[BUG]  [BUGGY]  long  val2  =  Math.max(val1,  val2);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  Math.max(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  Math.max(val1,  val2);	  long    val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	39	None	replace
2227	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2)-  1L;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2)-  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)-(int)Math.floor(val2)-  1L;	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2)-    1;    	non-compiled	[CE]  orphaned  case	233	None	replace
2228	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)/(int)Math.floor(val1)-  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2)/(int)Math.floor(val1)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)/(int)Math.floor(val1)-  1;	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2)-    1;    	non-compiled	[CE]  orphaned  case	233	None	replace
2229	[BUG]  [BUGGY]  if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	199	None	replace
2230	[BUG]  [BUGGY]  char  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	199	None	replace
2231	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	181	None	replace
2232	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  val++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	25	None	replace
2233	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.doubleValue());    }    	non-compiled	[CE]  orphaned  case	335	None	replace
2234	[BUG]  [BUGGY]  safeMultiply(val2,  val1);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [CE]  orphaned  case  [FE]                StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2,  val1);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val1);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.doubleValue());    }    	non-compiled	[CE]  orphaned  case	335	None	replace
2235	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( " "  +  val1.doubleValue());  }  [CE]  orphaned  case  [FE]                  StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( " "  +  val1.doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( " "  +  val1.doubleValue());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.doubleValue());    }    	non-compiled	[CE]  orphaned  case	335	None	replace
2236	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( " "  +  val2.doubleValue());  }  [CE]  orphaned  case  [FE]                    StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( " "  +  val2.doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  if(val2  >=  val1)  {  throw  new  ArithmeticException( " "  +  val2.doubleValue());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.doubleValue());    }    	non-compiled	[CE]  orphaned  case	335	None	replace
2237	[BUG]  [BUGGY]  while(val1  ==  val2)  {  [CE]  orphaned  case  [FE]        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  ==  val2)  {  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  ==  val2)  {	  while(val1    <    val2)    {    	non-compiled	[CE]  orphaned  case	72	None	replace
2238	[BUG]  [BUGGY]  while(val1!=  val2)  {  [CE]  orphaned  case  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1!=  val2)  {  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1!=  val2)  {	  while(val1    <    val2)    {    	non-compiled	[CE]  orphaned  case	72	None	replace
2239	[BUG]  [BUGGY]  switch(val1,  false)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  false)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  false)  {	  switch(val1,    val2,    false)    {    	non-compiled	[CE]  ')'  expected	127	None	replace
2240	[BUG]  [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.log(val1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2  +(int)Math.log(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2  +(int)Math.log(val1);	  long    val2    =    val1    *    val2    +(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	307	None	replace
2241	[BUG]  [BUGGY]  short  val2  =  Math.min(val2,  val1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val2  =  Math.min(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val2  =  Math.min(val2,  val1);	  long    val2    =    Math.min(val1,    val2);    	non-compiled	[CE]  orphaned  case	38	None	replace
2242	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2243	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2244	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	243	None	add
2245	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2246	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2248	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2249	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	243	None	add
2250	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >>  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	non-compiled	[CE]  incompatible  types	243	None	add
2251	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	355	None	add
2252	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [CE]  <identifier>  expected  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	non-compiled	[CE]  <identifier>  expected	355	None	add
2253	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	355	None	add
2254	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	355	None	add
2255	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	355	None	add
2256	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException(  [CE]  <identifier>  expected  [FE]              ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  <identifier>  expected	355	None	add
2257	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]                ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	355	None	add
2258	[BUG]  [BUGGY]  long  val2  =  val1.doubleValue()  -  val2.doubleValue();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.doubleValue()  -  val2.doubleValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.doubleValue()  -  val2.doubleValue();	  long    val2    =    val1.doubleValue();    	non-compiled	[CE]  orphaned  case	149	None	replace
2259	[BUG]  [BUGGY]  float  val2  =  Math.min(val1,  val2)-  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  Math.min(val1,  val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  Math.min(val1,  val2)-  1;	  int    val2    =    Math.min(val1,    val2)-    1;    	non-compiled	[CE]  orphaned  case	43	None	replace
2260	[BUG]  [BUGGY]  for(int  val1  =  0;  val1!=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1!=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1!=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	367	None	replace
2261	[BUG]  [BUGGY]  for(int  val1  =  0;  val1!=  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1!=  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1!=  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	367	None	replace
2262	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	367	None	replace
2263	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	49	None	replace
2264	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	49	None	replace
2265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
2266	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
2267	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
2268	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
2269	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >>  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	308	None	add
2270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
2271	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
2272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
2273	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
2274	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
2275	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
2276	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
2277	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val2  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
2278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
2279	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
2280	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val2)+  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val2)+  1;	  int    val2    =(int)Math.floor(val1)+    1;    	non-compiled	[CE]  orphaned  case	220	None	replace
2281	[BUG]  [BUGGY]  safeMultiply(val1)  {  return  val2;  }  [CE]  ';'  expected  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1)  {  return  val2;  }	  safeMultiply(val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  ';'  expected	326	None	replace
2282	[BUG]  [BUGGY]  if(val1  >>  val2)  {  return  val2;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >>  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >>  val2)  {  return  val2;  }	          if(val1    >=    val2)    {    return    val2;    }    if(val1    >>    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	204	None	replace
2283	[BUG]  [BUGGY]  int  val2  =(val1  >=  val2)?  getValue(val1,  val2):  getValue(val1);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(val1  >=  val2)?  getValue(val1,  val2):  getValue(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(val1  >=  val2)?  getValue(val1,  val2):  getValue(val1);	  int    val2    =    getValue(val1,    val1);    	non-compiled	[CE]  orphaned  case	79	None	replace
2284	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)-  2  +  1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)-  2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)-  2  +  1;	  int    val2    =    getValue(val1,    val2)-    2;    	non-compiled	[CE]  orphaned  case	78	None	replace
2285	[BUG]  [BUGGY]  switch(val1)restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());  [CE]  '{'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1)restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1)restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined());    	non-compiled	[CE]  '{'  expected	378	None	replace
2286	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)-  1L;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)-  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)-  1L;	  int    val2    =(int)Math.floor(val1)-    1;    	non-compiled	[CE]  orphaned  case	218	None	replace
2287	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val2)-  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val2)-  1;	  int    val2    =(int)Math.floor(val1)-    1;    	non-compiled	[CE]  orphaned  case	218	None	replace
2288	[BUG]  [BUGGY]  tryFallThrough(val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFallThrough(val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFallThrough(val2)  {  throw  new  ArithmeticException( " ");  }	  tryFallThrough(val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	16	None	replace
2289	[BUG]  [BUGGY]  tryFallThrough(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * ");  }  [CE]  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFallThrough(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFallThrough(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * ");  }	  tryFallThrough(val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	16	None	replace
2290	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  1  +  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  1  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  1  +  1;	  int    val2    =    getValue(val1)-    1;    	non-compiled	[CE]  orphaned  case	185	None	replace
2291	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  3;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  3;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  3;	  int    val2    =    getValue(val1)-    1;    	non-compiled	[CE]  orphaned  case	185	None	replace
2292	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1)+  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1)+  1;	  double    val2    =(double)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	365	None	replace
2293	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val2)-  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val2)-  1;	  double    val2    =(double)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	365	None	replace
2294	[BUG]  [BUGGY]  double  val2  =(double)Math.pow(10,  val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.pow(10,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.pow(10,  val2);	  double    val2    =(double)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	365	None	replace
2295	[BUG]  [BUGGY]  double  val2  =(double)Math.ceil(val2);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.ceil(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.ceil(val2);	  double    val2    =(double)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	365	None	replace
2296	[BUG]  [BUGGY]  (val1  <  val2)||  val2  <  val1)  {  return  0L;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  (val1  <  val2)||  val2  <  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	(val1  <  val2)||  val2  <  val1)  {  return  0L;  }	  if(val1    <    =    val2)    {    return    0L;    }    	non-compiled	[CE]  not  a  statement	392	None	replace
2297	[BUG]  [BUGGY]  whilst(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  whilst(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	whilst(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	15	None	replace
2298	[BUG]  [BUGGY]  while(val1  <  val2)  {  return  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  return  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  return  safeMultiply(val1,  val2);  }	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	15	None	replace
2299	[BUG]  [BUGGY]  switch(val1,  false).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  false).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  false).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())  {	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  ')'  expected	376	None	replace
2300	[BUG]  [BUGGY]  switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined()).restrictByNotNullOrUndefined())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined()).restrictByNotNullOrUndefined())  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined()).restrictByNotNullOrUndefined())  {	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  ')'  expected	376	None	replace
2301	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1.doubleValue());  [CE]  orphaned  case  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1.doubleValue());  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1.doubleValue());	  safeMultiply(val1,    val2,    val2);    	non-compiled	[CE]  orphaned  case	166	None	replace
2302	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  >=  0)  {  safeMultiply(val2,  val1);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  >=  0)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  >=  0)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    0)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	276	None	replace
2303	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    0)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	276	None	replace
2304	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  >  0)  {  safeMultiply(val2,  val1);  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  >  0)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  >  0)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    0)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	276	None	replace
2305	[BUG]  [BUGGY]  long  val2  =  val1.getLongValue().longValue();  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.getLongValue().longValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.getLongValue().longValue();	  long    val2    =    val1.longValue().longValue();    	non-compiled	[CE]  orphaned  case	155	None	replace
2306	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	303	None	replace
2307	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val3  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val3  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val3  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	303	None	replace
2308	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	303	None	replace
2309	[BUG]  [BUGGY]  for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	303	None	replace
2310	[BUG]  [BUGGY]  for(long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	322	None	replace
2311	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  return  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  return  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  return  safeMultiply(val1,  val2);  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	322	None	replace
2312	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ".);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ".);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ".);  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	322	None	replace
2313	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	97	None	replace
2314	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	332	None	replace
2315	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-(int)Math.floor(val2)-  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-(int)Math.floor(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)-(int)Math.floor(val2)-  1;	  int    val2    =(int)Math.floor(val1,    val2)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	235	None	replace
2316	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-(int)Math.floor(val2)-(int)Math.floor(val1);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-(int)Math.floor(val2)-(int)Math.floor(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)-(int)Math.floor(val2)-(int)Math.floor(val1);	  int    val2    =(int)Math.floor(val1,    val2)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	235	None	replace
2317	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-(int)Math.floor(val2)+  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)-(int)Math.floor(val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)-(int)Math.floor(val2)+  1;	  int    val2    =(int)Math.floor(val1,    val2)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	235	None	replace
2318	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
2319	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
2320	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  >=  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  >=  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  >=  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
2321	[BUG]  [BUGGY]  float  val2  =(float)Math.log(val1)-(float)Math.floor(val2);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.log(val1)-(float)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.log(val1)-(float)Math.floor(val2);	  float    val2    =(float)Math.floor(val1)-(float)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	232	None	replace
2322	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	198	None	replace
2323	[BUG]  [BUGGY]  if(val1  >  val2)  {  safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2)  {  safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  }	          safeMultiply(val1,    val2);    safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	82	None	replace
2324	[BUG]  [BUGGY]  if(val1  >=  val2)  {  safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  }	          safeMultiply(val1,    val2);    safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	82	None	replace
2325	[BUG]  [BUGGY]  vice(new  ArithmeticException( " ")));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  vice(new  ArithmeticException( " ")));  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	vice(new  ArithmeticException( " ")));	          if(val1    >=    val2)    {    return    0L;    }    if(val1    >=    val2)    {    return    0L;    }    	non-compiled	[CE]  	239	None	replace
2326	[BUG]  [BUGGY]  for(int  val1,  val2  ==  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1,  val2  ==  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1,  val2  ==  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1,    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	316	None	replace
2327	[BUG]  [BUGGY]  for(long  val1,  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(long  val1,  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(long  val1,  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1,    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	316	None	replace
2328	[BUG]  [BUGGY]  for(int  val1,  val2  >=  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1,  val2  >=  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1,  val2  >=  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1,    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	316	None	replace
2329	[BUG]  [BUGGY]  for(int  val1,  val2!=  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1,  val2!=  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1,  val2!=  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1,    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	316	None	replace
2330	[BUG]  [BUGGY]  for(int  val1,  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1,  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1,  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1,    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	316	None	replace
2331	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  >=  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  >=  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	385	None	replace
2332	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	385	None	replace
2333	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	385	None	replace
2334	[BUG]  [BUGGY]  int  val2  =  0;  val  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	385	None	replace
2335	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  >  1)  {  safeMultiply(val2,  val1);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  >  1)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  >  1)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	275	None	replace
2336	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  >=  1)  {  safeMultiply(val2,  val1);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2  >=  1)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2  >=  1)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	275	None	replace
2337	[BUG]  [BUGGY]  if(val1  >=  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  return  val2;  }  [CE]  orphaned  case  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  return  val2;  }	  tries[val1]    =    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	343	None	replace
2338	[BUG]  [BUGGY]  if(val1  >=  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  return  0L;  }  [CE]  orphaned  case  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  return  0L;  }	  tries[val1]    =    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	343	None	replace
2339	[BUG]  [BUGGY]  Switch(val2  >=  val1)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val2  >=  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val2  >=  val1)  {	  Switch(val2    ==    val1)    {    	non-compiled	[CE]  ';'  expected	349	None	replace
2340	[BUG]  [BUGGY]  long  val2  =(long)Math.log(val2)/  val1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.log(val2)/  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.log(val2)/  val1;	  long    val2    =(long)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	61	None	replace
2341	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  >  val2  ||  val1  >=  val1)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  >  val2  ||  val1  >=  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  >  val2  ||  val1  >=  val1)  {	  if(val1    <    val2    ||    val1    >    val1)    {    	non-compiled	[CE]  orphaned  case	344	None	replace
2342	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  >  val2  ||  val1!=  val2)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  >  val2  ||  val1!=  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  >  val2  ||  val1!=  val2)  {	  if(val1    <    val2    ||    val1    >    val1)    {    	non-compiled	[CE]  orphaned  case	344	None	replace
2343	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  >  val2  ||  val1  ==  val2)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  >  val2  ||  val1  ==  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  >  val2  ||  val1  ==  val2)  {	  if(val1    <    val2    ||    val1    >    val1)    {    	non-compiled	[CE]  orphaned  case	344	None	replace
2344	[BUG]  [BUGGY]  if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	23	None	replace
2345	[BUG]  [BUGGY]  if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	23	None	replace
2346	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	23	None	replace
2347	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	48	None	replace
2348	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	48	None	replace
2349	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	48	None	replace
2350	[BUG]  [BUGGY]  if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	304	None	replace
2351	[BUG]  [BUGGY]  if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	304	None	replace
2352	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1)  {  throw  new  ArithmeticException( ". ");  }  [CE]  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1)  {  throw  new  ArithmeticException( ". ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1)  {  throw  new  ArithmeticException( ". ");  }	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    	non-compiled	[CE]  	356	None	replace
2353	[BUG]  [BUGGY]  Switch(val2  -  val1)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val2  -  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val2  -  val1)  {	  switch(val1    -    val2)    {    	non-compiled	[CE]  ';'  expected	266	None	replace
2354	[BUG]  [BUGGY]  Switch(val1  -  val2,  val2)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1  -  val2,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1  -  val2,  val2)  {	  Switch(val2,    val1)    {    	non-compiled	[CE]  ';'  expected	145	None	replace
2355	[BUG]  [BUGGY]  Switch(val1  -  val1,  val2)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1  -  val1,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1  -  val1,  val2)  {	  Switch(val2,    val1)    {    	non-compiled	[CE]  ';'  expected	145	None	replace
2356	[BUG]  [BUGGY]  SafeRange(val2)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRange(val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRange(val2)  {	  Switch(val2)    {    	non-compiled	[CE]  ';'  expected	214	None	replace
2357	[BUG]  [BUGGY]  for(int  val1,  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1,  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1,  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	28	None	replace
2358	[BUG]  [BUGGY]  For(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  For(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	For(int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	28	None	replace
2359	[BUG]  [BUGGY]  for(int  val1  =  0;  val3  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val3  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val3  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	28	None	replace
2360	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -val1;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  return  -val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  return  -val1;  }	  if(val1    ==    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	224	None	replace
2361	[BUG]  [BUGGY]  long  val2  =  val1.longValue().doubleValue();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.longValue().doubleValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.longValue().doubleValue();	  long    val2    =    val1.longValue()    +    1;    	non-compiled	[CE]  orphaned  case	151	None	replace
2362	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	324	None	replace
2363	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	324	None	replace
2364	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  >  expected	324	None	replace
2365	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	12	None	replace
2366	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	26	None	replace
2367	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  return  0L;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  return  0L;  }	  for(long    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	271	None	replace
2368	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2)  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2,    val1++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	384	None	replace
2369	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  <  val1)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  <  val1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2  <  val1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2,    val1++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	384	None	replace
2370	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  >  val1)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  >  val1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2  >  val1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2,    val1++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	384	None	replace
2371	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val2  <  val1)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val2  <  val1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2,  val2  <  val1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2,    val1++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	384	None	replace
2372	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val3)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val3)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2,  val3)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2,    val1++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	384	None	replace
2373	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  SafeMultiplication(val1,  val2,  val1);  [CE]  orphaned  case  [FE]                      StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  SafeMultiplication(val1,  val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  SafeMultiplication(val1,  val2,  val1);	          safeMultiply(val1,    val2);    SafeMultiplication(val1,    val2);    	non-compiled	[CE]  orphaned  case	90	None	replace
2374	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  ==  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  ==  val2.length;  val++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	270	None	replace
2375	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  val2  -  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  val2  -  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  val2  -  1;	  int    val2    =    getValue(val1)-    val2;    	non-compiled	[CE]  orphaned  case	250	None	replace
2376	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)%  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)%  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)%  1;	  int    val2    =    getValue(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	75	None	replace
2377	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)+  3;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)+  3;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)+  3;	  int    val2    =    getValue(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	75	None	replace
2378	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val2,  val1);	  	compilable	  [FE]  StackOverflowError  	81	1	add
2379	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  safeMultiply(val2,  val1);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val2,  val1);	  	compilable	  [FE]  StackOverflowError  	81	1	add
2380	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	45	None	replace
2381	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2)/(int)Math.floor(val1)+  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val2)/(int)Math.floor(val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val2)/(int)Math.floor(val1)+  1;	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2)+    1;    	non-compiled	[CE]  orphaned  case	261	None	replace
2382	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  return  0L;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  return  0L;  }	  for(long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	321	None	replace
2383	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)+  2;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)+  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)+  2;	  int    val2    =(int)Math.floor(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	104	None	replace
2384	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)+  1L;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)+  1L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)+  1L;	  int    val2    =(int)Math.floor(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	104	None	replace
2385	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)+  3;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2)+  3;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1,  val2)+  3;	  int    val2    =(int)Math.floor(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	104	None	replace
2386	[BUG]  [BUGGY]  int  val2  =(val1  >=  val2)?  getValue(val2,  val1):  0;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(val1  >=  val2)?  getValue(val2,  val1):  0;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(val1  >=  val2)?  getValue(val2,  val1):  0;	  int    val2    =    getValue(val2,    val1);    	non-compiled	[CE]  orphaned  case	77	None	replace
2387	[BUG]  [BUGGY]  int  val2  =(val1  >=  val2)?  getValue(val2,  val1):  0L;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(val1  >=  val2)?  getValue(val2,  val1):  0L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(val1  >=  val2)?  getValue(val2,  val1):  0L;	  int    val2    =    getValue(val2,    val1);    	non-compiled	[CE]  orphaned  case	77	None	replace
2388	[BUG]  [BUGGY]  switch(val1  /  val2  -  val1)  {  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1  /  val2  -  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1  /  val2  -  val1)  {	  switch(val1    /    val2)    {    	non-compiled	[CE]  possible  loss  of  precision	267	None	replace
2389	[BUG]  [BUGGY]  float  val2  =(float)Math.log(val2,  val1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.log(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.log(val2,  val1);	  float    val2    =(float)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	102	None	replace
2390	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  >=  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  >=  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  >=  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    >=    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	330	None	replace
2391	[BUG]  [BUGGY]  for(int  val2  =  0;  val1!=  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1!=  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1!=  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    >=    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	330	None	replace
2392	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  >=  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    >=    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	330	None	replace
2393	[BUG]  [BUGGY]  long  val2  =  0;  val1  +  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  +  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  +  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	46	None	replace
2394	[BUG]  [BUGGY]  ||(val1  <  val2)&&(val2  >  val1))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val1  <  val2)&&(val2  >  val1))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1  <  val2)&&(val2  >  val1))  {  return  val2;  }	  ||(val1    >=    val2)&&(val2    ==    val1))    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
2395	[BUG]  [BUGGY]  return  val2  *  val1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  return  val2  *  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	return  val2  *  val1;	  return    val2;    	non-compiled	[CE]  orphaned  case	300	None	replace
2396	[BUG]  [BUGGY]  return  val2  -  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  return  val2  -  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	return  val2  -  1;	  return    val2;    	non-compiled	[CE]  orphaned  case	300	None	replace
2397	[BUG]  [BUGGY]  return  val2  +  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  return  val2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	return  val2  +  1;	  return    val2;    	non-compiled	[CE]  orphaned  case	300	None	replace
2398	[BUG]  [BUGGY]  return  val2  -(val1  *  val2);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  return  val2  -(val1  *  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	return  val2  -(val1  *  val2);	  return    val2;    	non-compiled	[CE]  orphaned  case	300	None	replace
2399	[BUG]  [BUGGY]  return  val2  +  val1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  return  val2  +  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	return  val2  +  val1;	  return    val2;    	non-compiled	[CE]  orphaned  case	300	None	replace
2400	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1,  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1,    val2.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	329	None	replace
2401	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2,  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2,  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2,  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1,    val2.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	329	None	replace
2402	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1,  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val1,  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val1,  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1,    val2.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	329	None	replace
2403	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2,  val1  =  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2,  val1  =  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2,  val1  =  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1,    val2.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	329	None	replace
2404	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1,  val2  <  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val1,  val2  <  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val1,  val2  <  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1,    val2.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	329	None	replace
2405	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  safeMultiply(val2,  val3);  [CE]  cannot  find  symbol  val3  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  safeMultiply(val2,  val3);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    safeMultiply(val1,  val2);  safeMultiply(val2,  val3);	  	non-compiled	[CE]  cannot  find  symbol  val3	85	None	add
2406	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  safeMultiply(val3,  val1);  [CE]  cannot  find  symbol  val3  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  safeMultiply(val3,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    safeMultiply(val1,  val2);  safeMultiply(val3,  val1);	  	non-compiled	[CE]  cannot  find  symbol  val3	85	None	add
2407	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  SafeMultiply(val2,  val1);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  safeMultiply(val1,  val2);  SafeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    safeMultiply(val1,  val2);  SafeMultiply(val2,  val1);	  	non-compiled	[CE]  cannot  find  symbol	85	None	add
2408	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1).clear();  [CE]  orphaned  case  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1).clear();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1).clear();	  safeMultiply(val1,    val2,    val1).reset();    	non-compiled	[CE]  orphaned  case	258	None	replace
2409	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1).add(val1);  [CE]  orphaned  case  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1).add(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1).add(val1);	  safeMultiply(val1,    val2,    val1).reset();    	non-compiled	[CE]  orphaned  case	258	None	replace
2410	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	8	None	replace
2411	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
2412	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
2413	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
2414	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
2415	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
2416	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [CE]  <identifier>  expected  [FE]              ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  <identifier>  expected	59	None	add
2417	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]                ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	59	1	add
2418	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  [FE]  ArithmeticException  [FE]                ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	59	1	add
2419	[BUG]  [BUGGY]  for(int  val2  =  0;  val3  <  val1,  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val3  <  val1,  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val3  <  val1,  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val3    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	347	None	replace
2420	[BUG]  [BUGGY]  for(int  val1  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val3    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	347	None	replace
2421	[BUG]  [BUGGY]  for(int  val2  =  0;  val3  >=  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val3  >=  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val3  >=  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val3    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	347	None	replace
2422	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	254	None	add
2423	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ", ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ", ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ", ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	254	None	add
2424	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	254	None	add
2425	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [CE]  unclosed  string  literal  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  unclosed  string  literal	254	None	add
2426	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	254	None	add
2427	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ", ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]              ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ", ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ", ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	254	None	add
2428	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [CE]  [FE]                ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  	254	None	add
2429	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  return  -1;  }	  if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	358	None	replace
2430	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1!=  val2)  {  return  -1L;  }	  if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	358	None	replace
2431	[BUG]  [BUGGY]  safeMultiply(val1);  SafeMultiplication.safeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1);  SafeMultiplication.safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1);  SafeMultiplication.safeMultiply(val2,  val1);	          safeMultiply(val1,    val2);    SafeMultiplication.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	83	None	replace
2432	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	369	None	replace
2433	[BUG]  [BUGGY]  For(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  For(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	For(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	369	None	replace
2434	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	369	None	replace
2435	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	369	None	replace
2436	[BUG]  [BUGGY]  while(val2  >>  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val2  >>  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val2  >>  val1)  {  throw  new  ArithmeticException( " ");  }	  while(val2    >=    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	379	None	replace
2437	[BUG]  [BUGGY]  mutation(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  mutation(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	mutation(val1,  val2)  {  throw  new  ArithmeticException( " ");  }	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    	non-compiled	[CE]  	356	None	replace
2438	[BUG]  [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( " ".doubleValue());  }  [CE]  orphaned  case  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( " ".doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  throw  new  ArithmeticException( " ".doubleValue());  }	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    	non-compiled	[CE]  orphaned  case	356	None	replace
2439	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  2.0;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  2.0;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  2.0;	  int    val2    =(int)Math.floor(val1)/    VAL1;    	non-compiled	[CE]  orphaned  case	371	None	replace
2440	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1)/  VAL1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1)/  VAL1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1)/  VAL1;	  int    val2    =(int)Math.floor(val1)/    VAL1;    	non-compiled	[CE]  orphaned  case	371	None	replace
2441	[BUG]  [BUGGY]  int  val2  =  Math.min(val2,  val1)/  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(val2,  val1)/  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(val2,  val1)/  1;	  int    val2    =    Math.min(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	284	None	replace
2442	[BUG]  [BUGGY]  int  val2  =  Math.min(val2,  val1)/  2;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(val2,  val1)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(val2,  val1)/  2;	  int    val2    =    Math.min(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	284	None	replace
2443	[BUG]  [BUGGY]  int  val2  =  getValue(val2)/  getValue(val1)+  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)/  getValue(val1)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)/  getValue(val1)+  1;	  int    val2    =    getValue(val1)-    getValue(val2)+    1;    	non-compiled	[CE]  orphaned  case	138	None	replace
2444	[BUG]  [BUGGY]  int  val2  =  getValue(val1,  val2)-  getValue(val2)+  1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1,  val2)-  getValue(val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1,  val2)-  getValue(val2)+  1;	  int    val2    =    getValue(val1)-    getValue(val2)+    1;    	non-compiled	[CE]  orphaned  case	138	None	replace
2445	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	170	1	add
2446	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	170	1	add
2447	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	170	1	add
2448	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	170	1	add
2449	[BUG]  [BUGGY]  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ")  + "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [CE]  [FE]                StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ")  + "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  throw  new  ArithmeticException( " ")  + "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ")    +   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  	336	None	replace
2450	[BUG]  [BUGGY]  if(val1  <  val2)  {  throw  new  ArithmeticException( " ")  + "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [CE]  [FE]                  StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  throw  new  ArithmeticException( " ")  + "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  throw  new  ArithmeticException( " ")  + "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ")    +   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  	336	None	replace
2451	[BUG]  [BUGGY]  if(val2  >=  val1)  {  safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >=  val1)  {  safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1)  {  safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ")    +   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	336	None	replace
2452	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	48	None	replace
2453	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	48	None	replace
2454	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	48	None	replace
2455	[BUG]  [BUGGY]  for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	34	None	replace
2456	[BUG]  [BUGGY]  for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	34	None	replace
2457	[BUG]  [BUGGY]  int  val2  =  findValue(val1,  val2);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  findValue(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  findValue(val1,  val2);	  int    val2    =    getValue(val2,    val1);    	non-compiled	[CE]  orphaned  case	77	None	replace
2458	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1L;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  return  -1L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  return  -1L;  }	  if(val1    >=    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	358	None	replace
2459	[BUG]  [BUGGY]  if(val1  <  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	51	None	replace
2460	[BUG]  [BUGGY]  if(val1  >  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	51	None	replace
2461	[BUG]  [BUGGY]  for(int  val2  =  0;  val3  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val3  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val3  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val3    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	347	None	replace
2462	[BUG]  [BUGGY]  for(int  val2  =  0;  val3  <  val1.length;  val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val3  <  val1.length;  val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val3  <  val1.length;  val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val3    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	347	None	replace
2463	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	324	None	replace
2464	[BUG]  [BUGGY]  if(val2  ==  val1)  {  return  val2;  }  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  val1)  {  return  val2;  }	  if(val1    ==    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	108	None	replace
2465	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  >  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  >  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  >  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }	  tries[val1]    =    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	343	None	replace
2466	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  >  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  >  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  >  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }	  tries[val1]    =    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	343	None	replace
2467	[BUG]  [BUGGY]  if(val1  <  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                  ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }	  tries[val1]    =    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	343	None	replace
2468	[BUG]  [BUGGY]  if(val1  <  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }	  tries[val1]    =    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	343	None	replace
2469	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  >  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  return  val1;  }  [CE]  orphaned  case  [FE]                      ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  >  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  >  val2)  {  tries[val1]  =  safeMultiply(val2,  val1);  }  else  {  return  val1;  }	  tries[val1]    =    safeMultiply(val2,    val1);    	non-compiled	[CE]  orphaned  case	343	None	replace
2470	[BUG]  [BUGGY]  if(val1  >=  val2)  {  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	9	None	replace
2471	[BUG]  [BUGGY]  if(val1  ==  val2)  {  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	9	None	replace
2472	[BUG]  [BUGGY]  if(val1!=  val2)  {  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1!=  val2)  {  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1!=  val2)  {  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	9	None	replace
2473	[BUG]  [BUGGY]  if(val1  <  val2)  {  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	9	None	replace
2474	[BUG]  [BUGGY]  if(val2  >=  val1  ||  val2  >=  val2)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >=  val1  ||  val2  >=  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1  ||  val2  >=  val2)  {	  if(val1    >=    val2    ||    val1    >=    val2)    {    	non-compiled	[CE]  orphaned  case	193	None	replace
2475	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	320	None	replace
2476	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1).returnValue();  [CE]  orphaned  case  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1).returnValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1).returnValue();	  safeMultiply(val1,    val2,    val2);    	non-compiled	[CE]  orphaned  case	166	None	replace
2477	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  [Delete]  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	[Delete]	          if(val1    ==    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
2478	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  if(val1  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [CE]  orphaned  case  [FE]              StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  if(val1  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  if(val1  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1.doubleValue());    }    	non-compiled	[CE]  orphaned  case	335	None	replace
2479	[BUG]  [BUGGY]  if(val1  >=  0L)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  0L)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  0L)  {	  if(val1    ==    0L)    {    	non-compiled	[CE]  orphaned  case	159	None	replace
2480	[BUG]  [BUGGY]  if(val1  <  0L)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  0L)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  0L)  {	  if(val1    ==    0L)    {    	non-compiled	[CE]  orphaned  case	159	None	replace
2481	[BUG]  [BUGGY]  if(val1  >  0L)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  0L)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  0L)  {	  if(val1    ==    0L)    {    	non-compiled	[CE]  orphaned  case	159	None	replace
2482	[BUG]  [BUGGY]  short  val2  =(short)Math.floor(val2,  val1);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val2  =(short)Math.floor(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val2  =(short)Math.floor(val2,  val1);	  int    val2    =(int)Math.floor(val2,    val1);    	non-compiled	[CE]  orphaned  case	105	None	replace
2483	[BUG]  [BUGGY]  long  val2  =  val1.doubleValue()  /  val2.doubleValue();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.doubleValue()  /  val2.doubleValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.doubleValue()  /  val2.doubleValue();	  long    val2    =    val1.doubleValue();    	non-compiled	[CE]  orphaned  case	149	None	replace
2484	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2,  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2,  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2,  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val1,    val2.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	353	None	replace
2485	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1,  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1,  val2.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1,  val2.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val1,    val2.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	353	None	replace
2486	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  getValue(val2)-  2;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)/  getValue(val2)-  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  getValue(val2)-  2;	  int    val2    =    getValue(val1)/    getValue(val2);    	non-compiled	[CE]  orphaned  case	134	None	replace
2487	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
2488	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
2489	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
2490	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
2491	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
2492	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
2493	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
2494	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
2495	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
2496	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
2497	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
2498	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    >=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	238	1	add
2499	[BUG]  [BUGGY]  switch(val1,  val1).restrictByNotNullOrUndefined();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val1).restrictByNotNullOrUndefined();  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val1).restrictByNotNullOrUndefined();	  switch(val1,    val2).restrictByNotNullOrUndefined();    	non-compiled	[CE]  ')'  expected	374	None	replace
2500	[BUG]  [BUGGY]  for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	128	None	replace
2501	[BUG]  [BUGGY]  for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	128	None	replace
2502	[BUG]  [BUGGY]  switch(val2,  val1  -  val2)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val2,  val1  -  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val2,  val1  -  val2)  {	  switch(val1    -    val2)    {    	non-compiled	[CE]  ')'  expected	266	None	replace
2503	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	184	None	replace
2504	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  ';'  expected  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1,  val2.length;  val++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  ';'  expected	184	None	replace
2505	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  orphaned  case  [FE]                                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1;  val++)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1;  val++)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  orphaned  case	184	None	replace
2506	[BUG]  [BUGGY]  while(val1  <  val2  ||  val1  >  val1)  {  [CE]  orphaned  case  [FE]        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2  ||  val1  >  val1)  {  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2  ||  val1  >  val1)  {	  while(val1    <    val2)    {    	non-compiled	[CE]  orphaned  case	72	None	replace
2507	[BUG]  [BUGGY]  safeMultiply(val2,  val1)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val1)  {	  SafeMultiply(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	142	None	replace
2508	[BUG]  [BUGGY]  for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	346	None	replace
2509	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val2)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val2)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2,  val2)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	346	None	replace
2510	[BUG]  [BUGGY]  int  val2  =  getMeanValue(val2);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getMeanValue(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getMeanValue(val2);	  int    val2    =    getValue(val2);    	non-compiled	[CE]  orphaned  case	188	None	replace
2511	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val1,  val2)-  3;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.floor(val1,  val2)-  3;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val1,  val2)-  3;	  int    val2    =(int)Math.floor(val1,    val2)-    3;    	non-compiled	[CE]  orphaned  case	285	None	replace
2512	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1,  val2)-  3;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1,  val2)-  3;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1,  val2)-  3;	  int    val2    =(int)Math.floor(val1,    val2)-    3;    	non-compiled	[CE]  orphaned  case	285	None	replace
2513	[BUG]  [BUGGY]  int  val2  =  Math.min(1L,  val1);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(1L,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(1L,  val1);	  int    val2    =    Math.min(0,    val1);    	non-compiled	[CE]  orphaned  case	42	None	replace
2514	[BUG]  [BUGGY]  float  val2  =  Math.min(0,  val1);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  Math.min(0,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  Math.min(0,  val1);	  int    val2    =    Math.min(0,    val1);    	non-compiled	[CE]  orphaned  case	42	None	replace
2515	[BUG]  [BUGGY]  int  val2  =  safeValue(val1,  val2)-  getValue(val2);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  safeValue(val1,  val2)-  getValue(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  safeValue(val1,  val2)-  getValue(val2);	  int    val2    =    getValue(val1,    val2)-    getValue(val2);    	non-compiled	[CE]  orphaned  case	136	None	replace
2516	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	386	None	replace
2517	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	386	None	replace
2518	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val1)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	386	None	replace
2519	[BUG]  [BUGGY]  SafeRange(val1,  val2);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRange(val1,  val2);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRange(val1,  val2);	  Switch(val1,    val1)    {    	non-compiled	[CE]  orphaned  case	364	None	replace
2520	[BUG]  [BUGGY]  enableMultiply(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  enableMultiply(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	enableMultiply(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	  allowMultiply(val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	294	None	replace
2521	[BUG]  [BUGGY]  enableMultiply(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2);  }  [CE]  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  enableMultiply(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	enableMultiply(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2);  }	  allowMultiply(val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	294	None	replace
2522	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	355	1	add
2523	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	355	1	add
2524	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	355	1	add
2525	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( ".   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	355	1	add
2526	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	355	1	add
2527	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( ".   ");  }  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	355	1	add
2528	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	355	1	add
2529	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( ".   ");  }  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	355	1	add
2530	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	355	1	add
2531	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [FE]  ArithmeticException  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	355	1	add
2532	[BUG]  [BUGGY]  int  val2  =  safeMultiply(val1,  val2)+  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  safeMultiply(val1,  val2)+  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  safeMultiply(val1,  val2)+  1;	  int    val2    =    getValue(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	75	None	replace
2533	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
2534	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
2535	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  if(val2!=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  if(val2!=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
2536	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  if(val2!=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  if(val2!=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1!=  val2)  {  return  0L;  }  if(val2!=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
2537	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
2538	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1!=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1!=    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2!=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	241	1	add
2539	[BUG]  [BUGGY]  For(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  For(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	For(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	322	None	replace
2540	[BUG]  [BUGGY]  if(val1  >=  val2)  {  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	317	None	replace
2541	[BUG]  [BUGGY]  if(val1  <  val2)  {  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	317	None	replace
2542	[BUG]  [BUGGY]  byte  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  byte  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	byte  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	317	None	replace
2543	[BUG]  [BUGGY]  if(val2  ==  val1  ||  val2  ==  val2)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  val1  ||  val2  ==  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  val1  ||  val2  ==  val2)  {	  if(val1    ==    val2    ||    val1    ==    val2)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
2544	[BUG]  [BUGGY]  if(val1  <  val2)  {  safeMultiply(val2,  val1);  }  else  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  safeMultiply(val2,  val1);  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  safeMultiply(val2,  val1);  }  else  {  safeMultiply(val1,  val2);  }	          safeMultiply(val1,    val2);    safeMultiply(val1,    val1);    	non-compiled	[CE]  orphaned  case	92	None	replace
2545	[BUG]  [BUGGY]  if(val1  <  =  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  =  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  =  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }	          safeMultiply(val1,    val2);    safeMultiply(val1,    val1);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
2546	[BUG]  [BUGGY]  if(val2  >=  val1)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >=  val1)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val1,  val2);  }	          safeMultiply(val1,    val2);    safeMultiply(val1,    val1);    	non-compiled	[CE]  orphaned  case	92	None	replace
2547	[BUG]  [BUGGY]  boolean  val2  =  Math.min(value1,  val2);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  Math.min(value1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  Math.min(value1,  val2);	  int    val2    =    Math.min(value1,    val2);    	non-compiled	[CE]  orphaned  case	40	None	replace
2548	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)/  2.0;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1)/  2.0;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)/  2.0;	  float    val2    =(float)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	312	None	replace
2549	[BUG]  [BUGGY]  if(val1  <  val2)  {  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	47	None	replace
2550	[BUG]  [BUGGY]  if(val1  >=  val2)  {  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	47	None	replace
2551	[BUG]  [BUGGY]  if(val1  ==  val2)  {  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  long  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	47	None	replace
2552	[BUG]  [BUGGY]  long  val2  =  0;  val1  +=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val1  +=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val1  +=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
2553	[BUG]  [BUGGY]  While(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  While(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	While(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }	  While(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	325	None	replace
2554	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2555	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2556	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2557	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1!=  val2)  {  return  val1;  }  if(val1!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2558	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2559	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	205	1	add
2560	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1!=  val2)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1!=    val2)    {    return    val2;    }    if(val1  >>  val2)  {  return  val2;  }  if(val1!=  val1)  {  return  val1;  }  if(val2!=  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	205	None	add
2561	[BUG]  [BUGGY]  long  val2  =  val1  /  val2;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  /  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  /  val2;	  long    val2    =    val1    +    val2;    	non-compiled	[CE]  orphaned  case	120	None	replace
2562	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  >  val2)  {  return  0;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  >  val2)  {  return  0;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  >  val2)  {  return  0;  }	  if(val1    <    val2)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	226	None	replace
2563	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  >  val2)  {  return  0L;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  >  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  >  val2)  {  return  0L;  }	  if(val1    <    val2)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	226	None	replace
2564	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1,  val2.length;  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	130	None	replace
2565	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2,  val1++)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2,  val1++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2,  val1++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val2.length;    val2++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	130	None	replace
2566	[BUG]  [BUGGY]  long  val2  =  tryFallThrough(val1,  val2);  [CE]  orphaned  case  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  tryFallThrough(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  tryFallThrough(val1,  val2);	  tryFallThrough(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	341	None	replace
2567	[BUG]  [BUGGY]  while(val0  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val0  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val0  <  val2)  {  throw  new  ArithmeticException( " ");  }	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	15	None	replace
2568	[BUG]  [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *  val2 ");  }  [CE]  orphaned  case  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *  val2 ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *  val2 ");  }	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	15	None	replace
2569	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	36	None	replace
2570	[BUG]  [BUGGY]  short  val2  =(short)Math.floor(val1,  val2)-(short)Math.floor(val2);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val2  =(short)Math.floor(val1,  val2)-(short)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val2  =(short)Math.floor(val1,  val2)-(short)Math.floor(val2);	  int    val2    =(int)Math.floor(val1,    val2)-(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	235	None	replace
2571	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	10	None	replace
2572	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  <  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	24	None	replace
2573	[BUG]  [BUGGY]  for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	31	None	replace
2574	[BUG]  [BUGGY]  for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val3  <  val2.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	31	None	replace
2575	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	31	None	replace
2576	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2,  val1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
2577	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2,  val2  +  1;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2,  val2  +  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2,  val2  +  1;	  int    val2    =(int)Math.floor(val1)/    val2    +    1;    	non-compiled	[CE]  ';'  expected	62	None	replace
2578	[BUG]  [BUGGY]  short  val2  =(short)Math.floor(val1)/(short)Math.floor(val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val2  =(short)Math.floor(val1)/(short)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val2  =(short)Math.floor(val1)/(short)Math.floor(val2);	  int    val2    =(int)Math.floor(val1)/(int)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	231	None	replace
2579	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	361	None	replace
2580	[BUG]  [BUGGY]  for(int  val1  =  0;  val3  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val3  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val3  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val1)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	361	None	replace
2581	[BUG]  [BUGGY]  if(val1  >  0)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  0)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  0)  {	  if(val1    ==    0)    {    	non-compiled	[CE]  orphaned  case	157	None	replace
2582	[BUG]  [BUGGY]  if(val1  >>  val2)  {  return  0L;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >>  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >>  val2)  {  return  0L;  }	          if(val1    >=    val2)    {    return    0L;    }    if(val1    >>    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	240	None	replace
2583	[BUG]  [BUGGY]  if(val2  >  val1)  {  return  0L;  }  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >  val1)  {  return  0L;  }	  if(val1    >    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	277	None	replace
2584	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * ");  [CE]  orphaned  case  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * ");  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * ");	  throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  orphaned  case	17	None	replace
2585	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  [CE]  orphaned  case  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());	  throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  orphaned  case	17	None	replace
2586	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
2587	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
2588	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
2589	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
2590	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
2591	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	211	1	add
2592	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val2  >=  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val2  >=  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val2  >=  	  	non-compiled	[CE]  illegal  start  of  expression	211	None	add
2593	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(	  	non-compiled	[CE]  illegal  start  of  expression	211	None	add
2594	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val2  >=  val1)  {  return	  	non-compiled	[CE]  illegal  start  of  expression	211	None	add
2595	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  	  	non-compiled	[CE]  illegal  start  of  expression	211	None	add
2596	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val2  >=  val1)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val2    >=    val1)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  	  	non-compiled	[CE]  illegal  start  of  expression	211	None	add
2597	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2  >  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	275	None	replace
2598	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >  2)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  >  2)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  >  2)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	275	None	replace
2599	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2,  val0;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2,  val0;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2,  val0;	  int    val2    =(int)Math.floor(val1)/    val2,    val1;    	non-compiled	[CE]  orphaned  case	68	None	replace
2600	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	385	None	replace
2601	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	385	None	replace
2602	[BUG]  [BUGGY]  float  val2  =(float)Math.pow(10,  val1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.pow(10,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.pow(10,  val1);	  float    val2    =(float)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	221	None	replace
2603	[BUG]  [BUGGY]  SafeMutator.safeToInt(val1,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMutator.safeToInt(val1,  val2);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeToInt(val1,  val2);	  SafeMutator.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	143	None	replace
2604	[BUG]  [BUGGY]  safeSafeMultiply(val1,  val2);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeSafeMultiply(val1,  val2);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeSafeMultiply(val1,  val2);	  SafeMutator.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	143	None	replace
2605	[BUG]  [BUGGY]  val2  =  Math.max(val1,  val2);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  val2  =  Math.max(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	val2  =  Math.max(val1,  val2);	  val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	44	None	replace
2606	[BUG]  [BUGGY]  val2  =  Math.max(0,  val1);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  val2  =  Math.max(0,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	val2  =  Math.max(0,  val1);	  val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	44	None	replace
2607	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  false,  null);  [CE]  orphaned  case  [FE]                StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  false,  null);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  false,  null);	  safeMultiply(val1,    val2,    false);    	non-compiled	[CE]  orphaned  case	168	None	replace
2608	[BUG]  [BUGGY]  if(val1  <  val2)  {  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	304	None	replace
2609	[BUG]  [BUGGY]  if(val1  >  val2)  {  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2)  {  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  int  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	304	None	replace
2610	[BUG]  [BUGGY]  byte  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  byte  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	byte  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	304	None	replace
2611	[BUG]  [BUGGY]  SafeRaw(val1,  val2)  ==  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRaw(val1,  val2)  ==  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRaw(val1,  val2)  ==	  SafeRaw(val1,    val2)    {    	non-compiled	[CE]  illegal  start  of  expression	314	None	replace
2612	[BUG]  [BUGGY]  if(val1  >=  val2)  {  int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	269	None	replace
2613	[BUG]  [BUGGY]  if(val1  <  val2)  {  int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  int  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	269	None	replace
2614	[BUG]  [BUGGY]  byte  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  byte  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	byte  val1  =  0;  val2  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	269	None	replace
2615	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	53	1	add
2616	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	53	1	add
2617	[BUG]  [BUGGY]  SafeMutils.safeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]        StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMutils.safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutils.safeMultiply(val2,  val1);	          safeMultiply(val1,    val2);    SafeMutils.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	288	None	replace
2618	[BUG]  [BUGGY]  long  val2  =  0;  val  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  0;  val  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  0;  val  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	368	None	replace
2619	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	368	None	replace
2620	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2  +=  val1)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2  +=  val1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  >=  val2.length;  val2  +=  val1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    val1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	274	None	replace
2621	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  <  val2)  {  return  0L;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  <  val2)  {  return  0L;  }	  if(val1    <    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	393	None	replace
2622	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	175	1	add
2623	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	175	1	add
2624	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	175	1	add
2625	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	175	1	add
2626	[BUG]  [BUGGY]  float  val2  =  Math.min(val2,  val1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  Math.min(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  Math.min(val2,  val1);	  int    val2    =    Math.min(val2,    val1);    	non-compiled	[CE]  orphaned  case	37	None	replace
2627	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ", ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ", ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	254	1	add
2628	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ", ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( ",   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ", ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ", ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	254	1	add
2629	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ",   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( ",   ");  }  [CE]  unclosed  string  literal  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ",   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ",   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( ",   ");  }	  	non-compiled	[CE]  unclosed  string  literal	254	None	add
2630	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	254	1	add
2631	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	254	1	add
2632	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  [CE]  unclosed  string  literal  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ",     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ",   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ",   ");  }	  	non-compiled	[CE]  unclosed  string  literal	254	None	add
2633	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
2634	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
2635	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
2636	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
2637	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
2638	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    <    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	262	1	add
2639	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val2    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	177	None	replace
2640	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2641	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2642	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2643	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2644	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2645	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2646	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2647	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2648	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val2  ==  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val2  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2649	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val2  ==  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val2  ==  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val2  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2650	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2651	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val2  ==  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2652	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2653	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2654	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2655	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2656	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2657	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2658	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  ==  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2659	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  ==  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  ==  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val1    ==    val2)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val1  ==  val2)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  ==  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	243	1	add
2660	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	30	None	replace
2661	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	30	None	replace
2662	[BUG]  [BUGGY]  if(val2  >  val1)  {  return  val1;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >  val1)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >  val1)  {  return  val1;  }	  if(val1    >    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	298	None	replace
2663	[BUG]  [BUGGY]  if(val2  >  val1)  {  return  val2;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >  val1)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >  val1)  {  return  val2;  }	  if(val1    >    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	298	None	replace
2664	[BUG]  [BUGGY]  long  val2  =  val1  *  val2,  val1.doubleValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1  *  val2,  val1.doubleValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1  *  val2,  val1.doubleValue();	  long    val2    =    val1    *    val2,    val2);    	non-compiled	[CE]  ';'  expected	391	None	replace
2665	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2  +  1)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2  +  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2  +  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	98	None	replace
2666	[BUG]  [BUGGY]  For(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  For(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	For(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	271	None	replace
2667	[BUG]  [BUGGY]  parent  =  parent.getParent();  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  parent  =  parent.getParent();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	parent  =  parent.getParent();	          if(val1    >=    val2)    {    return    val2;    }    if(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	203	None	replace
2668	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  /  val1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  val2  /  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  val2  /  val1;	  int    val2    =(int)Math.floor(val1)/    val2    *    val1;    	non-compiled	[CE]  orphaned  case	310	None	replace
2669	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1).doubleValue();  [CE]  orphaned  case  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1).doubleValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1).doubleValue();	  safeMultiply(val1,    val2,    val1).reset();    	non-compiled	[CE]  orphaned  case	258	None	replace
2670	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1).setValue(val1).reset();  [CE]  orphaned  case  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1).setValue(val1).reset();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1).setValue(val1).reset();	  safeMultiply(val1,    val2,    val1).reset();    	non-compiled	[CE]  orphaned  case	258	None	replace
2671	[BUG]  [BUGGY]  SafeMultiply(val1,  val2,  val1).reset();  [CE]  orphaned  case  [FE]              StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiply(val1,  val2,  val1).reset();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiply(val1,  val2,  val1).reset();	  safeMultiply(val1,    val2,    val1).reset();    	non-compiled	[CE]  orphaned  case	258	None	replace
2672	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val1).accept(val1);  [CE]  orphaned  case  [FE]                StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2,  val1).accept(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2,  val1).accept(val1);	  safeMultiply(val1,    val2,    val1).reset();    	non-compiled	[CE]  orphaned  case	258	None	replace
2673	[BUG]  [BUGGY]  safeMultiply(val2,  val1);  secureMultiply(val2,  val1);  [CE]  orphaned  case  [FE]                StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2,  val1);  secureMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val1);  secureMultiply(val2,  val1);	          safeMultiply(val1,    val2);    secureMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	87	None	replace
2674	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	6	None	replace
2675	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val2++)  {  if(val2  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val2++)  {  if(val2  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  val2++)  {  if(val2  <  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	367	None	replace
2676	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  val2;  }  else  if(val1  <  val2)  {  return  val1;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2)  {  return  val2;  }  else  if(val1  <  val2)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  return  val2;  }  else  if(val1  <  val2)  {  return  val1;  }	          if(val1    >=    val2)    {    return    val2;    }    If(val1    >=    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	213	None	replace
2677	[BUG]  [BUGGY]  tries.put(val1,  new  Integer(val2));  [CE]  orphaned  case  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tries.put(val1,  new  Integer(val2));  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tries.put(val1,  new  Integer(val2));	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	174	None	replace
2678	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	382	None	replace
2679	[BUG]  [BUGGY]  Class  <?>  val1  =  val2.getRawClass();  [CE]  orphaned  case  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Class  <?>  val1  =  val2.getRawClass();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Class  <?>  val1  =  val2.getRawClass();	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    >>    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	172	None	replace
2680	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  val++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	381	None	replace
2681	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2;  val++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2;  val++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2;  val++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	381	None	replace
2682	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1,  val2)/  val2;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1,  val2)/  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1,  val2)/  val2;	  int    val2    =(int)Math.floor(val1,    val2)/    val2;    	non-compiled	[CE]  orphaned  case	63	None	replace
2683	[BUG]  [BUGGY]  char  val2  =(char)Math.floor(val1,  val2)/  val2;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.floor(val1,  val2)/  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.floor(val1,  val2)/  val2;	  int    val2    =(int)Math.floor(val1,    val2)/    val2;    	non-compiled	[CE]  orphaned  case	63	None	replace
2684	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2685	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2686	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2687	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val2;  }  if(val1  ==  val2)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2688	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2689	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2690	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val1)  {  return  val1;  }  if(val1  ==  val2)  {  return  val2;  }  if(val1  ==  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	207	None	add
2691	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2692	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  ==  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    ==    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  ==  val1)  {  return  val1;  }	  	compilable	  [FE]  AssertionFailedError  	207	1	add
2693	[BUG]  [BUGGY]  for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	327	None	replace
2694	[BUG]  [BUGGY]  for(int  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	327	None	replace
2695	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val1)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val1)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2,  val1)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	327	None	replace
2696	[BUG]  [BUGGY]  long  val2  =  val1,  val2  *  val2  +(int)Math.pow(10,  val2);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2  *  val2  +(int)Math.pow(10,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2  *  val2  +(int)Math.pow(10,  val2);	  long    val2    =    val1    *    val2    +(int)Math.pow(10,    val2);    	non-compiled	[CE]  ';'  expected	305	None	replace
2697	[BUG]  [BUGGY]  long  val2  =  val1,  val2  +(int)Math.pow(10,  val2);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2  +(int)Math.pow(10,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2  +(int)Math.pow(10,  val2);	  long    val2    =    val1    *    val2    +(int)Math.pow(10,    val2);    	non-compiled	[CE]  ';'  expected	305	None	replace
2698	[BUG]  [BUGGY]  float  val2  =  val1  *  val2;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  val1  *  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  val1  *  val2;	  int    val2    =    val1    *    val2;    	non-compiled	[CE]  orphaned  case	114	None	replace
2699	[BUG]  [BUGGY]  if(val2  >=  val1  ||  val2  >  val1)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >=  val1  ||  val2  >  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1  ||  val2  >  val1)  {	  if(val1    >=    val2    ||    val1    >    val2)    {    	non-compiled	[CE]  orphaned  case	363	None	replace
2700	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  val++)  {  safeMultiply(val2,  val1).reset();  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1).reset();    }    	non-compiled	[CE]  orphaned  case	292	None	replace
2701	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val2,  val1).reset();  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val2,  val1).reset();  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1).reset();    }    	non-compiled	[CE]  orphaned  case	292	None	replace
2702	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2).reset();  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2).reset();  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val2).reset();  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1).reset();    }    	non-compiled	[CE]  orphaned  case	292	None	replace
2703	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2;  val++)  {  safeMultiply(val2,  val1).reset();  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2;  val++)  {  safeMultiply(val2,  val1).reset();  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2;  val++)  {  safeMultiply(val2,  val1).reset();  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1).reset();    }    	non-compiled	[CE]  orphaned  case	292	None	replace
2704	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val1).reset();  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val1).reset();  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  val++)  {  safeMultiply(val1,  val1).reset();  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1).reset();    }    	non-compiled	[CE]  orphaned  case	292	None	replace
2705	[BUG]  [BUGGY]  char  val2  =(char)Math.log(val1)-(char)Math.floor(val2);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  char  val2  =(char)Math.log(val1)-(char)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	char  val2  =(char)Math.log(val1)-(char)Math.floor(val2);	  char    val2    =(char)Math.floor(val1)-(char)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	348	None	replace
2706	[BUG]  [BUGGY]  final  char  val2  =(char)Math.floor(val1)-(char)Math.floor(val2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  final  char  val2  =(char)Math.floor(val1)-(char)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	final  char  val2  =(char)Math.floor(val1)-(char)Math.floor(val2);	  char    val2    =(char)Math.floor(val1)-(char)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	348	None	replace
2707	[BUG]  [BUGGY]  if(val2  <  val1)  {  return  val1;  }  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  <  val1)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  <  val1)  {  return  val1;  }	  if(val1    <    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	297	None	replace
2708	[BUG]  [BUGGY]  if(val1  <  val2  ||  val1  >  val2)  {  return  val2;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2  ||  val1  >  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2  ||  val1  >  val2)  {  return  val2;  }	  if(val1    <    val2)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	297	None	replace
2709	[BUG]  [BUGGY]  if(val1  <  val2)return  val2;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)return  val2;  }	  if(val1    <    val2)    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  type	297	None	replace
2710	[BUG]  [BUGGY]  float  val2  =(float)Math.floor(val1)/  val1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =(float)Math.floor(val1)/  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =(float)Math.floor(val1)/  val1;	  int    val2    =(int)Math.floor(val2)/    val1;    	non-compiled	[CE]  orphaned  case	64	None	replace
2711	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)/  val1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1)/  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)/  val1;	  int    val2    =(int)Math.floor(val2)/    val1;    	non-compiled	[CE]  orphaned  case	64	None	replace
2712	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val2,  val1);  safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val1,    val1);    safeMultiply(val2,  val1);  safeMultiply(val2,  val1);	  	compilable	  [FE]  StackOverflowError  	91	1	add
2713	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val2,  val1);  safeMultiply(val2,  val1);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val1);  safeMultiply(val2,  val1);  safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val1);    safeMultiply(val2,  val1);  safeMultiply(val2,  val1);	  	compilable	  [FE]  StackOverflowError  	91	1	add
2714	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2  >  0)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    >    0)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	276	None	replace
2715	[BUG]  [BUGGY]  boolean  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	13	None	replace
2716	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  <  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	270	None	replace
2717	[BUG]  [BUGGY]  if(val1  ==  val2)  {  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	46	None	replace
2718	[BUG]  [BUGGY]  if(val1  >=  val2)  {  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  val2  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	46	None	replace
2719	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2;  val++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2;  val++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2;  val++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	183	None	replace
2720	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2;  val++)  {  safeMultiply(val1,  val1);  }  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2;  val++)  {  safeMultiply(val1,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2;  val++)  {  safeMultiply(val1,  val1);  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	183	None	replace
2721	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2722	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2723	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2724	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2725	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  	  	non-compiled	[CE]  illegal  start  of  expression	247	None	add
2726	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2727	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2728	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  <  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  <  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  <  	  	non-compiled	[CE]  illegal  start  of  expression	247	None	add
2729	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2730	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2731	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0	  	non-compiled	[CE]  ';'  expected	247	None	add
2732	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2733	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    0L;    }    if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        0L;        }        if(val2    >=    val1)    {    return    0L;    }    if(val1  >=  val2)  {  return  0L;  }  if(val2  >=  val1)  {  return  0L;  }  if(val1  >=  val2)  {  return  0L;  }  if(val2  <  val1)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	247	1	add
2734	[BUG]  [BUGGY]  switch(val1,  val2).restrictByNotNullOrUndefined().safeMultiply(val2);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictByNotNullOrUndefined().safeMultiply(val2);  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictByNotNullOrUndefined().safeMultiply(val2);	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ')'  expected	375	None	replace
2735	[BUG]  [BUGGY]  for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	303	None	replace
2736	[BUG]  [BUGGY]  Switch(val1,  val2,  false,  false)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  false,  false)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  false,  false)  {	  Switch(val1,    val2,    false)    {    	non-compiled	[CE]  ';'  expected	144	None	replace
2737	[BUG]  [BUGGY]  Switch(val1,  val2,  false,  null)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  false,  null)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  false,  null)  {	  Switch(val1,    val2,    false)    {    	non-compiled	[CE]  ';'  expected	144	None	replace
2738	[BUG]  [BUGGY]  Switch(val1,  val2,  false),  true)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  false),  true)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  false),  true)  {	  Switch(val1,    val2,    false)    {    	non-compiled	[CE]  ';'  expected	144	None	replace
2739	[BUG]  [BUGGY]  Switch(val0,  val1)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val0,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val0,  val1)  {	  Switch(val0)    {    	non-compiled	[CE]  ';'  expected	351	None	replace
2740	[BUG]  [BUGGY]  Switch(val0,  val2)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val0,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val0,  val2)  {	  Switch(val0)    {    	non-compiled	[CE]  ';'  expected	351	None	replace
2741	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1)/  val2L;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1)/  val2L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1)/  val2L;	  int    val2    =(int)Math.floor(val1)/    val2L;    	non-compiled	[CE]  orphaned  case	65	None	replace
2742	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1)/  2L;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.floor(val1)/  2L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.floor(val1)/  2L;	  int    val2    =(int)Math.floor(val1)/    val2L;    	non-compiled	[CE]  orphaned  case	65	None	replace
2743	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  *=  1)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2  *=  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2  *=  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	131	None	replace
2744	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2  +=  1)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  >=  val2.length;  val2  +=  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  >=  val2.length;  val2  +=  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2    +=    1)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	131	None	replace
2745	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1)-(double)Math.log(val2);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1)-(double)Math.log(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1)-(double)Math.log(val2);	  double    val2    =(double)Math.floor(val1)-(double)Math.floor(val2);    	non-compiled	[CE]  orphaned  case	236	None	replace
2746	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  val1;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  return  val1;  }	          if(val1    >=    val2)    {    return    val2;    }    if(val2    >=    val1)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	212	None	replace
2747	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  val1;  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  return  val1;  }	          if(val1    >=    val2)    {    return    val2;    }    if(val2    >=    val1)    {    return    val2;    }    	non-compiled	[CE]  orphaned  case	212	None	replace
2748	[BUG]  [BUGGY]  long  val2  =  val2,  val1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val2,  val1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val2,  val1;	  long    val2    =    val1,    val2;    	non-compiled	[CE]  orphaned  case	116	None	replace
2749	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val3    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	370	None	replace
2750	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val1  <  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val3    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	370	None	replace
2751	[BUG]  [BUGGY]  long  val2  =  val1,  val2.length();  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2.length();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2.length();	  long    val2    =    val1.length();    	non-compiled	[CE]  ';'  expected	154	None	replace
2752	[BUG]  [BUGGY]  long  val2  =  val1,  val2  *  val2  +(int)Math.floor(val2);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2  *  val2  +(int)Math.floor(val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2  *  val2  +(int)Math.floor(val2);	  long    val2    =    val1    *    val2    +(int)Math.floor(val2);    	non-compiled	[CE]  ';'  expected	307	None	replace
2753	[BUG]  [BUGGY]  while(val1  <  val2)  {  return  0;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  return  0;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  return  0;	  while(val1    <    val2)    {    return    val2;    	non-compiled	[CE]  orphaned  case	299	None	replace
2754	[BUG]  [BUGGY]  for(int  val2  =  0;  val!=  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val!=  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val!=  val1.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val!=    val1.length;    val++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	290	None	replace
2755	[BUG]  [BUGGY]  safeMultiply(val2,  val1)+  ';'  [CE]  not  a  statement  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val2,  val1)+  ';'  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val2,  val1)+  ';'	  safeMultiply(val1,    val2)    	non-compiled	[CE]  not  a  statement	296	None	replace
2756	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  {  return  0L;  [CE]  ';'  expected  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)  {  return  0L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)  {  return  0L;	  safeMultiply(val1,    val2)    	non-compiled	[CE]  ';'  expected	296	None	replace
2757	[BUG]  [BUGGY]  for(int  val1,  val2  <  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1,  val2  <  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1,  val2  <  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1,    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	316	None	replace
2758	[BUG]  [BUGGY]  for(int  val1,  val2  {  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1,  val2  {  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1,  val2  {  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1,    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	316	None	replace
2759	[BUG]  [BUGGY]  for(int  val1,  val2!=  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1,  val2!=  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1,  val2!=  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1,    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	316	None	replace
2760	[BUG]  [BUGGY]  if(val2  >=  val1)  {  safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >=  val1)  {  safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1)  {  safeMultiply(val1,  val2);  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	332	None	replace
2761	[BUG]  [BUGGY]  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	332	None	replace
2762	[BUG]  [BUGGY]  if(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	          safeMultiply(val1,    val2);    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	332	None	replace
2763	[BUG]  [BUGGY]  double  val2  =(double)Math.floor(val1)/  val2  *  val2;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  double  val2  =(double)Math.floor(val1)/  val2  *  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	double  val2  =(double)Math.floor(val1)/  val2  *  val2;	  int    val2    =(int)Math.floor(val1)/    val2    *    val2;    	non-compiled	[CE]  orphaned  case	311	None	replace
2764	[BUG]  [BUGGY]  short  val2  =(short)Math.floor(val2)-(short)Math.floor(val1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val2  =(short)Math.floor(val2)-(short)Math.floor(val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val2  =(short)Math.floor(val2)-(short)Math.floor(val1);	  int    val2    =(int)Math.floor(val2)-(int)Math.floor(val1);    	non-compiled	[CE]  orphaned  case	234	None	replace
2765	[BUG]  [BUGGY]  switch(val1,  val2).restrictByNotNullOrUndefined()).restrictByNotNullOrUndefined())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictByNotNullOrUndefined()).restrictByNotNullOrUndefined())  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictByNotNullOrUndefined()).restrictByNotNullOrUndefined())  {	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  ')'  expected	376	None	replace
2766	[BUG]  [BUGGY]  switch(val1,  val2).restrictByNotNullOrUndefined())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2).restrictByNotNullOrUndefined())  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2).restrictByNotNullOrUndefined())  {	  switch(val1,    val2).restrictByNotNullOrUndefined().restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  ')'  expected	376	None	replace
2767	[BUG]  [BUGGY]  SafeMutator.safeAdd(val1,  val2)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMutator.safeAdd(val1,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeAdd(val1,  val2)  {	  SafeMutator.safeMultiply(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	147	None	replace
2768	[BUG]  [BUGGY]  SafeMutator.safeToInt(val1,  val2)  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMutator.safeToInt(val1,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMutator.safeToInt(val1,  val2)  {	  SafeMutator.safeMultiply(val1,    val2)    {    	non-compiled	[CE]  ';'  expected	147	None	replace
2769	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val1,    val2);    if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	81	1	add
2770	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val2);    if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	81	1	add
2771	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val1,    val2);    if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	81	1	add
2772	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val2);    if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	81	1	add
2773	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  }  else  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val1,    val2);    if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  }  else  {  return  0L;  }	  	compilable	  [FE]  StackOverflowError  	81	1	add
2774	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  }  else  {  return  0L;  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val1,  val2);  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  }  else  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val1,    val2);    if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val1,  val2);  }  else  {  return  0L;  }	  	compilable	  [FE]  StackOverflowError  	81	1	add
2775	[BUG]  [BUGGY]  for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1!=  val2.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val2.length;    val2++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	129	None	replace
2776	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	318	None	replace
2777	[BUG]  [BUGGY]  For(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  For(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	For(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	318	None	replace
2778	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  return  0L;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  return  0L;  }	  for(long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	318	None	replace
2779	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	387	None	replace
2780	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	387	None	replace
2781	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	328	None	replace
2782	[BUG]  [BUGGY]  for(int  val1  =  0L;  val1  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0L;  val1  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0L;  val1  <  val1.length;  val2++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	328	None	replace
2783	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val1,  val2)/  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val1,  val2)/  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val1,  val2)/  1;	  int    val2    =(int)Math.floor(val1,    val2)+    1;    	non-compiled	[CE]  orphaned  case	104	None	replace
2784	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  if(val1  >  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    if(val1  >  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	85	1	add
2785	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  if(val1  >  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  if(val1  >  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    if(val1  >  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	85	1	add
2786	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  if(val1  >  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    if(val1  >  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  StackOverflowError  	85	1	add
2787	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  if(val1  >  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  if(val1  >  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    if(val1  >  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  StackOverflowError  	85	1	add
2788	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  return  0L;  }	  	compilable	  [FE]  StackOverflowError  	85	1	add
2789	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  return  0L;  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    if(val1  >=  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  return  0L;  }	  	compilable	  [FE]  StackOverflowError  	85	1	add
2790	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  if(val1  >  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    if(val1  >  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  return  0L;  }	  	compilable	  [FE]  StackOverflowError  	85	1	add
2791	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  if(val1  >  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  return  0L;  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    safeMultiply(val2,  val1);  if(val1  >  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        safeMultiply(val2,    val1);    if(val1  >  val2)  {  safeMultiply(val1,  val2);  safeMultiply(val2,  val1);  }  else  {  return  0L;  }	  	compilable	  [FE]  StackOverflowError  	85	1	add
2792	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  <  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  <  val1)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	282	1	add
2793	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  <  val1)  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  <  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  <  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    <    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2  <  val1)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	282	1	add
2794	[BUG]  [BUGGY]  int  val2  =  Math.min(val1,  val2)-  3;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(val1,  val2)-  3;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(val1,  val2)-  3;	  int    val2    =    Math.min(val1,    val2)-    1;    	non-compiled	[CE]  orphaned  case	43	None	replace
2795	[BUG]  [BUGGY]  for(int  val1  =  0L;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0L;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0L;  val  <  val1.length;  val++)  {  safeMultiply(val1,  val2);  }	  for(int    val1    =    0;    val    <    val1.length;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	180	None	replace
2796	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2!=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2!=  val1)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	173	1	add
2797	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2!=  val1)  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2!=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val2!=  val1)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	173	1	add
2798	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	173	1	add
2799	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	173	1	add
2800	[BUG]  [BUGGY]  if(val2  <  =  val1)  {  return  val1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  <  =  val1)  {  return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  <  =  val1)  {  return  val1;  }	  if(val1    <    =    val2)    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
2801	[BUG]  [BUGGY]  if(val1  <  =  val2)return  val2;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  =  val2)return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  =  val2)return  val2;  }	  if(val1    <    =    val2)    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
2802	[BUG]  [BUGGY]  if(val1  <  val2.length)  {  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2.length)  {  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2.length)  {  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	319	None	replace
2803	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  return  0L;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  return  0L;  }	  for(long    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	319	None	replace
2804	[BUG]  [BUGGY]  if(val2  ==  val1  ||  val1  ==  val2)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  val1  ||  val1  ==  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  val1  ||  val1  ==  val2)  {	  if(val1    ==    val2    ||    val1    ==    val1)    {    	non-compiled	[CE]  orphaned  case	160	None	replace
2805	[BUG]  [BUGGY]  Switch(val3,  val1)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val3,  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val3,  val1)  {	  Switch(val2,    val1)    {    	non-compiled	[CE]  ';'  expected	145	None	replace
2806	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2,  val1.length;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	96	None	replace
2807	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  2L;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)/  2L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  2L;	  int    val2    =    getValue(val1)/    2;    	non-compiled	[CE]  orphaned  case	189	None	replace
2808	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  2  *  0L;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)/  2  *  0L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  2  *  0L;	  int    val2    =    getValue(val1)/    2;    	non-compiled	[CE]  orphaned  case	189	None	replace
2809	[BUG]  [BUGGY]  int  val2  =  getValue(val1)/  2  +  4;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)/  2  +  4;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)/  2  +  4;	  int    val2    =    getValue(val1)/    2;    	non-compiled	[CE]  orphaned  case	189	None	replace
2810	[BUG]  [BUGGY]  boolean  val2  =  Math.min(0,  val2);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  Math.min(0,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  Math.min(0,  val2);	  int    val2    =    Math.min(0,    val2);    	non-compiled	[CE]  orphaned  case	338	None	replace
2811	[BUG]  [BUGGY]  int  val2  =  Math.min(0.0,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  Math.min(0.0,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  Math.min(0.0,  val2);	  int    val2    =    Math.min(0,    val2);    	non-compiled	[CE]  orphaned  case	338	None	replace
2812	[BUG]  [BUGGY]  for(int  val2  =  0,  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0,  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0,  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    1;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	35	None	replace
2813	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  return  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  return  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  return  safeMultiply(val1,  val2);  }	  for(int    val2    =    1;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	35	None	replace
2814	[BUG]  [BUGGY]  float  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	301	None	replace
2815	[BUG]  [BUGGY]  if(val1  <  val2)  {  int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	301	None	replace
2816	[BUG]  [BUGGY]  if(val1  ==  val2)  {  int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	301	None	replace
2817	[BUG]  [BUGGY]  byte  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  byte  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	byte  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	301	None	replace
2818	[BUG]  [BUGGY]  Char  val2  =(char)Math.floor(val1,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Char  val2  =(char)Math.floor(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Char  val2  =(char)Math.floor(val1,  val2);	  char    val2    =(char)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	339	None	replace
2819	[BUG]  [BUGGY]  Character  val2  =(Character)Math.floor(val1,  val2);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Character  val2  =(Character)Math.floor(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Character  val2  =(Character)Math.floor(val1,  val2);	  char    val2    =(char)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	339	None	replace
2820	[BUG]  [BUGGY]  String  val2  =(string)Math.floor(val1,  val2);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  String  val2  =(string)Math.floor(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	String  val2  =(string)Math.floor(val1,  val2);	  char    val2    =(char)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	339	None	replace
2821	[BUG]  [BUGGY]  byte  val2  =(byte)Math.floor(val1,  val2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  byte  val2  =(byte)Math.floor(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	byte  val2  =(byte)Math.floor(val1,  val2);	  long    val2    =(long)Math.floor(val1,    val2);    	non-compiled	[CE]  orphaned  case	100	None	replace
2822	[BUG]  [BUGGY]  mutation(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  mutation(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	mutation(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	          if(val1    ==    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    {    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  	256	None	replace
2823	[BUG]  [BUGGY]  mutation(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val2  + "  *   "  +  val1);  }  [CE]  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  mutation(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val2  + "  *   "  +  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	mutation(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val2  + "  *   "  +  val1);  }	          if(val1    ==    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    {    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  	256	None	replace
2824	[BUG]  [BUGGY]  mutation(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [CE]  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  mutation(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	mutation(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }	          if(val1    ==    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    {    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  	256	None	replace
2825	[BUG]  [BUGGY]  mutation(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *  val2 ");  }  [CE]  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  mutation(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *  val2 ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	mutation(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *  val2 ");  }	          if(val1    ==    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    {    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  	256	None	replace
2826	[BUG]  [BUGGY]  mutation(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "* ");  }  [CE]  [FE]                  ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  mutation(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "* ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	mutation(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "* ");  }	          if(val1    ==    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    {    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  	256	None	replace
2827	[BUG]  [BUGGY]  if(val2  >=  val1)return  val1;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >=  val1)return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1)return  val1;  }	  if(val2    >=    val1)    {    return    val1;    }    	non-compiled	[CE]  illegal  start  of  type	357	None	replace
2828	[BUG]  [BUGGY]  if(val2  ==  val1)return  val1;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  val1)return  val1;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  val1)return  val1;  }	  if(val2    >=    val1)    {    return    val1;    }    	non-compiled	[CE]  illegal  start  of  type	357	None	replace
2829	[BUG]  [BUGGY]  byte  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  byte  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	byte  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	323	None	replace
2830	[BUG]  [BUGGY]  if(val1  <  val2)  {  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	323	None	replace
2831	[BUG]  [BUGGY]  long  val2  =  val1.length  -  val2.length;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1.length  -  val2.length;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1.length  -  val2.length;	  long    val2    =    val1.length    *    val2;    	non-compiled	[CE]  orphaned  case	119	None	replace
2832	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1)/  2.0;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =(long)Math.floor(val1)/  2.0;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =(long)Math.floor(val1)/  2.0;	  long    val2    =(long)Math.floor(val1)/    val2;    	non-compiled	[CE]  orphaned  case	61	None	replace
2833	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val1,  val2)/  2;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val1,  val2)/  2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val1,  val2)/  2;	  int    val2    =(int)Math.floor(val1,    val2)-    2;    	non-compiled	[CE]  orphaned  case	107	None	replace
2834	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
2835	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val1;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	308	1	add
2836	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val3  <  val2)  {  return  val2;  }  [CE]  cannot  find  symbol  val3  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  <  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val3  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    <    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val1)  {  return  val1;  }  if(val3  <  val2)  {  return  val2;  }	  	non-compiled	[CE]  cannot  find  symbol  val3	308	None	add
2837	[BUG]  [BUGGY]  if(val1  >=  val2)  {  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	29	None	replace
2838	[BUG]  [BUGGY]  int  val2  =(int)Math.log(val1)/  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =(int)Math.log(val1)/  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =(int)Math.log(val1)/  1;	  int    val2    =(int)Math.floor(val1)+    1;    	non-compiled	[CE]  orphaned  case	220	None	replace
2839	[BUG]  [BUGGY]  float  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	33	None	replace
2840	[BUG]  [BUGGY]  if(val1  >  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	33	None	replace
2841	[BUG]  [BUGGY]  if(val2  <  0)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  <  0)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  <  0)  {  int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	33	None	replace
2842	[BUG]  [BUGGY]  byte  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  byte  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	byte  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	33	None	replace
2843	[BUG]  [BUGGY]  if(val1  <  val2)  {  int  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  int  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  int  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	199	None	replace
2844	[BUG]  [BUGGY]  if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  int  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	199	None	replace
2845	[BUG]  [BUGGY]  byte  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  byte  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	byte  val2  =  0;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	199	None	replace
2846	[BUG]  [BUGGY]  boolean  val2  =  false;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  false;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  false;  val1  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	199	None	replace
2847	[BUG]  [BUGGY]  int  val2  =  getValue(val2)-  val1);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val2)-  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val2)-  val1);	  int    val2    =    getValue(val1)-    val2;    	non-compiled	[CE]  ';'  expected	250	None	replace
2848	[BUG]  [BUGGY]  float  val2  =  getValue(val1)-  val2;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  float  val2  =  getValue(val1)-  val2;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	float  val2  =  getValue(val1)-  val2;	  int    val2    =    getValue(val1)-    val2;    	non-compiled	[CE]  orphaned  case	250	None	replace
2849	[BUG]  [BUGGY]  if(val1  ==  val2)  {  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	196	None	replace
2850	[BUG]  [BUGGY]  if(val1  <  val2)  {  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  long  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	196	None	replace
2851	[BUG]  [BUGGY]  long  val2  =  val1,  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	196	None	replace
2852	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	57	1	add
2853	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1!=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	57	1	add
2854	[BUG]  [BUGGY]  tryFactory().safeMultiply(val1,  val2).returnValue();  [CE]  orphaned  case  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFactory().safeMultiply(val1,  val2).returnValue();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFactory().safeMultiply(val1,  val2).returnValue();	          if(val1    ==    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	56	None	replace
2855	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ".equals(val2));  }  [CE]  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ".equals(val2));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ".equals(val2));  }	          if(val1    ==    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    	non-compiled	[CE]  	60	None	replace
2856	[BUG]  [BUGGY]  mutation(val1,  val2)  {  throw  new  ArithmeticException( " ".equals(val2));  }  [CE]  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  mutation(val1,  val2)  {  throw  new  ArithmeticException( " ".equals(val2));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	mutation(val1,  val2)  {  throw  new  ArithmeticException( " ".equals(val2));  }	          if(val1    ==    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    	non-compiled	[CE]  	60	None	replace
2857	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
2858	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
2859	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
2860	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  ==  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  ==  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
2861	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
2862	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >=  val2)  {  return  val1;  }  if(val1  >=  val2)  {  return  val2;  }  if(val1  <  val2)  {  return  val2;  }	  	compilable	  [FE]  AssertionFailedError  	202	1	add
2863	[BUG]  [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    >=    val2)    {    return    val2;    }    if(val1  >=  val2)  {  return  val2;  }  if(val1  >>  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        >=        val2)        {        return        val2;        }        if(val1    >=    val2)    {    return    val2;    }    if(val1  >>  val2)  {  return  val2;  }  if(val1  >=  val1)  {  return  val1;  }  if(val2  >=  val2)  {  return  val2;  }	  	non-compiled	[CE]  incompatible  types	202	None	add
2864	[BUG]  [BUGGY]  ensureCapacity(val1,  val2);  [CE]  orphaned  case  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ensureCapacity(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	ensureCapacity(val1,  val2);	  allowMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	18	None	replace
2865	[BUG]  [BUGGY]  switch(val1.length  /  val2)  {  [CE]  long  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1.length  /  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1.length  /  val2)  {	  switch(val1    /    val2)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	267	None	replace
2866	[BUG]  [BUGGY]  short  val2  =  getValue(val1,  val2);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  short  val2  =  getValue(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	short  val2  =  getValue(val1,  val2);	  long    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	73	None	replace
2867	[BUG]  [BUGGY]  ||(val2  >=  val1)&&(val1  >=  val2))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val2  >=  val1)&&(val1  >=  val2))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val2  >=  val1)&&(val1  >=  val2))  {  return  val2;  }	  ||(val1    >=    val2)&&(val2    ==    val1))    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
2868	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1,    val2.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	329	None	replace
2869	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1,  val2;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1,    val2.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	329	None	replace
2870	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  <  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  <  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2  <  val2.length;  val2++)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1,    val2.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	329	None	replace
2871	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1,  val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val1,  val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val1,  val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1,    val2.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	329	None	replace
2872	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1,  val2  <  val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val1,  val2  <  val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val1,  val2  <  val2)  {  if(val2  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1,    val2.length;    val2++)    {    if(val2    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	329	None	replace
2873	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	359	None	replace
2874	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	359	None	replace
2875	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	359	None	replace
2876	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val2.length;    ++val2)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	359	None	replace
2877	[BUG]  [BUGGY]  if(val1  ==  val2)  {  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  ==  val2)  {  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  ==  val2)  {  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	22	None	replace
2878	[BUG]  [BUGGY]  if(val1  >=  val2)  {  long  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  long  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  long  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	22	None	replace
2879	[BUG]  [BUGGY]  if(val1  >=  val2)  {  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >=  val2)  {  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >=  val2)  {  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	22	None	replace
2880	[BUG]  [BUGGY]  if(val2  <  val1  ||  val1  >  val2)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  <  val1  ||  val1  >  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  <  val1  ||  val1  >  val2)  {	  if(val1    <    val2    ||    val1    >    val1)    {    	non-compiled	[CE]  orphaned  case	344	None	replace
2881	[BUG]  [BUGGY]  if(val1  >  val2  ||  val1  >  val1)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2  ||  val1  >  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2  ||  val1  >  val1)  {	  if(val1    <    val2    ||    val1    >    val1)    {    	non-compiled	[CE]  orphaned  case	344	None	replace
2882	[BUG]  [BUGGY]  if(val1  <  =  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val2,  val1);  }  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  =  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  =  val2)  {  safeMultiply(val1,  val2);  }  else  {  safeMultiply(val2,  val1);  }	          safeMultiply(val1,    val2);    safeMultiply(val2,    val1);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
2883	[BUG]  [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  [CE]  orphaned  case  [FE]                  ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  orphaned  case	19	None	replace
2884	[BUG]  [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *  val2 ");  [CE]  orphaned  case  [FE]                    ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *  val2 ");  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *  val2 ");	  while(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  orphaned  case	19	None	replace
2885	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  val2++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	369	None	replace
2886	[BUG]  [BUGGY]  byte  val2  =(byte)Math.floor(val1)-(byte)Math.floor(val2)-  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  byte  val2  =(byte)Math.floor(val1)-(byte)Math.floor(val2)-  1;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	byte  val2  =(byte)Math.floor(val1)-(byte)Math.floor(val2)-  1;	  int    val2    =(int)Math.floor(val1)-(int)Math.floor(val2)-    1;    	non-compiled	[CE]  orphaned  case	233	None	replace
2887	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                safeMultiply(val1,        val2);        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    if(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	  	compilable	  [FE]  StackOverflowError  	331	1	add
2888	[BUG]  [BUGGY]          safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          safeMultiply(val1,    val2);    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                safeMultiply(val1,        val2);        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    if(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	  	compilable	  [FE]  StackOverflowError  	331	1	add
2889	[BUG]  [BUGGY]  if(val1  <  val2)  {  int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	23	None	replace
2890	[BUG]  [BUGGY]  if(val1  >  val2)  {  int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2)  {  int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2)  {  int  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	23	None	replace
2891	[BUG]  [BUGGY]  byte  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  byte  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	byte  val2  =  0;  val1  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val1.length;    val++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	23	None	replace
2892	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	28	None	replace
2893	[BUG]  [BUGGY]  switch(val1.doubleValue(),  val2.doubleValue())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1.doubleValue(),  val2.doubleValue())  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1.doubleValue(),  val2.doubleValue())  {	  switch(val1    +    val2)    {    	non-compiled	[CE]  ')'  expected	161	None	replace
2894	[BUG]  [BUGGY]  switch(val1.longValue(),  val2.longValue())  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1.longValue(),  val2.longValue())  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1.longValue(),  val2.longValue())  {	  switch(val1    +    val2)    {    	non-compiled	[CE]  ')'  expected	161	None	replace
2895	[BUG]  [BUGGY]  if(val1  <  val2)  {  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	197	None	replace
2896	[BUG]  [BUGGY]  byte  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  byte  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	byte  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  int    val2    =    0;    val1    <    val2.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	197	None	replace
2897	[BUG]  [BUGGY]  Switch(val1,  val2,  0),  false)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  0),  false)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  0),  false)  {	  Switch(val1,    val2,    0)    {    	non-compiled	[CE]  ';'  expected	141	None	replace
2898	[BUG]  [BUGGY]  Switch(val1,  val2,  -1)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val1,  val2,  -1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val1,  val2,  -1)  {	  Switch(val1,    val2,    0)    {    	non-compiled	[CE]  ';'  expected	141	None	replace
2899	[BUG]  [BUGGY]  if(val2  ==  val1  ||  val2  >=  val2)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  val1  ||  val2  >=  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  val1  ||  val2  >=  val2)  {	  if(val1    ==    val2    ||    val1    >=    val2)    {    	non-compiled	[CE]  orphaned  case	252	None	replace
2900	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	383	None	replace
2901	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  val++)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val2    =    0;    val    <    val1.length;    val++)    {    if(val2    >    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	383	None	replace
2902	[BUG]  [BUGGY]  for(int  val1  =  0;  val3  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val3  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val3  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2!=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	360	None	replace
2903	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	59	1	add
2904	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( ".   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	59	1	add
2905	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	59	1	add
2906	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	59	1	add
2907	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	59	1	add
2908	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( ".   ");  }  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( ". ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val2  ==  val1)  {  throw  new  ArithmeticException( ".   ");  }	  	compilable	  [FE]  ArithmeticException  	59	1	add
2909	[BUG]  [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ".   ");  }  [CE]  unclosed  string  literal  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]          if(val1    ==    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException(   ".     ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ".   ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	                if(val1        ==        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    ==    val2)    {    throw    new    ArithmeticException(   ".       ");    }    if(val1  ==  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( ".   ");  }  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ".   ");  }	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
2910	[BUG]  [BUGGY]  if(val1  <  val2)  {  tries.put(val1,  val2);  }  [CE]  orphaned  case  [FE]                    ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  tries.put(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  tries.put(val1,  val2);  }	  tries.put(val1,    val2);    	non-compiled	[CE]  orphaned  case	20	None	replace
2911	[BUG]  [BUGGY]  if(val1  <  val2)  {  tries.put(val1,  val2);  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  <  val2)  {  tries.put(val1,  val2);  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  <  val2)  {  tries.put(val1,  val2);  }  else  {  throw  new  ArithmeticException( " ");  }	  tries.put(val1,    val2);    	non-compiled	[CE]  orphaned  case	20	None	replace
2912	[BUG]  [BUGGY]  SafeMultiplication.safeMultiply(val2,  val1);  [CE]  orphaned  case  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiplication.safeMultiply(val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiplication.safeMultiply(val2,  val1);	          safeMultiply(val1,    val2);    SafeMultiplication.safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	83	None	replace
2913	[BUG]  [BUGGY]  boolean  val2  =  getValue(val1,  val2)&&  val2  >=  0;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =  getValue(val1,  val2)&&  val2  >=  0;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =  getValue(val1,  val2)&&  val2  >=  0;	  boolean    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	80	None	replace
2914	[BUG]  [BUGGY]  boolean  val2  =(val1  >=  val2)?  getValue(val1,  val2):  true;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  boolean  val2  =(val1  >=  val2)?  getValue(val1,  val2):  true;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	boolean  val2  =(val1  >=  val2)?  getValue(val1,  val2):  true;	  boolean    val2    =    getValue(val1,    val2);    	non-compiled	[CE]  orphaned  case	80	None	replace
2915	[BUG]  [BUGGY]  switch(val1,  val2,  false,  false)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1,  val2,  false,  false)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1,  val2,  false,  false)  {	  switch(val1,    val2,    false)    {    	non-compiled	[CE]  ')'  expected	127	None	replace
2916	[BUG]  [BUGGY]  Switch(val2  ==  val1,  val2)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val2  ==  val1,  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val2  ==  val1,  val2)  {	  Switch(val2    ==    val1)    {    	non-compiled	[CE]  ';'  expected	349	None	replace
2917	[BUG]  [BUGGY]  Switch(val2!=  val1)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  Switch(val2!=  val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	Switch(val2!=  val1)  {	  Switch(val2    ==    val1)    {    	non-compiled	[CE]  ';'  expected	349	None	replace
2918	[BUG]  [BUGGY]  while(val2  <  =  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val2  <  =  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val2  <  =  val1)  {  throw  new  ArithmeticException( " ");  }	  while(val2    >=    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	379	None	replace
2919	[BUG]  [BUGGY]  while(val2  [Delete]  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val2  [Delete]  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val2  [Delete]  val1)  {  throw  new  ArithmeticException( " ");  }	  while(val2    >=    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	379	None	replace
2920	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	362	None	replace
2921	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   "));    }    	non-compiled	[CE]  	362	None	replace
2922	[BUG]  [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  return  safeMultiply(val1,  val2);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  return  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  1;  val  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  return  safeMultiply(val1,  val2);  }	  for(int    val2    =    1;    val    <    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	201	None	replace
2923	[BUG]  [BUGGY]  SafeRaw(val1)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeRaw(val1)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeRaw(val1)  {	  Switch(val2)    {    	non-compiled	[CE]  ';'  expected	214	None	replace
2924	[BUG]  [BUGGY]  tryFailure(val1,  val2)  {  return  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFailure(val1,  val2)  {  return  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFailure(val1,  val2)  {  return  safeMultiply(val2,  val1);  }	  tryFailure(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  ';'  expected	340	None	replace
2925	[BUG]  [BUGGY]  if(val1  >>  val2)  {  return  0;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >>  val2)  {  return  0;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >>  val2)  {  return  0;  }	  if(val1!=    val2)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	227	None	replace
2926	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2++)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2++)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2++)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2,    val1++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	384	None	replace
2927	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  +  1)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  +  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2  +  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2,    val1++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	384	None	replace
2928	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  >  1)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val1,  val2  >  1)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val1,  val2  >  1)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val1    <    val2,    val1++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	384	None	replace
2929	[BUG]  [BUGGY]  SafeMultiplication(val1,  val2);  [CE]  orphaned  case  [FE]                      StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  SafeMultiplication(val1,  val2);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	SafeMultiplication(val1,  val2);	          safeMultiply(val1,    val2);    SafeMultiplication(val1,    val2);    	non-compiled	[CE]  orphaned  case	90	None	replace
2930	[BUG]  [BUGGY]  if(val2  ==  val1)return  val1;  if(val2!=  val2)  {  return  val2;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  ==  val1)return  val1;  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  ==  val1)return  val1;  if(val2!=  val2)  {  return  val2;  }	  return    val2;    	non-compiled	[CE]  orphaned  case	300	None	replace
2931	[BUG]  [BUGGY]  if(val2  >=  val1)return  val1;  if(val2!=  val2)  {  return  val2;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >=  val1)return  val1;  if(val2!=  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1)return  val1;  if(val2!=  val2)  {  return  val2;  }	  return    val2;    	non-compiled	[CE]  orphaned  case	300	None	replace
2932	[BUG]  [BUGGY]  if(val2  >=  val1)return  val1;  if(val2  ==  val2)  {  return  val2;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >=  val1)return  val1;  if(val2  ==  val2)  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1)return  val1;  if(val2  ==  val2)  {  return  val2;  }	  return    val2;    	non-compiled	[CE]  orphaned  case	300	None	replace
2933	[BUG]  [BUGGY]  safeMultiply(val1,  val2);  cleanMultiply(val1,  val2,  val1);  [CE]  orphaned  case  [FE]                    StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2);  cleanMultiply(val1,  val2,  val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2);  cleanMultiply(val1,  val2,  val1);	          safeMultiply(val1,    val2);    cleanMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	89	None	replace
2934	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
2935	[BUG]  [BUGGY]  for(int  val1  =  0;  val3  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val3  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val3  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	7	None	replace
2936	[BUG]  [BUGGY]  safeMultiply(val1,  val2).return0L;  [CE]  not  a  statement  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2).return0L;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2).return0L;	          if(val1    ==    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    ==    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  not  a  statement	54	None	replace
2937	[BUG]  [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val2++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val  <  val2.length;  val2++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val  <  val2.length;  val2++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	52	None	replace
2938	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
2939	[BUG]  [BUGGY]  for(int  val1  =  0;  val3  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val3  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val3  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	52	None	replace
2940	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2;  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val1  <  val2;  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val1  <  val2;  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	272	None	replace
2941	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val1,  val2++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	272	None	replace
2942	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  safeMultiply(val2,  val1);  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  safeMultiply(val2,  val1);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  orphaned  case	272	None	replace
2943	[BUG]  [BUGGY]  safeMultiply(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2);  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2);  }	  safeMultiply(val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	326	None	replace
2944	[BUG]  [BUGGY]  switch(val1)restrictByNotNullOrUndefined()  {  [CE]  '{'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  switch(val1)restrictByNotNullOrUndefined()  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	switch(val1)restrictByNotNullOrUndefined()  {	  switch(val1,    val2).restrictByNotNullOrUndefined()    {    	non-compiled	[CE]  '{'  expected	377	None	replace
2945	[BUG]  [BUGGY]  if(val2  >=  val1)return  0L;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >=  val1)return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1)return  0L;  }	  if(val2    >=    val1)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	278	None	replace
2946	[BUG]  [BUGGY]  tryFactory().safeMultiply(val1,  val2).reset();  [CE]  orphaned  case  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  tryFactory().safeMultiply(val1,  val2).reset();  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	tryFactory().safeMultiply(val1,  val2).reset();	  tryFactory().safeMultiply(val1,    val2);    	non-compiled	[CE]  orphaned  case	342	None	replace
2947	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  val++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " "));  }	  for(int    val1    =    0;    val    <    val2.length;    val++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	380	None	replace
2948	[BUG]  [BUGGY]  if(val2  >=  val1  ||  val2!=  val2)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val2  >=  val1  ||  val2!=  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val2  >=  val1  ||  val2!=  val2)  {	  if(val1    >=    val2    ||    val1!=    val2)    {    	non-compiled	[CE]  orphaned  case	194	None	replace
2949	[BUG]  [BUGGY]  if(val1  >  val2  ||  val1!=  val2)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  if(val1  >  val2  ||  val1!=  val2)  {  [BUGGY]      case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	if(val1  >  val2  ||  val1!=  val2)  {	  if(val1    >=    val2    ||    val1!=    val2)    {    	non-compiled	[CE]  orphaned  case	194	None	replace
2950	[BUG]  [BUGGY]  safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( ", ");  }  [CE]  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( ", ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	safeMultiply(val1,  val2)  {  throw  new  ArithmeticException( ", ");  }	          if(val1    ==    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    	non-compiled	[CE]  	255	None	replace
2951	[BUG]  [BUGGY]  mutation(val1,  val2)  {  throw  new  ArithmeticException( ", ");  }  [CE]  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  mutation(val1,  val2)  {  throw  new  ArithmeticException( ", ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	mutation(val1,  val2)  {  throw  new  ArithmeticException( ", ");  }	          if(val1    ==    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    ==    val2)    {    throw    new    ArithmeticException(   ",       ");    }    	non-compiled	[CE]  	255	None	replace
2952	[BUG]  [BUGGY]  for(int  val2  =  0;  val1!=  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1!=  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1!=  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	32	None	replace
2953	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val1  <  val2,  val1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val1  <  val2,  val1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val2    =    0;    val1    <    val1.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	32	None	replace
2954	[BUG]  [BUGGY]  int  val2  =  getValue(val1)-  4;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  int  val2  =  getValue(val1)-  4;  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	int  val2  =  getValue(val1)-  4;	  int    val2    =    getValue(val1)-    1;    	non-compiled	[CE]  orphaned  case	185	None	replace
2955	[BUG]  [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( " ")  + "  must  be  in  the  range  [ "  +  val1.doubleValue()  + "] ");  }  [CE]  [FE]        ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  while(val1  >=  val2)  {  throw  new  ArithmeticException( " ")  + "  must  be  in  the  range  [ "  +  val1.doubleValue()  + "] ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	while(val1  >=  val2)  {  throw  new  ArithmeticException( " ")  + "  must  be  in  the  range  [ "  +  val1.doubleValue()  + "] ");  }	  while(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	14	None	replace
2956	[BUG]  [BUGGY]  long  val2  =  val1,  val2  *  val2  +(int)Math.rint((  int)val1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2  *  val2  +(int)Math.rint((  int)val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2  *  val2  +(int)Math.rint((  int)val1);	  long    val2    =    val1    *    val2    +(int)Math.rint((    int)val1);    	non-compiled	[CE]  ';'  expected	306	None	replace
2957	[BUG]  [BUGGY]  long  val2  =  val1,  val2  *  val1  +(int)Math.rint((  int)val1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  long  val2  =  val1,  val2  *  val1  +(int)Math.rint((  int)val1);  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	long  val2  =  val1,  val2  *  val1  +(int)Math.rint((  int)val1);	  long    val2    =    val1    *    val2    +(int)Math.rint((    int)val1);    	non-compiled	[CE]  ';'  expected	306	None	replace
2958	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	321	None	replace
2959	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  return  0L;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  return  0L;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  return  0L;  }	  for(long    val2    =    0;    val    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	321	None	replace
2960	[BUG]  [BUGGY]  ||(val2  >=  val1)&&(val1!=  val2))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val2  >=  val1)&&(val1!=  val2))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val2  >=  val1)&&(val1!=  val2))  {  return  val2;  }	  ||(val1    >=    val2)&&(val2!=    val1))    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
2961	[BUG]  [BUGGY]  ||(val1  >=  val1)&&(val2!=  val2))  {  return  val2;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  ||(val1  >=  val1)&&(val2!=  val2))  {  return  val2;  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	||(val1  >=  val1)&&(val2!=  val2))  {  return  val2;  }	  ||(val1    >=    val2)&&(val2!=    val1))    {    return    val2;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
2962	[BUG]  [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2)  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {      [BUGGY]  for(int  val2  =  0;  val  <  val1,  val2)  {  safeMultiply(val1,  val2);  }  [BUGGY]      switch  (val2)  {  case  -1:  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	for(int  val2  =  0;  val  <  val1,  val2)  {  safeMultiply(val1,  val2);  }	  for(int    val2    =    0;    val    <    val1;    val++)    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	354	None	replace
