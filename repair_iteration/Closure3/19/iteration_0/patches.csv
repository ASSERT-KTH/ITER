bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  false);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }    [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  false);  [BUGGY]    Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  false);	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
2	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  false);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }    [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  false);  [BUGGY]    Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  false);	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
3	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }    [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true);  [BUGGY]    Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true);	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
4	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }    [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null);  [BUGGY]    Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null);	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
5	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }    [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  1);  [BUGGY]    Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  1);	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
6	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  true);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }    [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  true);  [BUGGY]    Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  true);	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
7	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  false,  false);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError  [CONTEXT]  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }    [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  false,  false);  [BUGGY]    Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  false,  false);	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError  [CONTEXT]  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }    [BUGGY]    [BUGGY]    Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	  	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
9	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  false);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }    [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  false);  [BUGGY]    Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  false);	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
10	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }    [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true);  [BUGGY]    Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true);	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
