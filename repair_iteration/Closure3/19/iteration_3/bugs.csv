bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidates);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidates);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	NodeTraversal.traverse(compiler,  t,  this,  candidates);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  def);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  NodeTraversal.traverse(compiler,  t,  def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	NodeTraversal.traverse(compiler,  t,  def);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  this);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  NodeTraversal.traverse(compiler,  c,  this);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	NodeTraversal.traverse(compiler,  c,  this);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidate);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidate);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	NodeTraversal.traverse(compiler,  t,  this,  candidate);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineNewDependencies);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  DEF_METADATA);  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  NodeTraversal.traverse(compiler,  t,  DEF_METADATA);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	NodeTraversal.traverse(compiler,  t,  DEF_METADATA);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
8	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  null,  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  null,  1);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  null,  1);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null,    1);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
9	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  3);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  3);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  3);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null,    1);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
10	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  4);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  4);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  4);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null,    1);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
11	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  2);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  2);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  2);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null,    1);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
12	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  1);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  1);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  1);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null,    1);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
13	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  5);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  5);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  5);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null,    1);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
14	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
15	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  def);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
16	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  SIDE_EFFECT_PREDICATE);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  SIDE_EFFECT_PREDICATE);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  SIDE_EFFECT_PREDICATE);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
17	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  DEF_METADATA);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  DEF_METADATA);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  DEF_METADATA);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
18	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this.def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this.def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this.def);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
19	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  mappingNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  mappingNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  mappingNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
20	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  true);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
21	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  true,  true);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  true,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  true,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
22	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  false,  true);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  false,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  false,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
23	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  true,  false);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  true,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  true,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
24	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  true,  true);  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  true,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  true,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
25	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getCfg();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getCfg();  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getCfg();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
26	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getCfgNode();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getCfgNode();  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getCfgNode();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
27	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getConstructor();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getConstructor();  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getConstructor();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
28	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  cfg.getScopeRoot();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  cfg.getScopeRoot();  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowGraph  <  Node>  cfg  =  cfg.getScopeRoot();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
29	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getParent();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getParent();  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getParent();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
30	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getCfgNodes();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getCfgNodes();  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getCfgNodes();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
31	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  numUseWithinCfgNode,  true,  true);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  numUseWithinCfgNode,  true,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  numUseWithinCfgNode,  true,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    compiler,    true,    true);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
32	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  numUseWithinUseCfgNode,  true,  true);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  numUseWithinUseCfgNode,  true,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  numUseWithinUseCfgNode,  true,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    compiler,    true,    true);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  false,  false);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  false,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  false,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    compiler,    true,    true);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  numUseWithinCfgNode,  false,  true);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  numUseWithinCfgNode,  false,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  numUseWithinCfgNode,  false,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    compiler,    true,    true);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
35	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  numUseWithinCfgNode,  true,  false);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  numUseWithinCfgNode,  true,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  numUseWithinCfgNode,  true,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    compiler,    true,    true);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
36	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  false,  true);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  false,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  false,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    compiler,    true,    true);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
37	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  this,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  this,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  this,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
38	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  null,  false,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  null,  false,  numUseWithinCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  null,  false,  numUseWithinCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
39	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  this);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  this);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  this);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
40	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  def,  false);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  def,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  def,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
41	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  null,  false,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  null,  false,  numUseWithinUseCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  null,  false,  numUseWithinUseCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
42	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  false,  true);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  false,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  false,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    false,    false);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
43	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  true);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null,    true);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
44	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  def,  true);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  def,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  def,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null,    true);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
45	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  null,  true);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  null,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  null,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null,    true);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
46	[BUG]  [BUGGY]  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  reachingDef.analyze();  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	reachingDef.analyze();	  cfg.process(null,    t.getScopeRoot().getFirstChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
47	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  reachingDef.analyze());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  reachingDef.analyze());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild(),  reachingDef.analyze());	  cfg.process(null,    t.getScopeRoot().getFirstChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
48	[BUG]  [BUGGY]  cfg.process(t,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg.process(t,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg.process(t,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();	  cfg.process(null,    t.getScopeRoot().getFirstChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
49	[BUG]  [BUGGY]  Context.checkState(t.getScopeRoot().isFunction());  cfg.process(null,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Context.checkState(t.getScopeRoot().isFunction());  cfg.process(null,  t.getScopeRoot().getLastChild());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Context.checkState(t.getScopeRoot().isFunction());  cfg.process(null,  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().isFunction());    cfg.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfg.process(null,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfg.process(null,  t.getScopeRoot().getLastChild());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction(),  cfg.process(null,  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().isFunction());    cfg.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
51	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  candidates);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild(),  candidates);	  cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
52	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  candidate);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  candidate);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild(),  candidate);	  cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
53	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  null,  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  null,  def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  null,  def);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    null);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
54	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  null,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  null,  t.getScopeRoot());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  null,  t.getScopeRoot());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    null);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
55	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  null,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  null,  numUseWithinCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  null,  numUseWithinCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    null);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
56	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  null,  true);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  null,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  null,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    null);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
57	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  useCfgNode,  false);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  useCfgNode,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  useCfgNode,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    def,    false);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
58	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(def,  compiler,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(def,  compiler,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(def,  compiler,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    def,    false);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
59	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  def,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  def,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  def,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    def,    false);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
60	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  def,  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  def,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  def,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    def,    false);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
61	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  DEF_METADATA,  false);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  DEF_METADATA,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  DEF_METADATA,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    def,    false);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
62	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  defMetadata);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  defMetadata);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    def);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
63	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  def);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    def);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
64	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  def,  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  def,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  def,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    def);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
65	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  defMetadata,  null,  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  defMetadata,  null,  def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  defMetadata,  null,  def);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    def);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
66	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  defMetadata,  null);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  defMetadata,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  defMetadata,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    def);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
67	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
68	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
69	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
70	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
71	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  t.getScopeRoot());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  t.getScopeRoot());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
72	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getParent());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getParent());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getParent());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
73	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  compiler,  null,  true);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  compiler,  null,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  compiler,  null,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    compiler,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
74	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  def,  null,  false);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  def,  null,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  def,  null,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    compiler,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
75	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  compiler,  this,  false);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  compiler,  this,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  compiler,  this,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    compiler,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
76	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  t,  null,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  t,  null,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  t,  null,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    compiler,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
77	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  compiler,  def,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  compiler,  def,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  compiler,  def,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    compiler,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
78	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  null,  false);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  null,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  null,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    compiler,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  NodeTraversal.traverse(compiler,  c);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	NodeTraversal.traverse(compiler,  c);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  candidates);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  NodeTraversal.traverse(compiler,  t,  candidates);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	NodeTraversal.traverse(compiler,  t,  candidates);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
82	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  candidate);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  NodeTraversal.traverse(compiler,  t,  candidate);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	NodeTraversal.traverse(compiler,  t,  candidate);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  t);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  t);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	NodeTraversal.traverse(compiler,  cfg,  t);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  NodeTraversal.traverse(compiler,  def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	NodeTraversal.traverse(compiler,  def);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Preconditions.checkState(!t.inGlobalScope());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Preconditions.checkState(!t.inGlobalScope());	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(t.inGlobalScope()  ||  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Preconditions.checkState(t.inGlobalScope()  ||  t.inGlobalScope());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Preconditions.checkState(t.inGlobalScope()  ||  t.inGlobalScope());	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(cfg.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Preconditions.checkState(cfg.inGlobalScope());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Preconditions.checkState(cfg.inGlobalScope());	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(t.inGlobalScope();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Preconditions.checkState(t.inGlobalScope();  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Preconditions.checkState(t.inGlobalScope();	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(t.inGlobalScope(),  cfg.isFunction());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Preconditions.checkState(t.inGlobalScope(),  cfg.isFunction());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Preconditions.checkState(t.inGlobalScope(),  cfg.isFunction());	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(t.inGlobalScope()  ||  t.isFunction());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Preconditions.checkState(t.inGlobalScope()  ||  t.isFunction());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Preconditions.checkState(t.inGlobalScope()  ||  t.isFunction());	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
91	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  numUseWithinUseCfgNode,  true,  false);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  numUseWithinUseCfgNode,  true,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  numUseWithinUseCfgNode,  true,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    compiler,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
92	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  numUseWithinCfgNode,  false,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  numUseWithinCfgNode,  false,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  numUseWithinCfgNode,  false,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    compiler,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
93	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  def,  true,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  def,  true,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  def,  true,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    compiler,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
94	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  false,  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  false,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  false,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    compiler,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
95	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  3);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  3);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  3);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    2);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
96	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  4);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  4);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  4);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    2);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
97	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  2);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  2);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  2);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    2);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
98	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  true,  true,  false);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  true,  true,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  true,  true,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
99	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  1);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  1);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    1);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
100	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false,  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false,  1);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false,  1);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    1);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
101	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true,  numUseWithinCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true,  numUseWithinCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    false,    true);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
102	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false,  false,  true);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false,  false,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false,  false,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    false,    true);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
103	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true,  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    false,    true);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
104	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false,  true,  true);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false,  true,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false,  true,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    true,    true);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
105	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  numUseWithinCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  numUseWithinCfgNode  +  1);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  numUseWithinCfgNode  +  1);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    true,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
106	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  false,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  false,  numUseWithinCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  false,  numUseWithinCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    true,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
107	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  numUseWithinCfgNode,  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  numUseWithinCfgNode,  def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  numUseWithinCfgNode,  def);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    true,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
108	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  useCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  useCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  useCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    true,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
109	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  numUseWithinCfgNode,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  numUseWithinCfgNode,  reachingDef);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  numUseWithinCfgNode,  reachingDef);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    true,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
110	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  numUseWithinCfgNode,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  numUseWithinCfgNode,  inlinedNewDependencies);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  numUseWithinCfgNode,  inlinedNewDependencies);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    true,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
111	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild(),  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild(),  def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg.process(null,  t.getScopeRoot().getLastChild(),  def);	  cfg.process(null,    t.getScopeRoot().getFirstChild(),    def);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
112	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  def,  reachingDef);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild(),  def,  reachingDef);	  cfg.process(null,    t.getScopeRoot().getFirstChild(),    def);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
113	[BUG]  [BUGGY]  cfg.process(t,  t.getScopeRoot().getFirstChild(),  def);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg.process(t,  t.getScopeRoot().getFirstChild(),  def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg.process(t,  t.getScopeRoot().getFirstChild(),  def);	  cfg.process(null,    t.getScopeRoot().getFirstChild(),    def);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
114	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  numUseWithinCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  numUseWithinCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
115	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  numUseWithinUseCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  numUseWithinUseCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
116	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
117	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope(),  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope(),  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope(),  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
118	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  numUseWithinUseCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  numUseWithinUseCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    this,    false);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
119	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  false,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  false,  t.getScopeRoot());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  false,  t.getScopeRoot());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    this,    false);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
120	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  t.getScopeRoot(),  true);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  t.getScopeRoot(),  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  t.getScopeRoot(),  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    true);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
121	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    true);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
122	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getCfgNode(),  true);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getCfgNode(),  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getCfgNode(),  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    true);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
123	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  true,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  true,  numUseWithinUseCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  true,  numUseWithinUseCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    true);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
124	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  true,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  true,  numUseWithinCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  true,  numUseWithinCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    true);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
125	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getParent(),  true);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getParent(),  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getParent(),  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    true);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
126	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  this,  true);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  this,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  this,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    null,    true);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
127	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  def,  true);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  def,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  def,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    null,    true);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
128	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  nodes,  true);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  nodes,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  nodes,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    null,    true);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
129	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  t.getScopeRoot());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  t.getScopeRoot());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
130	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false,  true);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
131	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false,  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
132	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  true,  true,  false);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  true,  true,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  true,  true,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
133	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  2);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  2);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  2);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    true,    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
134	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  3);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  3);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  3);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    true,    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
135	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  4);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  4);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  4);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    true,    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
136	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  5);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  5);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  5);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    4);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
137	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  10);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  10);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  10);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    4);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
138	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  null,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  null,  numUseWithinCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  null,  numUseWithinCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    null);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
139	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  null,  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  null,  def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  null,  def);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    null);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
140	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  null,  SIDE_EFFECT_PREDICATE);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  null,  SIDE_EFFECT_PREDICATE);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  null,  SIDE_EFFECT_PREDICATE);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    null);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
141	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  numUseWithinUseCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  numUseWithinUseCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    true);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
142	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  numUseWithinCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  numUseWithinCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    true);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
143	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  t.getScopeRoot(),  false,  false);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  t.getScopeRoot(),  false,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  t.getScopeRoot(),  false,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    false,    false);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
144	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getCfgNode(),  false,  false);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getCfgNode(),  false,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getCfgNode(),  false,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    false,    false);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
145	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getParent(),  false,  false);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getParent(),  false,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getParent(),  false,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    false,    false);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
146	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  null,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  null,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  null,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    false,    false);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
147	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  compiler.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  compiler.getScopeRoot());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  compiler.getScopeRoot());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
148	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getScopeRoot(),  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getScopeRoot(),  candidates);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getScopeRoot(),  candidates);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
149	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getScopeRoot(),  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getScopeRoot(),  def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getScopeRoot(),  def);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
150	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getScopeRoot(),  candidate);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getScopeRoot(),  candidate);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getScopeRoot(),  candidate);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
151	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  false,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  false,  t.getScopeRoot());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  false,  t.getScopeRoot());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
152	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  t.getScope(),  true);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  t.getScope(),  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  t.getScope(),  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScope(),    true);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
153	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope(),  null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope(),  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope(),  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScope(),    true);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
154	[BUG]  [BUGGY]  Context.checkState(t.getScopeRoot().isFunction());  cfg.process(null,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Context.checkState(t.getScopeRoot().isFunction());  cfg.process(null,  t.getScopeRoot().getFirstChild());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Context.checkState(t.getScopeRoot().isFunction());  cfg.process(null,  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isFunction());    cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
155	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  numUseWithinCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  numUseWithinCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    true,    null);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
156	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  numUseWithinUseCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  numUseWithinUseCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    true,    null);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
157	[BUG]  [BUGGY]  ControlFlowAnalyzer  cfa  =  new  ControlFlowAnalysis(t,  false,  false);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalyzer  cfa  =  new  ControlFlowAnalysis(t,  false,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalyzer  cfa  =  new  ControlFlowAnalysis(t,  false,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    true,    true);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
158	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  candidates,  false);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  candidates,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  candidates,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    this,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
159	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  this,  null,  false);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  this,  null,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  this,  null,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    this,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
160	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  def,  false);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  def,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  def,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    this,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
161	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  true,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  true,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  true,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    this,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
162	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  inlinedNewDependencies,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  inlinedNewDependencies,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  inlinedNewDependencies,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    this,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
163	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  null,  false,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  null,  false,  t.getScopeRoot());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  null,  false,  t.getScopeRoot());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    this,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
164	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope(),  true,  false);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope(),  true,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope(),  true,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScope(),    false,    false);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
165	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope(),  true,  true);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope(),  true,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope(),  true,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScope(),    false,    false);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
166	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope(),  false,  true);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope(),  false,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope(),  false,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScope(),    false,    false);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
167	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope(),  null,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope(),  null,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScope(),  null,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScope(),    false,    false);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
168	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false,  true,  false);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false,  true,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false,  true,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
169	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  true,  false,  true);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  true,  false,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  true,  false,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    false,    true);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
170	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  true,  false,  true);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  true,  false,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  true,  false,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    false,    true);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
171	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  false,  false);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  false,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  false,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    false,    false);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
172	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  true,  false,  false);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  true,  false,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  compiler,  true,  false,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    false,    false);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
173	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  false,  null);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  false,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  false,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    false,    false);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
174	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  null,  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  null,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  null,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null,    null);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
175	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  null,  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  null,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  null,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null,    null);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
176	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  def);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null,    null);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
177	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  this);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  this);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  this);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null,    null);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
178	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  null,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  null,  def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  null,  def);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null,    null);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
179	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  def,  null,  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  def,  null,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  def,  null,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null,    null);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
180	[BUG]  [BUGGY]  cfg.process(t,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg.process(t,  t.getScopeRoot());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg.process(t,  t.getScopeRoot());	  cfg.process(null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
181	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  t.getScopeRoot(),  true,  true);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  t.getScopeRoot(),  true,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  t.getScopeRoot(),  true,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    true,    true);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
182	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getCfgNode(),  true,  true);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getCfgNode(),  true,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getCfgNode(),  true,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    true,    true);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
183	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getParent(),  true,  true);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getParent(),  true,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getParent(),  true,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    true,    true);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
184	[BUG]  [BUGGY]  cfg.process(t,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg.process(t,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg.process(t,  t.getScopeRoot().getLastChild());  reachingDef.analyze();	  cfg.process(null,    t.getScopeRoot().getLastChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
185	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild(),  reachingDef.analyze());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild(),  reachingDef.analyze());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg.process(null,  t.getScopeRoot().getLastChild(),  reachingDef.analyze());	  cfg.process(null,    t.getScopeRoot().getLastChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
186	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  null,  t.getModule());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  null,  t.getModule());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  null,  t.getModule());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
187	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  compiler.getModule());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  compiler.getModule());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  compiler.getModule());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
188	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getModule(),  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getModule(),  def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getModule(),  def);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
189	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getModule(),  compiler);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getModule(),  compiler);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getModule(),  compiler);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
190	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  candidates);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  candidates);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    this);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
191	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  candidate);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  candidate);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  candidate);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    this);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
192	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  def);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    this);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
193	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  inlinedNewDependencies);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  inlinedNewDependencies);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    this);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
194	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  numUseWithinCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  numUseWithinCfgNode  +  1);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  numUseWithinCfgNode  +  1);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
195	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  numUseWithinCfgNode,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  numUseWithinCfgNode,  def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  numUseWithinCfgNode,  def);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
196	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  numUseWithinCfgNode,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  numUseWithinCfgNode,  reachingDef);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  numUseWithinCfgNode,  reachingDef);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
197	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  useCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  useCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  useCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
198	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild(),  candidates);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg.process(null,  t.getScopeRoot().getLastChild(),  candidates);	  cfg.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
199	[BUG]  [BUGGY]  cfg.process(t,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg.process(t,  t.getScopeRoot().getLastChild());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg.process(t,  t.getScopeRoot().getLastChild());	  cfg.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
200	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  false,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  false,  numUseWithinCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  false,  numUseWithinCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
201	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  t.getScopeRoot());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  t.getScopeRoot());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
202	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  t.getScopeRoot());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  t.getScopeRoot());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
203	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getScopeRoot(),  t.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getScopeRoot(),  t.getLastChild());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getScopeRoot(),  t.getLastChild());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
204	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  null,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  null,  t.getScopeRoot());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  null,  t.getScopeRoot());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
205	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  3);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  3);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  3);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    true,    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
206	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  1,  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  1,  1);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  1,  1);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    true,    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
207	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  inlineNewDependencies);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  inlineNewDependencies);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    this);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
208	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  this,  false,  false);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  this,  false,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  this,  false,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    false);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
209	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  t.getScope());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  t.getScope());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
210	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  t.getModule());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  t.getModule());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  t.getModule());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
211	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(numUseWithinCfgNode,  true,  null,  compiler);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(numUseWithinCfgNode,  true,  null,  compiler);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(numUseWithinCfgNode,  true,  null,  compiler);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
212	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  null,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  null,  numUseWithinCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  null,  numUseWithinCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
213	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null,    null);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
214	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(candidates,  true,  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(candidates,  true,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(candidates,  true,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    true,    null);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
215	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	NodeTraversal.traverse(compiler,  cfg,  this);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
216	[BUG]  [BUGGY]  if(t.inGlobalScope())  {  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  if(t.inGlobalScope())  {  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  }  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	if(t.inGlobalScope())  {  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  }	  cfg.process(null,    t.getScopeRoot().getLastChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
217	[BUG]  [BUGGY]  if(cfg!=  null)  {  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  if(cfg!=  null)  {  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  }  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	if(cfg!=  null)  {  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  }	  cfg.process(null,    t.getScopeRoot().getLastChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
218	[BUG]  [BUGGY]  if(t.inGlobalScope())  {  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  if(t.inGlobalScope())  {  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();  }  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	if(t.inGlobalScope())  {  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();  }	  cfg.process(null,    t.getScopeRoot().getFirstChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
219	[BUG]  [BUGGY]  if(cfg!=  null)  {  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  if(cfg!=  null)  {  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();  }  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	if(cfg!=  null)  {  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();  }	  cfg.process(null,    t.getScopeRoot().getFirstChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
220	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  def,  true,  true);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  def,  true,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  def,  true,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    compiler,    true,    true);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkState(t.inGlobalScope()  ||!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Preconditions.checkState(t.inGlobalScope()  ||!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Preconditions.checkState(t.inGlobalScope()  ||!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(t.inGlobalScope()  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Preconditions.checkState(t.inGlobalScope()  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Preconditions.checkState(t.inGlobalScope()  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
223	[BUG]  [BUGGY]  Preconditions.checkState(null,  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Preconditions.checkState(null,  t.inGlobalScope());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Preconditions.checkState(null,  t.inGlobalScope());	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
224	[BUG]  [BUGGY]  Cfg  cfg  =  cfg.process(null,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Cfg  cfg  =  cfg.process(null,  t.getScopeRoot().getFirstChild());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Cfg  cfg  =  cfg.process(null,  t.getScopeRoot().getFirstChild());	  cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
225	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getCfgNode(),  true,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getCfgNode(),  true,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getCfgNode(),  true,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
226	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  0);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  0);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  0);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    1);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
227	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(this,  t,  true);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(this,  t,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(this,  t,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    true);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
228	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(def,  true,  null,  compiler);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(def,  true,  null,  compiler);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(def,  true,  null,  compiler);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    def);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
229	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  nodes,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  nodes,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  nodes,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
230	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  def);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
231	[BUG]  [BUGGY]  cfg  =  cfg.process(null,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg  =  cfg.process(null,  t.getScopeRoot().getFirstChild());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg  =  cfg.process(null,  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isFunction());    cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
232	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  &&  cfg.process(null,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  &&  cfg.process(null,  t.getScopeRoot().getFirstChild());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction()  &&  cfg.process(null,  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isFunction());    cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
233	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfg.process(null,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfg.process(null,  t.getScopeRoot().getFirstChild());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction(),  cfg.process(null,  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isFunction());    cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
234	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  true,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  true,  numUseWithinCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  true,  numUseWithinCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    true,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
235	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  true,  numUseWithinCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  true,  numUseWithinCfgNode  +  1);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  true,  numUseWithinCfgNode  +  1);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    true,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
236	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  candidates,  null,  false);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  candidates,  null,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  candidates,  null,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    this,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
237	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  nodes,  false);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  nodes,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  nodes,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    this,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
238	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  defMetadata,  false);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  defMetadata,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  defMetadata,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    def,    false);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
239	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getScopeAnalysis();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getScopeAnalysis();  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getScopeAnalysis();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
240	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getScopeNode();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getScopeNode();  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getScopeNode();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
241	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getNext());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg.process(null,  t.getScopeRoot().getNext());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg.process(null,  t.getScopeRoot().getNext());	  cfg.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
242	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis();  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis();	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
243	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  null,  t.getModule());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  null,  t.getModule());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  null,  t.getModule());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
244	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  def.getModule());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  def.getModule());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  def.getModule());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
245	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlineNewDependencies);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	NodeTraversal.traverse(compiler,  t,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
246	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  t);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  t);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  t);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
247	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  NodeTraversal.traverse(compiler,  cfg);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	NodeTraversal.traverse(compiler,  cfg);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
248	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  null,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  null,  numUseWithinUseCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  null,  numUseWithinUseCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    null);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
249	[BUG]  [BUGGY]  Cfg  cfg  =  cfg.process(null,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Cfg  cfg  =  cfg.process(null,  t.getScopeRoot());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Cfg  cfg  =  cfg.process(null,  t.getScopeRoot());	  cfg.process(null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
250	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  null,  true,  false);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  null,  true,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  null,  true,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    compiler,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
251	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  inlinedNewDependencies);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild(),  inlinedNewDependencies);	  cfg.process(null,    t.getScopeRoot().getFirstChild(),    def);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
252	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true,  numUseWithinUseCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true,  numUseWithinUseCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    false,    true);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
253	[BUG]  [BUGGY]  cfg  =  cfg.process(null,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg  =  cfg.process(null,  t.getScopeRoot().getLastChild());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg  =  cfg.process(null,  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().isFunction());    cfg.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction());    cfg.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
255	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  0);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  0);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  0);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null,    1);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
256	[BUG]  [BUGGY]  Preconditions.checkState(t.inGlobalScope()  ||!t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Preconditions.checkState(t.inGlobalScope()  ||!t.inGlobalScope());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Preconditions.checkState(t.inGlobalScope()  ||!t.inGlobalScope());	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
257	[BUG]  [BUGGY]  Preconditions.checkState(t.inGlobalScope(),  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  Preconditions.checkState(t.inGlobalScope(),  t.getScopeRoot().isFunction());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	Preconditions.checkState(t.inGlobalScope(),  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
258	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  t.getModule());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  t.getModule());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  t.getModule());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
259	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  t.getScopeRoot());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  t.getScopeRoot());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
260	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  t.getScope());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  t.getScope());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
261	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  8);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  8);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  8);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    4);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
262	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getCompiler());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getCompiler());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getCompiler());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
263	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(context,  t,  true);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(context,  t,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(context,  t,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    true);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
264	[BUG]  [BUGGY]  if(  reachingDef!=  null)  {  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  if(  reachingDef!=  null)  {  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  }  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	if(  reachingDef!=  null)  {  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  }	  cfg.process(null,    t.getScopeRoot().getLastChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
265	[BUG]  [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  }  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	if(t.getScopeRoot()!=  null)  {  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  }	  cfg.process(null,    t.getScopeRoot().getLastChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
266	[BUG]  [BUGGY]  if(t.inGlobalScope())  {  Preconditions.checkState(t.getScopeRoot().isFunction());  cfg.process(null,  t.getScopeRoot().getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  if(t.inGlobalScope())  {  Preconditions.checkState(t.getScopeRoot().isFunction());  cfg.process(null,  t.getScopeRoot().getLastChild());  }  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	if(t.inGlobalScope())  {  Preconditions.checkState(t.getScopeRoot().isFunction());  cfg.process(null,  t.getScopeRoot().getLastChild());  }	  Preconditions.checkState(t.getScopeRoot().isFunction());    cfg.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
267	[BUG]  [BUGGY]  if(t.inGlobalScope())  {  Preconditions.checkState(t.getScopeRoot().isFunction());  cfg.process(null,  t.getScopeRoot().getLastChild());  }  else  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  if(t.inGlobalScope())  {  Preconditions.checkState(t.getScopeRoot().isFunction());  cfg.process(null,  t.getScopeRoot().getLastChild());  }  else  {  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	if(t.inGlobalScope())  {  Preconditions.checkState(t.getScopeRoot().isFunction());  cfg.process(null,  t.getScopeRoot().getLastChild());  }  else  {	  Preconditions.checkState(t.getScopeRoot().isFunction());    cfg.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
268	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getConfig();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getConfig();  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getConfig();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
269	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getControlFlowGraph();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getControlFlowGraph();  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getControlFlowGraph();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
270	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getFunction();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getFunction();  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getFunction();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
271	[BUG]  [BUGGY]  cfg  =  cfg.process(null,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg  =  cfg.process(null,  t.getScopeRoot());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg  =  cfg.process(null,  t.getScopeRoot());	  cfg.process(null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
272	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  cfg,  true);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  cfg,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  cfg,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    null,    true);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
273	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  cfg,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  cfg,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  cfg,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
274	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  t.getScopeRoot(),  true,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  t.getScopeRoot(),  true,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  t.getScopeRoot(),  true,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
275	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild(),  t.getScopeRoot());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg.process(null,  t.getScopeRoot().getLastChild(),  t.getScopeRoot());	  cfg.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
276	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  4);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  4);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  4);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    true,    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
277	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  false,  null);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  false,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  false,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
278	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(context,  t,  true,  false);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(context,  t,  true,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(context,  t,  true,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
279	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  inlineCfgNode,  false);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  inlineCfgNode,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  this,  inlineCfgNode,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    this,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
280	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  t.getModule());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  t.getModule());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  true,  null,  t.getModule());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
281	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  null,  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  null,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  null,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    true,    true);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
282	[BUG]  [BUGGY]  if(  reachingDef!=  null)  {  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  if(  reachingDef!=  null)  {  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();  }  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	if(  reachingDef!=  null)  {  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();  }	  cfg.process(null,    t.getScopeRoot().getFirstChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
283	[BUG]  [BUGGY]  cfg  =  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg  =  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg  =  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();	  cfg.process(null,    t.getScopeRoot().getFirstChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
284	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  t.getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  t.getLastChild());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild(),  t.getLastChild());	  cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
285	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  def,  null,  true);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  def,  null,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  def,  null,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    def);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
286	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  t);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  t);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  t);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
287	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  cfg);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  cfg);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  cfg);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
288	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  t.getModule());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  t.getModule());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  null,  t.getModule());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    null);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
289	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  def);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	NodeTraversal.traverse(compiler,  t,  this,  def);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
290	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(context,  t,  true,  true);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(context,  t,  true,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(context,  t,  true,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    true,    true);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
291	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  int  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  int  numUseWithinCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  int  numUseWithinCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
292	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  inlineCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  inlineCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
293	[BUG]  [BUGGY]  ControlFlowAnalyzer  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalyzer  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalyzer  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    true);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
294	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  true,  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  true,  t.inGlobalScope());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t.getScopeRoot(),  true,  t.inGlobalScope());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t.getScopeRoot(),    true);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
295	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  cfg,  true,  false);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  cfg,  true,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  cfg,  true,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    compiler,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
296	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  varName,  true,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  varName,  true,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  varName,  true,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    compiler,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
297	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  _config,  true,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  _config,  true,  false);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  _config,  true,  false);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    compiler,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
298	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  defMetadata);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  defMetadata);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild(),  defMetadata);	  cfg.process(null,    t.getScopeRoot().getFirstChild(),    def);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
299	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  true,  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  true,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  true,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    true,    true);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
300	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  null,  true);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  null,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  null,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    null);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
301	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(context,  t,  true,  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(context,  t,  true,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(context,  t,  true,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    true,    null);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
302	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(type,  true,  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(type,  true,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(type,  true,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    true,    null);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
303	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  false,  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  false,  null);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  false,  null);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    false,    true,    false);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
304	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  int  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  int  numUseWithinCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  int  numUseWithinCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    true,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
305	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  numUseWithinCfgNode,  useCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  numUseWithinCfgNode,  useCfgNode);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  false,  true,  numUseWithinCfgNode,  useCfgNode);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    false,    true,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
306	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  varName,  true,  true);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  varName,  true,  true);  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(t,  varName,  true,  true);	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(t,    compiler,    true,    true);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
307	[BUG]  [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getScopeRoot(),  t.getModule());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }        [BUGGY]  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getScopeRoot(),  t.getModule());  [BUGGY]        Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  true,  null,  t.getScopeRoot(),  t.getModule());	  ControlFlowAnalysis    cfa    =    new    ControlFlowAnalysis(compiler,    true,    null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
