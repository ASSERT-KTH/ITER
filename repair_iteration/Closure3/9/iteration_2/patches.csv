bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()!=  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	175	None	replace
2	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	175	None	replace
3	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  &&  n.getChildCount()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION  &&  n.getChildCount()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.FUNCTION  &&  n.getChildCount()!=  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	175	None	replace
4	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  >=  Token.NAME);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  >=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  >=  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	175	None	replace
5	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  cur.getChildCount()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  cur.getChildCount()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  cur.getChildCount()!=  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	175	None	replace
6	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  >=  Token.NAME);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  >=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  >=  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	175	None	replace
7	[BUG]  [BUGGY]  else  if(predicate.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()!=  Token.FUNCTION)  {  return  false;  }	  else    if(p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	190	None	replace
8	[BUG]  [BUGGY]  else  if(cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  else    if(p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	190	None	replace
9	[BUG]  [BUGGY]  else  if(p.getType()  >=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  >=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  >=  Token.FUNCTION)  {  return  false;  }	  else    if(p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	190	None	replace
10	[BUG]  [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    &&    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
11	[BUG]  [BUGGY]  if(p.getType()!=  Token.VAR  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.VAR  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.VAR  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    &&    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
12	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.VAR)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    &&    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
13	[BUG]  [BUGGY]  return!predicate.isLeftOf(n)||!predicate.isEmpty();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n)||!predicate.isEmpty();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n)||!predicate.isEmpty();	  return!predicate.isLeftOf(cur)||!predicate.isEmpty();    	non-compiled	[CE]  <identifier>  expected	124	None	replace
14	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(cur))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(cur))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(cur))  {  return  false;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    if(!predicate.apply(c))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
15	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(cur))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(cur))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(cur))  {  return  false;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    if(!predicate.apply(c))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
16	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(c))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(c))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(c))  {  return  false;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    if(!predicate.apply(c))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
17	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    if(!predicate.apply(c))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
18	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(cur))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(cur))  {  return  true;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    if(!predicate.apply(c))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
19	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(c))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(c))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(c))  {  return  true;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    if(!predicate.apply(c))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
20	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(cur))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(cur))  {  return  true;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    if(!predicate.apply(c))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
21	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  return  false;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  return  false;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  return  false;	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)return    false;    }    	non-compiled	[CE]  <identifier>  expected	169	None	replace
22	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  return  false;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  return  false;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  return  false;	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)return    false;    }    	non-compiled	[CE]  <identifier>  expected	169	None	replace
23	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)return    false;    }    	non-compiled	[CE]  <identifier>  expected	169	None	replace
24	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.GETPROP)  return  false;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.GETPROP)  return  false;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.GETPROP)  return  false;	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)return    false;    }    	non-compiled	[CE]  <identifier>  expected	169	None	replace
25	[BUG]  [BUGGY]  parent  ==  cur.getType()  ||  cur.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  cur.getType()  ||  cur.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  cur.getType()  ||  cur.getType()  ==  Token.FUNCTION)  {  return  true;  }	  if(cur.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
26	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  if(cur.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
27	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	  if(cur.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
28	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.VAR)  {  return  true;  }	  if(cur.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
29	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
30	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
31	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
32	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
33	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
34	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
35	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.VAR)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	185	None	replace
36	[BUG]  [BUGGY]  ||  p.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  p.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  p.getType()  ==  Token.VAR)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	185	None	replace
37	[BUG]  [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	185	None	replace
38	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	185	None	replace
39	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.NAME);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
40	[BUG]  [BUGGY]  return(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.NAME);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
41	[BUG]  [BUGGY]  return(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.NAME);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
42	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  >=  Token.NAME);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  >=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  >=  Token.NAME);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
43	[BUG]  [BUGGY]  return(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.NAME);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
44	[BUG]  [BUGGY]  return  checkLeftOf(n,  expressionRoot,  predicate,  def);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return  checkLeftOf(n,  expressionRoot,  predicate,  def);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return  checkLeftOf(n,  expressionRoot,  predicate,  def);	  return    checkLeftOf(n,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	195	None	replace
45	[BUG]  [BUGGY]  return  checkLeftOf(n,  expressionRoot,  predicate,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return  checkLeftOf(n,  expressionRoot,  predicate,  numUseWithinUseCfgNode);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return  checkLeftOf(n,  expressionRoot,  predicate,  numUseWithinUseCfgNode);	  return    checkLeftOf(n,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	195	None	replace
46	[BUG]  [BUGGY]  return  checkLeftOf(cur,  expressionRoot,  predicate);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return  checkLeftOf(cur,  expressionRoot,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return  checkLeftOf(cur,  expressionRoot,  predicate);	  return    checkLeftOf(n,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	195	None	replace
47	[BUG]  [BUGGY]  return  checkLeftOf(n,  expressionRoot,  predicate,  cfgNode);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return  checkLeftOf(n,  expressionRoot,  predicate,  cfgNode);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return  checkLeftOf(n,  expressionRoot,  predicate,  cfgNode);	  return    checkLeftOf(n,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	195	None	replace
48	[BUG]  [BUGGY]  return  checkLeftOf(n,  expressionRoot,  predicate,  null);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return  checkLeftOf(n,  expressionRoot,  predicate,  null);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return  checkLeftOf(n,  expressionRoot,  predicate,  null);	  return    checkLeftOf(n,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	195	None	replace
49	[BUG]  [BUGGY]  return  checkLeftOf(n,  expressionRoot,  predicate,  p);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return  checkLeftOf(n,  expressionRoot,  predicate,  p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return  checkLeftOf(n,  expressionRoot,  predicate,  p);	  return    checkLeftOf(n,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	195	None	replace
50	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.BLOCK)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    &&    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
51	[BUG]  [BUGGY]  &&  p.getType()!=  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  &&  p.getType()!=  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	&&  p.getType()!=  Token.BLOCK)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    &&    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
52	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  false;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
53	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  true;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  true;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
54	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  return  true;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  return  true;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
55	[BUG]  [BUGGY]  Predicate  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  true;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Predicate  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Predicate  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  true;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
56	[BUG]  [BUGGY]  Predicate  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  false;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Predicate  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Predicate  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  false;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
57	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
58	[BUG]  [BUGGY]  ||  cur.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  cur.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  cur.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
59	[BUG]  [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
60	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  &&  cur.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
61	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  ||  cur.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
62	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.NAME);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
63	[BUG]  [BUGGY]  return(cur.getType()!=  Token.FUNCTION  &&  cur.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()!=  Token.FUNCTION  &&  cur.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()!=  Token.FUNCTION  &&  cur.getType()  ==  Token.NAME);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
64	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.NAME,  predicate);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.NAME,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.NAME,  predicate);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
65	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  return  false;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    return    false;    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
66	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  return  false;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    return    false;    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
67	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    return    false;    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
68	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    &&    p.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
69	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    &&    p.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
70	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.NAME)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    &&    p.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
71	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.GETPROP)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	201	None	replace
72	[BUG]  [BUGGY]  if(p.getType()  ==  Token.GETPROP  ||  p.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.GETPROP  ||  p.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.GETPROP  ||  p.getType()  ==  Token.FUNCTION)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	201	None	replace
73	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	201	None	replace
74	[BUG]  [BUGGY]  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  p.getType()  ==  Token.GETPROP)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	201	None	replace
75	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	201	None	replace
76	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
77	[BUG]  [BUGGY]  Definition  def  =  predicate.get(cur);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  predicate.get(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  predicate.get(cur);	  Definition    def    =    defMetadata.get(cur);    	non-compiled	[CE]  <identifier>  expected	206	None	replace
78	[BUG]  [BUGGY]  Definition  def  =  cfgNode.getDefinitions().get(cur);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  cfgNode.getDefinitions().get(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  cfgNode.getDefinitions().get(cur);	  Definition    def    =    defMetadata.get(cur);    	non-compiled	[CE]  <identifier>  expected	206	None	replace
79	[BUG]  [BUGGY]  Definition  def  =  cfgNode.get(cur);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  cfgNode.get(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  cfgNode.get(cur);	  Definition    def    =    defMetadata.get(cur);    	non-compiled	[CE]  <identifier>  expected	206	None	replace
80	[BUG]  [BUGGY]  Definition  def  =  defMetadata.remove(cur);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  defMetadata.remove(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  defMetadata.remove(cur);	  Definition    def    =    defMetadata.get(cur);    	non-compiled	[CE]  <identifier>  expected	206	None	replace
81	[BUG]  [BUGGY]  Definition  def  =  defMetadata.get(p);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  defMetadata.get(p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  defMetadata.get(p);	  Definition    def    =    defMetadata.get(cur);    	non-compiled	[CE]  <identifier>  expected	206	None	replace
82	[BUG]  [BUGGY]  Definition  def  =  cfgNode.getDefinitions(cur);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  cfgNode.getDefinitions(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  cfgNode.getDefinitions(cur);	  Definition    def    =    defMetadata.get(cur);    	non-compiled	[CE]  <identifier>  expected	206	None	replace
83	[BUG]  [BUGGY]  Definition  def  =  defMetadata.contains(p);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  defMetadata.contains(p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  defMetadata.contains(p);	  if(!defMetadata.contains(p))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
84	[BUG]  [BUGGY]  Definition  p  =  defMetadata.get(p);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  p  =  defMetadata.get(p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  p  =  defMetadata.get(p);	  if(!defMetadata.contains(p))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
85	[BUG]  [BUGGY]  Predicate  p  =  defMetadata.get(p);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Predicate  p  =  defMetadata.get(p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Predicate  p  =  defMetadata.get(p);	  if(!defMetadata.contains(p))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
86	[BUG]  [BUGGY]  Definition  p  =  defMetadata.contains(p);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  p  =  defMetadata.contains(p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  p  =  defMetadata.contains(p);	  if(!defMetadata.contains(p))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
87	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	180	None	replace
88	[BUG]  [BUGGY]  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	180	None	replace
89	[BUG]  [BUGGY]  Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	180	None	replace
90	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.EXPR_RESULT  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.EXPR_RESULT  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.EXPR_RESULT  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	180	None	replace
91	[BUG]  [BUGGY]  &&  cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  &&  cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	&&  cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	180	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(!defMetadata.contains(p));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Preconditions.checkState(!defMetadata.contains(p));  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Preconditions.checkState(!defMetadata.contains(p));	  Preconditions.checkState(!defMetadata.contains(cur));    	non-compiled	[CE]  <identifier>  expected	133	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(!defMetadata.contains(cur,  predicate));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Preconditions.checkState(!defMetadata.contains(cur,  predicate));  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Preconditions.checkState(!defMetadata.contains(cur,  predicate));	  Preconditions.checkState(!defMetadata.contains(cur));    	non-compiled	[CE]  <identifier>  expected	133	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(!defMetadata.contains(cur),  predicate);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Preconditions.checkState(!defMetadata.contains(cur),  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Preconditions.checkState(!defMetadata.contains(cur),  predicate);	  Preconditions.checkState(!defMetadata.contains(cur));    	non-compiled	[CE]  <identifier>  expected	133	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(!defMetadata.contains(predicate));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Preconditions.checkState(!defMetadata.contains(predicate));  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Preconditions.checkState(!defMetadata.contains(predicate));	  Preconditions.checkState(!defMetadata.contains(cur));    	non-compiled	[CE]  <identifier>  expected	133	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(!defMetadata.containsKey(cur));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Preconditions.checkState(!defMetadata.containsKey(cur));  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Preconditions.checkState(!defMetadata.containsKey(cur));	  Preconditions.checkState(!defMetadata.contains(cur));    	non-compiled	[CE]  <identifier>  expected	133	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(!defMetadata.contains(cur  +  1));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Preconditions.checkState(!defMetadata.contains(cur  +  1));  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Preconditions.checkState(!defMetadata.contains(cur  +  1));	  Preconditions.checkState(!defMetadata.contains(cur));    	non-compiled	[CE]  <identifier>  expected	133	None	replace
98	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
99	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)&&!predicate.    	non-compiled	[CE]  <identifier>  expected	168	None	replace
100	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot)&&!predicate.  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot)&&!predicate.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot)&&!predicate.	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)&&!predicate.    	non-compiled	[CE]  <identifier>  expected	168	None	replace
101	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
102	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
103	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
104	[BUG]  [BUGGY]  Context.checkState(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
105	[BUG]  [BUGGY]  parent!=  if(p.getType()!=  Token.NAME)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent!=  if(p.getType()!=  Token.NAME)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent!=  if(p.getType()!=  Token.NAME)  {  return  true;  }	  if(p.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	155	None	replace
106	[BUG]  [BUGGY]  if(p.getType()  ==  Token.VAR  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.VAR  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.VAR  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    &&    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
107	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
108	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  n.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  n.getType()  ==  Token.VAR)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
109	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
110	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
111	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR)  {  return  true;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
112	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
113	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
114	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
115	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
116	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
117	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION)&&  n.getType()!=  Token.VAR;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION)&&  n.getType()!=  Token.VAR;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION)&&  n.getType()!=  Token.VAR;	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
118	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.GETPROP)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	171	None	replace
119	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	171	None	replace
120	[BUG]  [BUGGY]  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  p.getType()!=  Token.GETPROP)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	171	None	replace
121	[BUG]  [BUGGY]  if(p.getType()!=  Token.GETPROP  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.GETPROP  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.GETPROP  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	171	None	replace
122	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.GETPROP)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	171	None	replace
123	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  &&  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
124	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
125	[BUG]  [BUGGY]  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
126	[BUG]  [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
127	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  &&  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
128	[BUG]  [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.FUNCTION);	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
129	[BUG]  [BUGGY]  if(p.getType()  ==  Token.GETPROP  &&  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.GETPROP  &&  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.GETPROP  &&  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.GETPROP    ||    p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
130	[BUG]  [BUGGY]  if(p.getType()!=  Token.GETPROP  &&  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.GETPROP  &&  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.GETPROP  &&  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.GETPROP    ||    p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
131	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.GETPROP  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.GETPROP  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.GETPROP  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.GETPROP    ||    p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
132	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.GETPROP  ||  p.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.GETPROP  ||  p.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.GETPROP  ||  p.getType()  ==  Token.FUNCTION);	  if(p.getType()    ==    Token.GETPROP    ||    p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
133	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	187	None	replace
134	[BUG]  [BUGGY]  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  p.getType()  ==  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	187	None	replace
135	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	187	None	replace
136	[BUG]  [BUGGY]  if(p.getType()  ==  Token.CALL  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.CALL  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.CALL  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	187	None	replace
137	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	187	None	replace
138	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  predicate.hasChildren())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  predicate.hasChildren())  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  &&  predicate.hasChildren())  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.hasChildren())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
139	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.hasChildren())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
140	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.hasChildren())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
141	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  predicate.hasChildren())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  predicate.hasChildren())  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  &&  predicate.hasChildren())  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.hasChildren())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
142	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.hasChildren())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.hasChildren())  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  predicate.hasChildren())  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.hasChildren())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
143	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  cur.hasChildren())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  cur.hasChildren())  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  cur.hasChildren())  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.hasChildren())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
144	[BUG]  [BUGGY]  Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }	  for(Node    c    =    cur.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
145	[BUG]  [BUGGY]  For(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  For(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	For(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }	  for(Node    c    =    cur.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
146	[BUG]  [BUGGY]  NodeUtil.removeChild(cur,  predicate);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  NodeUtil.removeChild(cur,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	NodeUtil.removeChild(cur,  predicate);	  for(Node    c    =    cur.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
147	[BUG]  [BUGGY]  Predicate  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Predicate  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Predicate  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }	  for(Node    c    =    cur.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
148	[BUG]  [BUGGY]  Node  c  =  cur.getFirstChild();  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  cur.getFirstChild();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  cur.getFirstChild();	  for(Node    c    =    cur.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
149	[BUG]  [BUGGY]  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  predicate);  }  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  predicate);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  predicate);  }	  for(Node    c    =    cur.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
150	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR  &&  n.getType()!=  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR  &&  n.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.VAR  &&  n.getType()!=  Token.FUNCTION);	  return(n.getType()    ==    Token.VAR    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
151	[BUG]  [BUGGY]  return(n.getType()!=  Token.VAR  &&  n.getType()!=  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.VAR  &&  n.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.VAR  &&  n.getType()!=  Token.FUNCTION);	  return(n.getType()    ==    Token.VAR    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
152	[BUG]  [BUGGY]  return(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.VAR    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
153	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR  ||  cur.getType()!=  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR  ||  cur.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.VAR  ||  cur.getType()!=  Token.FUNCTION);	  return(n.getType()    ==    Token.VAR    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
154	[BUG]  [BUGGY]  if(p.getType()  ==  Token.EMPTY  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.EMPTY  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.EMPTY  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.EMPTY    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	202	None	replace
155	[BUG]  [BUGGY]  if(p.getType()  ==  Token.EMPTY  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.EMPTY  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.EMPTY  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.EMPTY    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	202	None	replace
156	[BUG]  [BUGGY]  if(p.getType()!=  Token.EMPTY  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.EMPTY  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.EMPTY  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.EMPTY    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	202	None	replace
157	[BUG]  [BUGGY]  p.getType()  ==  Token.EMPTY  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  p.getType()  ==  Token.EMPTY  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	p.getType()  ==  Token.EMPTY  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.EMPTY    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	202	None	replace
158	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.EMPTY  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.EMPTY  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.EMPTY  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.EMPTY    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	202	None	replace
159	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  c);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  c);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(p,    c);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
160	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  predicate);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  predicate);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  predicate);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(p,    c);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
161	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  cur);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  cur);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  cur);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(p,    c);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
162	[BUG]  [BUGGY]  Predicate  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  c);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Predicate  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Predicate  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  c);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(p,    c);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
163	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  predicate);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  predicate);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  predicate);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(p,    c);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
164	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.contains(p);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.contains(p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  defMetadata.contains(p);	  DefinedDependency    reachingUses    =    defMetadata.contains(cur);    	non-compiled	[CE]  <identifier>  expected	132	None	replace
165	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.remove(cur);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.remove(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  defMetadata.remove(cur);	  DefinedDependency    reachingUses    =    defMetadata.contains(cur);    	non-compiled	[CE]  <identifier>  expected	132	None	replace
166	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.contains(predicate);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.contains(predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  defMetadata.contains(predicate);	  DefinedDependency    reachingUses    =    defMetadata.contains(cur);    	non-compiled	[CE]  <identifier>  expected	132	None	replace
167	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.get(p);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.get(p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  defMetadata.get(p);	  DefinedDependency    reachingUses    =    defMetadata.contains(cur);    	non-compiled	[CE]  <identifier>  expected	132	None	replace
168	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.containsKey(cur);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.containsKey(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  defMetadata.containsKey(cur);	  DefinedDependency    reachingUses    =    defMetadata.contains(cur);    	non-compiled	[CE]  <identifier>  expected	132	None	replace
169	[BUG]  [BUGGY]  return!predicate.isLeftOf(cur)&&!predicate.contains(expressionRoot);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(cur)&&!predicate.contains(expressionRoot);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(cur)&&!predicate.contains(expressionRoot);	  return!predicate.isLeftOf(cur)&&!predicate.contains(cur);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
170	[BUG]  [BUGGY]  return!predicate.isLeftOf(cur)&&!predicate.contains(n);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(cur)&&!predicate.contains(n);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(cur)&&!predicate.contains(n);	  return!predicate.isLeftOf(cur)&&!predicate.contains(cur);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
171	[BUG]  [BUGGY]  return!predicate.isLeftOf(cur)&&!predicate.contains(p);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(cur)&&!predicate.contains(p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(cur)&&!predicate.contains(p);	  return!predicate.isLeftOf(cur)&&!predicate.contains(cur);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
172	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
173	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
174	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
175	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
176	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
177	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
178	[BUG]  [BUGGY]  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  cur.getType()!=  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
179	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
180	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
181	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.GETPROP  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.GETPROP  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.GETPROP  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
182	[BUG]  [BUGGY]  Context.checkState(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
183	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getType()!=  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  &&  n.getType()!=  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
184	[BUG]  [BUGGY]  return(n.getType()!=  Token.NAME  &&  n.getType()!=  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.NAME  &&  n.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.NAME  &&  n.getType()!=  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
185	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
186	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getType()  >=  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getType()  >=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  &&  n.getType()  >=  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
187	[BUG]  [BUGGY]  ||  predicate.getType()!=  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  predicate.getType()!=  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  predicate.getType()!=  Token.BLOCK)  {  return  false;  }	  ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
188	[BUG]  [BUGGY]  ||  cur.getType()!=  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  cur.getType()!=  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  cur.getType()!=  Token.BLOCK)  {  return  false;  }	  ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
189	[BUG]  [BUGGY]  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  p.getType()  ==  Token.BLOCK)  {  return  false;  }	  ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
190	[BUG]  [BUGGY]  ||  p.getType()!=  Token.BLOCK)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  p.getType()!=  Token.BLOCK)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  p.getType()!=  Token.BLOCK)  {  return  true;  }	  ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
191	[BUG]  [BUGGY]  ||  predicate.getType()  ==  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  predicate.getType()  ==  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  predicate.getType()  ==  Token.BLOCK)  {  return  false;  }	  ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
192	[BUG]  [BUGGY]  ||  p.getType()  >=  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  p.getType()  >=  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  p.getType()  >=  Token.BLOCK)  {  return  false;  }	  ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
193	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    predicate.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
194	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  &&  predicate.getType()!=  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    predicate.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
195	[BUG]  [BUGGY]  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    predicate.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
196	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  &&  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  &&  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  &&  predicate.getType()!=  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    predicate.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
197	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    predicate.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
198	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    predicate.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
199	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
200	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
201	[BUG]  [BUGGY]  return(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
202	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  predicate.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  predicate.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  predicate.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
203	[BUG]  [BUGGY]  return(predicate.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
204	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
205	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }	  Context.checkState(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
206	[BUG]  [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }	  Context.checkState(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
207	[BUG]  [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK)  {  return  false;  }	  Context.checkState(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
208	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK)  {  return  false;  }	  Context.checkState(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
209	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }	  Context.checkState(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
210	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }	  Context.checkState(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
211	[BUG]  [BUGGY]  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.VAR    ||    p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
212	[BUG]  [BUGGY]  if(p.getType()!=  Token.VAR  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.VAR  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.VAR  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.VAR    ||    p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
213	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	198	None	replace
214	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	198	None	replace
215	[BUG]  [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	198	None	replace
216	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	198	None	replace
217	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(n))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(n))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(n))  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.apply(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	191	None	replace
218	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  predicate.apply(n))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  predicate.apply(n))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  &&  predicate.apply(n))  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.apply(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	191	None	replace
219	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.apply(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	191	None	replace
220	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.apply(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	191	None	replace
221	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(p))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(p))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(p))  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.apply(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	191	None	replace
222	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  predicate.apply(n))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  predicate.apply(n))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  &&  predicate.apply(n))  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.apply(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	191	None	replace
223	[BUG]  [BUGGY]  else  if(n.getType()  ==  Token.FUNCTION  ||  predicate.apply(p))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(n.getType()  ==  Token.FUNCTION  ||  predicate.apply(p))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(n.getType()  ==  Token.FUNCTION  ||  predicate.apply(p))  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.apply(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	191	None	replace
224	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  &&  p.getType()!=  Token.VAR)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	157	None	replace
225	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  &&  p.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  &&  p.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  &&  p.getType()!=  Token.VAR)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	157	None	replace
226	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.VAR)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	157	None	replace
227	[BUG]  [BUGGY]  Definition  def  =  defMetadata.contains(n);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  defMetadata.contains(n);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  defMetadata.contains(n);	  if(!defMetadata.contains(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	205	None	replace
228	[BUG]  [BUGGY]  if(!defMetadata.contains(n))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(!defMetadata.contains(n))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(!defMetadata.contains(n))  {  return  true;  }	  if(!defMetadata.contains(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	205	None	replace
229	[BUG]  [BUGGY]  Definition  def  =  defMetadata.get(n);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  defMetadata.get(n);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  defMetadata.get(n);	  if(!defMetadata.contains(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	205	None	replace
230	[BUG]  [BUGGY]  n  =  defMetadata.contains(n);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  n  =  defMetadata.contains(n);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	n  =  defMetadata.contains(n);	  if(!defMetadata.contains(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	205	None	replace
231	[BUG]  [BUGGY]  return(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
232	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  predicate.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  predicate.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  predicate.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
233	[BUG]  [BUGGY]  return(predicate.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
234	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  &&  predicate.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION  &&  predicate.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.FUNCTION  &&  predicate.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
235	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
236	[BUG]  [BUGGY]  defMetadata.add(cur);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  defMetadata.add(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	defMetadata.add(cur);	  defMetadata.contains(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
237	[BUG]  [BUGGY]  defMetadata.contains(p))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  defMetadata.contains(p))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	defMetadata.contains(p))  {  return  true;  }	  defMetadata.contains(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
238	[BUG]  [BUGGY]  defMetadata.contains(p))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  defMetadata.contains(p))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	defMetadata.contains(p))  {  return  false;  }	  defMetadata.contains(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
239	[BUG]  [BUGGY]  defMetadata.contains(predicate))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  defMetadata.contains(predicate))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	defMetadata.contains(predicate))  {  return  false;  }	  defMetadata.contains(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
240	[BUG]  [BUGGY]  defMetadata.contains(predicate))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  defMetadata.contains(predicate))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	defMetadata.contains(predicate))  {  return  true;  }	  defMetadata.contains(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
241	[BUG]  [BUGGY]  defMetadata.add(cur))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  defMetadata.add(cur))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	defMetadata.add(cur))  {  return  false;  }	  defMetadata.contains(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
242	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME)&&  n.getType()  ==  Token.FUNCTION;	  return(n.getType()    ==    Token.NAME    &&    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
243	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)||  n.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME)||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME)||  n.getType()  ==  Token.FUNCTION);	  return(n.getType()!=    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
244	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION)&&  n.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION)&&  n.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION)&&  n.getType()  ==  Token.NAME);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
245	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.VAR)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	181	None	replace
246	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.VAR)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	181	None	replace
247	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	181	None	replace
248	[BUG]  [BUGGY]  ||  p.getType()!=  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  p.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  p.getType()!=  Token.VAR)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	181	None	replace
249	[BUG]  [BUGGY]  if(defMetadata.contains(cur)||  defMetadata.contains(cur))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(defMetadata.contains(cur)||  defMetadata.contains(cur))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(defMetadata.contains(cur)||  defMetadata.contains(cur))  {  return  false;  }	  if(defMetadata.contains(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	204	None	replace
250	[BUG]  [BUGGY]  if(defMetadata.contains(cur)||  defMetadata.contains(p))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(defMetadata.contains(cur)||  defMetadata.contains(p))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(defMetadata.contains(cur)||  defMetadata.contains(p))  {  return  false;  }	  if(defMetadata.contains(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	204	None	replace
251	[BUG]  [BUGGY]  if(defMetadata.contains(p))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(defMetadata.contains(p))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(defMetadata.contains(p))  {  return  false;  }	  if(defMetadata.contains(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	204	None	replace
252	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
253	[BUG]  [BUGGY]  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  cur.getType()  ==  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
254	[BUG]  [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
255	[BUG]  [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.VAR);	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
256	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  &&  cur.getType()  ==  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
257	[BUG]  [BUGGY]  Context.checkState(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.VAR)  {  return  false;  }	  if(p.getType()!=    Token.NAME    ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
258	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  Context.checkState(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
259	[BUG]  [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  Context.checkState(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
260	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }	  Context.checkState(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
261	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)return  false;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)return  false;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)return  false;	  Context.checkState(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
262	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  Context.checkState(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
263	[BUG]  [BUGGY]  if(p.getType()  ==  Token.GETPROP  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.GETPROP  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.GETPROP  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    &&    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
264	[BUG]  [BUGGY]  if(p.getType()!=  Token.GETPROP  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.GETPROP  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.GETPROP  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    &&    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
265	[BUG]  [BUGGY]  parent!=  if(p.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent!=  if(p.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent!=  if(p.getType()!=  Token.FUNCTION)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
266	[BUG]  [BUGGY]  parent  ==  if(p.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  if(p.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  if(p.getType()!=  Token.FUNCTION)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
267	[BUG]  [BUGGY]  parent!=  if(p.getType()!=  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent!=  if(p.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent!=  if(p.getType()!=  Token.NAME)  {  return  false;  }	  if(p.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	193	None	replace
268	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
269	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  &&  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
270	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
271	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
272	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
273	[BUG]  [BUGGY]  parent  ==  cur.getType()  &&  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  cur.getType()  &&  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  cur.getType()  &&  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }	  parent    ==    cur.getType()    ||    cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
274	[BUG]  [BUGGY]  parent  ==  cur.getType()  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  cur.getType()  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  cur.getType()  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  parent    ==    cur.getType()    ||    cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
275	[BUG]  [BUGGY]  parent  ==  cur.getType()  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  cur.getType()  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  cur.getType()  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;	  parent    ==    cur.getType()    ||    cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
276	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
277	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  &&  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
278	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  &&  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
279	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
280	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
281	[BUG]  [BUGGY]  p.getType()!=  Token.GETPROP  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  p.getType()!=  Token.GETPROP  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	p.getType()!=  Token.GETPROP  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()!=    Token.GETPROP    ||    p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
282	[BUG]  [BUGGY]  parent  ==  p.getType()  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  p.getType()  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  p.getType()  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }	  if(p.getType()!=    Token.GETPROP    ||    p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
283	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.NAME)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.NAME)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.NAME)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	152	None	replace
284	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.NAME)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.NAME)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.NAME)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	152	None	replace
285	[BUG]  [BUGGY]  ||  p.getType()!=  Token.NAME)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  p.getType()!=  Token.NAME)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  p.getType()!=  Token.NAME)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	152	None	replace
286	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	152	None	replace
287	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.NAME)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.NAME)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.NAME)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	152	None	replace
288	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
289	[BUG]  [BUGGY]  Context.checkState(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
290	[BUG]  [BUGGY]  DefinedVariableUse.checkLeftOf(cur,  expressionRoot,  predicate);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedVariableUse.checkLeftOf(cur,  expressionRoot,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedVariableUse.checkLeftOf(cur,  expressionRoot,  predicate);	  if(!defMetadata.contains(p))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
291	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  &&  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	156	None	replace
292	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  &&  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  &&  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  &&  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	156	None	replace
293	[BUG]  [BUGGY]  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	156	None	replace
294	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	156	None	replace
295	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	156	None	replace
296	[BUG]  [BUGGY]  Context.checkState(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.EXPR_RESULT);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.EXPR_RESULT);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.EXPR_RESULT);	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	156	None	replace
297	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()    ==    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
298	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.BLOCK)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()    ==    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
299	[BUG]  [BUGGY]  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  true;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  true;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
300	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  false;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  false;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
301	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  true;  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  true;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
302	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  false;  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  false;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
303	[BUG]  [BUGGY]  NodeUtil.removeChild(cur,  c);  return  true;  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  NodeUtil.removeChild(cur,  c);  return  true;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	NodeUtil.removeChild(cur,  c);  return  true;	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
304	[BUG]  [BUGGY]  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  false;  }  [CE]  <identifier>  expected  [FE]                                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  false;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
305	[BUG]  [BUGGY]  parent!=  if(n.getType()!=  Token.NAME)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent!=  if(n.getType()!=  Token.NAME)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent!=  if(n.getType()!=  Token.NAME)  {  return  true;  }	  if(n.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
306	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
307	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
308	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
309	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
310	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
311	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
312	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
313	[BUG]  [BUGGY]  else  if(cur.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(cur.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(cur.getType()  ==  Token.FUNCTION)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
314	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.NAME)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
315	[BUG]  [BUGGY]  ||  cur.getType()!=  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  cur.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  cur.getType()!=  Token.NAME)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
316	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.NAME)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
317	[BUG]  [BUGGY]  Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.NAME)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
318	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.NAME)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
319	[BUG]  [BUGGY]  else  if(predicate.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()!=  Token.FUNCTION)  {  return  true;  }	  else    if(p.getType()!=    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
320	[BUG]  [BUGGY]  else  if(cur.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(cur.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(cur.getType()!=  Token.FUNCTION)  {  return  true;  }	  else    if(p.getType()!=    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
321	[BUG]  [BUGGY]  else  if(n.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(n.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(n.getType()!=  Token.FUNCTION)  {  return  true;  }	  else    if(p.getType()!=    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
322	[BUG]  [BUGGY]  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    cur);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
323	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    cur);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
324	[BUG]  [BUGGY]  For(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  For(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	For(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    cur);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
325	[BUG]  [BUGGY]  Predicate  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Predicate  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Predicate  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    cur);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
326	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    cur);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
327	[BUG]  [BUGGY]  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    cur);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
328	[BUG]  [BUGGY]  return!predicate.isLeftOf(n)&&!predicate.isEmpty();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n)&&!predicate.isEmpty();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n)&&!predicate.isEmpty();	  return!predicate.isLeftOf(cur)&&!predicate.isEmpty();    	non-compiled	[CE]  <identifier>  expected	121	None	replace
329	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.getType()!=  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	147	None	replace
330	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  &&  cur.getType()!=  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	147	None	replace
331	[BUG]  [BUGGY]  ||  cur.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  cur.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  cur.getType()!=  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	147	None	replace
332	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	147	None	replace
333	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	147	None	replace
334	[BUG]  [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	147	None	replace
335	[BUG]  [BUGGY]  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }	  ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
336	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
337	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  n.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
338	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
339	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
340	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
341	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)return  false;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)return  false;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)return  false;	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)return    false;    }    	non-compiled	[CE]  <identifier>  expected	200	None	replace
342	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)return    false;    }    	non-compiled	[CE]  <identifier>  expected	200	None	replace
343	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)return  false;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)return  false;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)return  false;	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)return    false;    }    	non-compiled	[CE]  <identifier>  expected	200	None	replace
344	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK)return  false;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK)return  false;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK)return  false;	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)return    false;    }    	non-compiled	[CE]  <identifier>  expected	200	None	replace
345	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK)return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK)return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)return    false;    }    	non-compiled	[CE]  <identifier>  expected	200	None	replace
346	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(cur));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(cur));  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(cur));	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(cur));    	non-compiled	[CE]  <identifier>  expected	167	None	replace
347	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(cur));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(cur));  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(cur));	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(cur));    	non-compiled	[CE]  <identifier>  expected	167	None	replace
348	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    predicate);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
349	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    predicate);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
350	[BUG]  [BUGGY]  Predicate  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Predicate  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Predicate  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    predicate);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
351	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    predicate);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
352	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  cur.getNext())  {  NodeUtil.removeChild(c,  predicate);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  cur.getNext())  {  NodeUtil.removeChild(c,  predicate);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  cur.getNext())  {  NodeUtil.removeChild(c,  predicate);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    predicate);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
353	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  &&  p.getType()  ==  Token.VAR)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
354	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  &&  p.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  &&  p.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  &&  p.getType()  ==  Token.VAR)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
355	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.VAR);	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
356	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	189	None	replace
357	[BUG]  [BUGGY]  ||  predicate.getType()!=  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  predicate.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  predicate.getType()!=  Token.NAME)  {  return  false;  }	  ||    p.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
358	[BUG]  [BUGGY]  ||  p.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  p.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  p.getType()  ==  Token.NAME)  {  return  false;  }	  ||    p.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
359	[BUG]  [BUGGY]  ||  predicate.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  predicate.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  predicate.getType()  ==  Token.NAME)  {  return  false;  }	  ||    p.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
360	[BUG]  [BUGGY]  ||  p.getType()  ==  Token.NAME)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  p.getType()  ==  Token.NAME)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  p.getType()  ==  Token.NAME)  {  return  true;  }	  ||    p.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
361	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.VAR)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
362	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
363	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
364	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
365	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.VAR)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
366	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
367	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
368	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
369	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
370	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  n.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  n.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
371	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
372	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
373	[BUG]  [BUGGY]  n.setType(Token.NAME)||  n.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  n.setType(Token.NAME)||  n.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	n.setType(Token.NAME)||  n.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
374	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  &&  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
375	[BUG]  [BUGGY]  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
376	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
377	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.FUNCTION);	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
378	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  &&  p.getType()  ==  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	194	None	replace
379	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	194	None	replace
380	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  &&  p.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  &&  p.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  &&  p.getType()  ==  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	194	None	replace
381	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	194	None	replace
382	[BUG]  [BUGGY]  return(predicate.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    ||    predicate.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	150	None	replace
383	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  predicate.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  &&  predicate.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  &&  predicate.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    ||    predicate.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	150	None	replace
384	[BUG]  [BUGGY]  return(predicate.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    ||    predicate.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	150	None	replace
385	[BUG]  [BUGGY]  return(predicate.getType()  ==  Token.NAME  &&  predicate.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()  ==  Token.NAME  &&  predicate.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()  ==  Token.NAME  &&  predicate.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    ||    predicate.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	150	None	replace
386	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.NAME    ||    predicate.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	150	None	replace
387	[BUG]  [BUGGY]  parent!=  if(p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent!=  if(p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent!=  if(p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	183	None	replace
388	[BUG]  [BUGGY]  parent  ==  if(p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  if(p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  if(p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	183	None	replace
389	[BUG]  [BUGGY]  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	183	None	replace
390	[BUG]  [BUGGY]  Definition  def  =  cfgNode.contains(cur);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  cfgNode.contains(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  cfgNode.contains(cur);	  Definition    def    =    defMetadata.contains(cur);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
391	[BUG]  [BUGGY]  Definition  def  =  defMetadata.contains(def);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  defMetadata.contains(def);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  defMetadata.contains(def);	  Definition    def    =    defMetadata.contains(cur);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
392	[BUG]  [BUGGY]  Definition  def  =  predicate.contains(cur);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  predicate.contains(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  predicate.contains(cur);	  Definition    def    =    defMetadata.contains(cur);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
393	[BUG]  [BUGGY]  Definition  def  =  cfgNodes.contains(cur);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  cfgNodes.contains(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  cfgNodes.contains(cur);	  Definition    def    =    defMetadata.contains(cur);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
394	[BUG]  [BUGGY]  Definition  def  =  defMetadata.contains(predicate);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  defMetadata.contains(predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  defMetadata.contains(predicate);	  Definition    def    =    defMetadata.contains(cur);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
395	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.FUNCTION)  {  return  true;  }	  if(p.getType()    ==    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
396	[BUG]  [BUGGY]  parent!=  cur.getType()  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent!=  cur.getType()  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent!=  cur.getType()  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	179	None	replace
397	[BUG]  [BUGGY]  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	179	None	replace
398	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.CALL)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	192	None	replace
399	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	192	None	replace
400	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	192	None	replace
401	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	192	None	replace
402	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	192	None	replace
403	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.CALL)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	192	None	replace
404	[BUG]  [BUGGY]  parent  ==  p.getType()  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  p.getType()  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  p.getType()  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()!=    Token.GETPROP    ||    p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
405	[BUG]  [BUGGY]  parent!=  p.getType()  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent!=  p.getType()  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent!=  p.getType()  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()!=    Token.GETPROP    ||    p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
406	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
407	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
408	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
409	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.VAR);	  return(n.getType()!=    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
410	[BUG]  [BUGGY]  ||  predicate.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  predicate.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  predicate.getType()!=  Token.VAR)  {  return  false;  }	  ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
411	[BUG]  [BUGGY]  ||  predicate.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  predicate.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  predicate.getType()  ==  Token.VAR)  {  return  false;  }	  ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
412	[BUG]  [BUGGY]  ||  p.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  p.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  p.getType()  ==  Token.VAR)  {  return  true;  }	  ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
413	[BUG]  [BUGGY]  return(n.getType()!=  Token.NAME  &&  n.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.NAME  &&  n.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.NAME  &&  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
414	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
415	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getType()!=  Token.VAR;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getType()!=  Token.VAR;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME)&&  n.getType()!=  Token.VAR;	  return(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
416	[BUG]  [BUGGY]  Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  }	  for(Node    c    =    cur.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
417	[BUG]  [BUGGY]  Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }	  for(Node    c    =    cur.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
418	[BUG]  [BUGGY]  For(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  For(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	For(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  }	  for(Node    c    =    cur.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
419	[BUG]  [BUGGY]  Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  p);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  p);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  p);  }	  for(Node    c    =    cur.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
420	[BUG]  [BUGGY]  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  p);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  p);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  p);  }	  for(Node    c    =    cur.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
421	[BUG]  [BUGGY]  if(defMetadata.contains(cur)||  defMetadata.contains(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(defMetadata.contains(cur)||  defMetadata.contains(cur))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(defMetadata.contains(cur)||  defMetadata.contains(cur))  {  return  true;  }	  if(defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
422	[BUG]  [BUGGY]  if(defMetadata.contains(cur)||  predicate.isLeftOf(cur))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(defMetadata.contains(cur)||  predicate.isLeftOf(cur))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(defMetadata.contains(cur)||  predicate.isLeftOf(cur))  {  return  false;  }	  if(defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
423	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.getType()!=  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
424	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  &&  cur.getType()!=  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
425	[BUG]  [BUGGY]  ||  cur.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  cur.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  cur.getType()!=  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
426	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
427	[BUG]  [BUGGY]  Context.checkState(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
428	[BUG]  [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
429	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
430	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  &&  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
431	[BUG]  [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
432	[BUG]  [BUGGY]  Context.checkState(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
433	[BUG]  [BUGGY]  parent  ==  null  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  null  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  null  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  parent    ==    if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
434	[BUG]  [BUGGY]  parent!=  if(p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent!=  if(p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent!=  if(p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  parent    ==    if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
435	[BUG]  [BUGGY]  parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  parent    ==    if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
436	[BUG]  [BUGGY]  parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  parent    ==    if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
437	[BUG]  [BUGGY]  parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  false;  }	  parent    ==    if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
438	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.CALL)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
439	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  n.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  n.getType()  ==  Token.CALL)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
440	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
441	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.CALL)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
442	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.CALL)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
443	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
444	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.FUNCTION    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
445	[BUG]  [BUGGY]  Predicate  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Predicate  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Predicate  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
446	[BUG]  [BUGGY]  NodeUtil.removeChild(cur,  c);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  NodeUtil.removeChild(cur,  c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	NodeUtil.removeChild(cur,  c);	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
447	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.NAME)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
448	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.NAME)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
449	[BUG]  [BUGGY]  parent!=  if(n.getType()!=  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent!=  if(n.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent!=  if(n.getType()!=  Token.NAME)  {  return  false;  }	  if(n.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	172	None	replace
450	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(n.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	172	None	replace
451	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR,  predicate);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR,  predicate);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR,    predicate);    	non-compiled	[CE]  <identifier>  expected	177	None	replace
452	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR,  n);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR,  n);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR,  n);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR,    predicate);    	non-compiled	[CE]  <identifier>  expected	177	None	replace
453	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR,  predicate);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR,  predicate);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR,    predicate);    	non-compiled	[CE]  <identifier>  expected	177	None	replace
454	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR,  expressionRoot);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR,  expressionRoot);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR,  expressionRoot);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR,    predicate);    	non-compiled	[CE]  <identifier>  expected	177	None	replace
455	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.VAR,  predicate);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.VAR,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.VAR,  predicate);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR,    predicate);    	non-compiled	[CE]  <identifier>  expected	177	None	replace
456	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR,  predicate);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR,  predicate);	  return(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR,    predicate);    	non-compiled	[CE]  <identifier>  expected	176	None	replace
457	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.VAR,  n);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.VAR,  n);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.VAR,  n);	  return(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR,    predicate);    	non-compiled	[CE]  <identifier>  expected	176	None	replace
458	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR,  predicate);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR,  predicate);	  return(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR,    predicate);    	non-compiled	[CE]  <identifier>  expected	176	None	replace
459	[BUG]  [BUGGY]  return(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.VAR,  predicate);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.VAR,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.VAR,  predicate);	  return(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR,    predicate);    	non-compiled	[CE]  <identifier>  expected	176	None	replace
460	[BUG]  [BUGGY]  return(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR,  predicate);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR,  predicate);	  return(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR,    predicate);    	non-compiled	[CE]  <identifier>  expected	176	None	replace
461	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  predicate.hasChildren())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  predicate.hasChildren())  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  &&  predicate.hasChildren())  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.hasChildren())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
462	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.hasChildren())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
463	[BUG]  [BUGGY]  ||  predicate.hasChildren())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  predicate.hasChildren())  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  predicate.hasChildren())  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.hasChildren())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
464	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.hasChildren())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
465	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  predicate.hasChildren())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  predicate.hasChildren())  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  &&  predicate.hasChildren())  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.hasChildren())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
466	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.hasChildren())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
467	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION)&&  n.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION)&&  n.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION)&&  n.getType()  ==  Token.VAR;	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
468	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	186	None	replace
469	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	186	None	replace
470	[BUG]  [BUGGY]  ||  p.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  p.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  p.getType()!=  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	186	None	replace
471	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	186	None	replace
472	[BUG]  [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	186	None	replace
473	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  &&  n.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
474	[BUG]  [BUGGY]  ||  n.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  n.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  n.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
475	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  &&  n.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  &&  n.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  &&  n.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
476	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
477	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);	  if(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
478	[BUG]  [BUGGY]  else  if(cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(cur.getType()  ==  Token.FUNCTION)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
479	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
480	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.CALL)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
481	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
482	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
483	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
484	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
485	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.getType()!=  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
486	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  &&  cur.getType()!=  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
487	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
488	[BUG]  [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
489	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.NAME);	  return(n.getType()!=    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
490	[BUG]  [BUGGY]  ||  p.getType()  >=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  p.getType()  >=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  p.getType()  >=  Token.GETPROP)  {  return  false;  }	  ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
491	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
492	[BUG]  [BUGGY]  Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
493	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.VAR  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
494	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
495	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.VAR)  {  return  true;  }	  if(cur.getType()    ==    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
496	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.FUNCTION)  {  return  true;  }	  if(cur.getType()    ==    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
497	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR  ||  cur.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR  ||  cur.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.VAR  ||  cur.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	154	None	replace
498	[BUG]  [BUGGY]  return(n.getType()!=  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	154	None	replace
499	[BUG]  [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	182	None	replace
500	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
501	[BUG]  [BUGGY]  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
502	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  &&  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
503	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  &&  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
504	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
505	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
506	[BUG]  [BUGGY]  defMetadata!=  null  &&!defMetadata.contains(cur))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  defMetadata!=  null  &&!defMetadata.contains(cur))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	defMetadata!=  null  &&!defMetadata.contains(cur))  {  return  false;  }	  if(defMetadata!=    null    &&!defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	203	None	replace
507	[BUG]  [BUGGY]  if(defMetadata!=  null  ||!defMetadata.contains(cur))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(defMetadata!=  null  ||!defMetadata.contains(cur))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(defMetadata!=  null  ||!defMetadata.contains(cur))  {  return  false;  }	  if(defMetadata!=    null    &&!defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	203	None	replace
508	[BUG]  [BUGGY]  defMetadata!=  null  ||!defMetadata.contains(cur))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  defMetadata!=  null  ||!defMetadata.contains(cur))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	defMetadata!=  null  ||!defMetadata.contains(cur))  {  return  false;  }	  if(defMetadata!=    null    &&!defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	203	None	replace
509	[BUG]  [BUGGY]  if(defMetadata  ==  null  &&!defMetadata.contains(cur))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(defMetadata  ==  null  &&!defMetadata.contains(cur))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(defMetadata  ==  null  &&!defMetadata.contains(cur))  {  return  false;  }	  if(defMetadata!=    null    &&!defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	203	None	replace
510	[BUG]  [BUGGY]  defMetadata!=  null  &&!defMetadata.contains(cur.getString()))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  defMetadata!=  null  &&!defMetadata.contains(cur.getString()))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	defMetadata!=  null  &&!defMetadata.contains(cur.getString()))  {  return  false;  }	  if(defMetadata!=    null    &&!defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	203	None	replace
511	[BUG]  [BUGGY]  Definition  def  =  defMetadata!=  null  &&!defMetadata.contains(cur);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  defMetadata!=  null  &&!defMetadata.contains(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  defMetadata!=  null  &&!defMetadata.contains(cur);	  if(defMetadata!=    null    &&!defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	203	None	replace
512	[BUG]  [BUGGY]  if(p.getType()  ==  Token.EXPR_RESULT  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.EXPR_RESULT  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.EXPR_RESULT  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.EXPR_RESULT    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
513	[BUG]  [BUGGY]  if(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.EXPR_RESULT    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
514	[BUG]  [BUGGY]  if(p.getType()!=  Token.EXPR_RESULT  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.EXPR_RESULT  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.EXPR_RESULT  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.EXPR_RESULT    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
515	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.EXPR_RESULT    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
516	[BUG]  [BUGGY]  if(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }	  if(p.getType()    ==    Token.EXPR_RESULT    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
517	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	184	None	replace
518	[BUG]  [BUGGY]  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	184	None	replace
519	[BUG]  [BUGGY]  if(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	184	None	replace
520	[BUG]  [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	184	None	replace
521	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	184	None	replace
522	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
523	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  &&  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
524	[BUG]  [BUGGY]  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
525	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
526	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
527	[BUG]  [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.EXPR_RESULT);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.EXPR_RESULT);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.EXPR_RESULT);	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
528	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  {  return  true;  }	  if(n.getType()    ==    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
529	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  predicate);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  predicate);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  predicate);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.copyCurrentStructure(c,    p);    }    	non-compiled	[CE]  <identifier>  expected	196	None	replace
530	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  predicate);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  predicate);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  predicate);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.copyCurrentStructure(c,    p);    }    	non-compiled	[CE]  <identifier>  expected	196	None	replace
531	[BUG]  [BUGGY]  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  p);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  p);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  p);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.copyCurrentStructure(c,    p);    }    	non-compiled	[CE]  <identifier>  expected	196	None	replace
532	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  predicate);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  predicate);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  predicate);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.copyCurrentStructure(c,    p);    }    	non-compiled	[CE]  <identifier>  expected	196	None	replace
533	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  p);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  p);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  p);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.copyCurrentStructure(c,    p);    }    	non-compiled	[CE]  <identifier>  expected	196	None	replace
534	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
535	[BUG]  [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
536	[BUG]  [BUGGY]  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  cur.getType()  ==  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
537	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.CALL)  {  return  true;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
538	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  &&  cur.getType()  ==  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
539	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.VAR)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
540	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.VAR)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
541	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
542	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
543	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
544	[BUG]  [BUGGY]  Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
545	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.CALL  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.CALL  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.CALL  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
546	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.CALL)  {  return  true;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
547	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
548	[BUG]  [BUGGY]  if(p.getType()  ==  Token.GETPROP  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.GETPROP  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.GETPROP  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	170	None	replace
549	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  &&  p.getType()!=  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
550	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  &&  p.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  &&  p.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  &&  p.getType()!=  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
551	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
552	[BUG]  [BUGGY]  Context.checkState(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
553	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
554	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
555	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
556	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
557	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  predicate.equals(n.getString()))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  predicate.equals(n.getString()))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  &&  predicate.equals(n.getString()))  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.equals(n.getString()))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
558	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.equals(n.getString()))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.equals(n.getString()))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.equals(n.getString()))  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.equals(n.getString()))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
559	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.equals(cur.getString()))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.equals(cur.getString()))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.equals(cur.getString()))  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.equals(n.getString()))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
560	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  predicate.equals(n.getString()))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  predicate.equals(n.getString()))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  &&  predicate.equals(n.getString()))  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.equals(n.getString()))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
561	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.equals(n.getString()))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.equals(n.getString()))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.equals(n.getString()))  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.equals(n.getString()))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
562	[BUG]  [BUGGY]  else  if(n.getType()  ==  Token.FUNCTION  ||  predicate.equals(p.getString()))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(n.getType()  ==  Token.FUNCTION  ||  predicate.equals(p.getString()))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(n.getType()  ==  Token.FUNCTION  ||  predicate.equals(p.getString()))  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.equals(n.getString()))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
563	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.remove(def);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.remove(def);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  defMetadata.remove(def);	  DefinedDependency    reachingUses    =    defMetadata.contains(def);    	non-compiled	[CE]  <identifier>  expected	135	None	replace
564	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  def.contains(def);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  def.contains(def);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  def.contains(def);	  DefinedDependency    reachingUses    =    defMetadata.contains(def);    	non-compiled	[CE]  <identifier>  expected	135	None	replace
565	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.    	non-compiled	[CE]  <identifier>  expected	164	None	replace
566	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)||!predicate.  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)||!predicate.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)||!predicate.	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.    	non-compiled	[CE]  <identifier>  expected	164	None	replace
567	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
568	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
569	[BUG]  [BUGGY]  Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
570	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
571	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.EMPTY)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.EMPTY)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.EMPTY)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.EMPTY)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
572	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.EMPTY)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.EMPTY)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.EMPTY)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.EMPTY)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
573	[BUG]  [BUGGY]  ||  cur.getType()!=  Token.EMPTY)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  cur.getType()!=  Token.EMPTY)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  cur.getType()!=  Token.EMPTY)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.EMPTY)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
574	[BUG]  [BUGGY]  Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.EMPTY)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.EMPTY)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.EMPTY)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.EMPTY)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
575	[BUG]  [BUGGY]  Context.checkState(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.EMPTY)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.EMPTY)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.EMPTY)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.EMPTY)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
576	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.EMPTY)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.EMPTY)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.EMPTY)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.EMPTY)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
577	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
578	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
579	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
580	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
581	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
582	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
583	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  cur.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME)&&  cur.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME)&&  cur.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME)&&    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
584	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  predicate.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME)&&  predicate.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME)&&  predicate.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME)&&    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
585	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  p.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME)&&  p.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME)&&  p.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME)&&    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
586	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getType()!=  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME)&&  n.getType()!=  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME)&&    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
587	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.VAR);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.VAR);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  <identifier>  expected	197	None	replace
588	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Preconditions.checkState(c.getType()  ==  Token.VAR);	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  <identifier>  expected	197	None	replace
589	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.VAR);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.VAR);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  <identifier>  expected	197	None	replace
590	[BUG]  [BUGGY]  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.VAR);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.VAR);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  <identifier>  expected	197	None	replace
591	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  <identifier>  expected	197	None	replace
592	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  cur.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.VAR);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  cur.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  cur.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.VAR);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  <identifier>  expected	197	None	replace
593	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.removeFirstChild();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.removeFirstChild();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.removeFirstChild();	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.removeFirstChild();    	non-compiled	[CE]  <identifier>  expected	165	None	replace
594	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot)||!predicate.removeLastChild();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot)||!predicate.removeLastChild();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot)||!predicate.removeLastChild();	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.removeFirstChild();    	non-compiled	[CE]  <identifier>  expected	165	None	replace
595	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.removeLastChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.removeLastChild();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.removeLastChild();	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.removeFirstChild();    	non-compiled	[CE]  <identifier>  expected	165	None	replace
596	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot));  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot));	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot));    	non-compiled	[CE]  <identifier>  expected	163	None	replace
597	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot));  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot));	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot));    	non-compiled	[CE]  <identifier>  expected	163	None	replace
598	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	153	None	replace
599	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	153	None	replace
600	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	153	None	replace
601	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)||  n.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME)||  n.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME)||  n.getType()  ==  Token.VAR;	  return(n.getType()    ==    Token.NAME)&&    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
602	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  predicate.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME)&&  predicate.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME)&&  predicate.getType()  ==  Token.VAR;	  return(n.getType()    ==    Token.NAME)&&    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
603	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  cur.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME)&&  cur.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME)&&  cur.getType()  ==  Token.VAR;	  return(n.getType()    ==    Token.NAME)&&    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
604	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getChildCount()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getChildCount()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME)&&  n.getChildCount()  ==  Token.VAR;	  return(n.getType()    ==    Token.NAME)&&    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
605	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME,  predicate);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME,  predicate);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME,    predicate);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
606	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME,  expressionRoot);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME,  expressionRoot);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME,  expressionRoot);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME,    predicate);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
607	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.NAME,  n);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.NAME,  n);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.NAME,  n);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME,    predicate);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
608	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME,    predicate);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
609	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME,  predicate);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME,  predicate);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME,    predicate);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
610	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.NAME,  predicate);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.NAME,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.NAME,  predicate);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME,    predicate);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
611	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  &&  n.getType()!=  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
612	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  &&  n.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  &&  n.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  &&  n.getType()!=  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
613	[BUG]  [BUGGY]  ||  n.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  n.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  n.getType()!=  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
614	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
615	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    	non-compiled	[CE]  <identifier>  expected	129	None	replace
616	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    	non-compiled	[CE]  <identifier>  expected	129	None	replace
617	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
618	[BUG]  [BUGGY]  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
619	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  &&  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
620	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
621	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
622	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
623	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
624	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
625	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
626	[BUG]  [BUGGY]  if(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
627	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.GETPROP);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.GETPROP);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()  ==  Token.GETPROP);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
628	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
629	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.GETPROP  ||  cur.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.GETPROP  ||  cur.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.GETPROP  ||  cur.getType()  ==  Token.FUNCTION);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
630	[BUG]  [BUGGY]  return(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.GETPROP);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.GETPROP);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.GETPROP);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
631	[BUG]  [BUGGY]  return(cur.getType()!=  Token.FUNCTION  &&  cur.getType()  ==  Token.GETPROP);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()!=  Token.FUNCTION  &&  cur.getType()  ==  Token.GETPROP);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()!=  Token.FUNCTION  &&  cur.getType()  ==  Token.GETPROP);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
632	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.GETPROP  &&  cur.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.GETPROP  &&  cur.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.GETPROP  &&  cur.getType()  ==  Token.FUNCTION);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
633	[BUG]  [BUGGY]  if(p.getType()!=  Token.FOR  &&  p.getType()!=  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FOR  &&  p.getType()!=  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FOR  &&  p.getType()!=  Token.BLOCK)  {  return  false;  }	  if(p.getType()!=    Token.FOR    ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
634	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FOR  &&  p.getType()!=  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FOR  &&  p.getType()!=  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FOR  &&  p.getType()!=  Token.BLOCK)  {  return  false;  }	  if(p.getType()!=    Token.FOR    ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
635	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FOR  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FOR  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FOR  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }	  if(p.getType()!=    Token.FOR    ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
636	[BUG]  [BUGGY]  if(p.getType()!=  Token.FOR  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FOR  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FOR  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }	  if(p.getType()!=    Token.FOR    ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
637	[BUG]  [BUGGY]  Context.checkState(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }	  if(p.getType()!=    Token.FOR    ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
638	[BUG]  [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.NAME)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    &&    p.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
639	[BUG]  [BUGGY]  predicate.isEmpty())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  predicate.isEmpty())  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	predicate.isEmpty())  {  return  false;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
640	[BUG]  [BUGGY]  if(!predicate.isEmpty())  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(!predicate.isEmpty())  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(!predicate.isEmpty())  {  return  true;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
641	[BUG]  [BUGGY]  Predicate  <  Node>  predicate  =  predicate.isEmpty();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Predicate  <  Node>  predicate  =  predicate.isEmpty();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Predicate  <  Node>  predicate  =  predicate.isEmpty();	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
642	[BUG]  [BUGGY]  Predicate  <  Node>  predicate  =  predicate.isEmpty()?  true  :  false;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Predicate  <  Node>  predicate  =  predicate.isEmpty()?  true  :  false;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Predicate  <  Node>  predicate  =  predicate.isEmpty()?  true  :  false;	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
643	[BUG]  [BUGGY]  if(!predicate.isEmpty()  ||  predicate.isEmpty())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(!predicate.isEmpty()  ||  predicate.isEmpty())  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(!predicate.isEmpty()  ||  predicate.isEmpty())  {  return  false;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
644	[BUG]  [BUGGY]  Predicate  <  Node>  predicate  =  predicate.getFirstChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Predicate  <  Node>  predicate  =  predicate.getFirstChild();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Predicate  <  Node>  predicate  =  predicate.getFirstChild();	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
645	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	207	None	replace
646	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(predicate.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
647	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(predicate.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
648	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.CALL)  {  return  false;  }	  if(predicate.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
649	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.VAR)  {  return  false;  }	  if(predicate.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
650	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
651	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
652	[BUG]  [BUGGY]  Context.checkState(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
653	[BUG]  [BUGGY]  Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
654	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
655	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.remove  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.remove  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.remove	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.remove    	non-compiled	[CE]  <identifier>  expected	166	None	replace
656	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.remov  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.remov  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.remov	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.remove    	non-compiled	[CE]  <identifier>  expected	166	None	replace
657	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot)||!predicate.remov  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot)||!predicate.remov  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot)||!predicate.remov	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.remove    	non-compiled	[CE]  <identifier>  expected	166	None	replace
658	[BUG]  [BUGGY]  return!predicate.isLeftOf(cur)||!predicate.contains(expressionRoot);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(cur)||!predicate.contains(expressionRoot);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(cur)||!predicate.contains(expressionRoot);	  return!predicate.isLeftOf(cur)||!predicate.contains(cur);    	non-compiled	[CE]  <identifier>  expected	120	None	replace
659	[BUG]  [BUGGY]  return!predicate.isLeftOf(cur)||!predicate.contains(n);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(cur)||!predicate.contains(n);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(cur)||!predicate.contains(n);	  return!predicate.isLeftOf(cur)||!predicate.contains(cur);    	non-compiled	[CE]  <identifier>  expected	120	None	replace
660	[BUG]  [BUGGY]  return!predicate.isLeftOf(n)||!predicate.contains(cur);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n)||!predicate.contains(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n)||!predicate.contains(cur);	  return!predicate.isLeftOf(cur)||!predicate.contains(cur);    	non-compiled	[CE]  <identifier>  expected	120	None	replace
661	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
662	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
663	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
664	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  &&  cur.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
665	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
666	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
667	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  &&  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
668	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  &&  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
669	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
670	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.EXPR_RESULT  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.EXPR_RESULT  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.EXPR_RESULT  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
671	[BUG]  [BUGGY]  Context.checkState(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
672	[BUG]  [BUGGY]  return!predicate.isLeftOf(cur)&&!predicate.isLeftOf(cur);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(cur)&&!predicate.isLeftOf(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(cur)&&!predicate.isLeftOf(cur);	  return!predicate.isLeftOf(cur)||!predicate.isLeftOf(cur);    	non-compiled	[CE]  <identifier>  expected	119	None	replace
673	[BUG]  [BUGGY]  return!predicate.isLeftOf(n)||!predicate.isLeftOf(cur);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n)||!predicate.isLeftOf(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n)||!predicate.isLeftOf(cur);	  return!predicate.isLeftOf(cur)||!predicate.isLeftOf(cur);    	non-compiled	[CE]  <identifier>  expected	119	None	replace
674	[BUG]  [BUGGY]  return!predicate.isLeftOf(expressionRoot)||!predicate.isLeftOf(cur);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(expressionRoot)||!predicate.isLeftOf(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(expressionRoot)||!predicate.isLeftOf(cur);	  return!predicate.isLeftOf(cur)||!predicate.isLeftOf(cur);    	non-compiled	[CE]  <identifier>  expected	119	None	replace
675	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
676	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
677	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.get(predicate);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.get(predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  defMetadata.get(predicate);	  DefinedDependency    reachingUses    =    defMetadata.get(cur);    	non-compiled	[CE]  <identifier>  expected	136	None	replace
678	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.get(cur,  predicate);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.get(cur,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  defMetadata.get(cur,  predicate);	  DefinedDependency    reachingUses    =    defMetadata.get(cur);    	non-compiled	[CE]  <identifier>  expected	136	None	replace
679	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  predicate.get(cur);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  predicate.get(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  predicate.get(cur);	  DefinedDependency    reachingUses    =    defMetadata.get(cur);    	non-compiled	[CE]  <identifier>  expected	136	None	replace
680	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION)&&  predicate.apply(predicate);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION)&&  predicate.apply(predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION)&&  predicate.apply(predicate);	  return(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION)&&    predicate.apply(predicate);    	non-compiled	[CE]  <identifier>  expected	188	None	replace
681	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  &&  predicate.apply(cur);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  &&  predicate.apply(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  &&  predicate.apply(cur);	  return(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION)&&    predicate.apply(predicate);    	non-compiled	[CE]  <identifier>  expected	188	None	replace
682	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION)&&  predicate.apply(cur);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION)&&  predicate.apply(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION)&&  predicate.apply(cur);	  return(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION)&&    predicate.apply(predicate);    	non-compiled	[CE]  <identifier>  expected	188	None	replace
683	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  &&  predicate.apply(expressionRoot);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  &&  predicate.apply(expressionRoot);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  &&  predicate.apply(expressionRoot);	  return(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION)&&    predicate.apply(predicate);    	non-compiled	[CE]  <identifier>  expected	188	None	replace
684	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
685	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
686	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
687	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
688	[BUG]  [BUGGY]  defMetadata.add(p);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  defMetadata.add(p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	defMetadata.add(p);	  defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
689	[BUG]  [BUGGY]  defMetadata.add(predicate);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  defMetadata.add(predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	defMetadata.add(predicate);	  defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
690	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(cur)&&!defMetadata.contains(cur))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  NodeUtil.isFunctionDeclaration(cur)&&!defMetadata.contains(cur))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	NodeUtil.isFunctionDeclaration(cur)&&!defMetadata.contains(cur))  {  return  false;  }	  if(!defMetadata.contains(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
691	[BUG]  [BUGGY]  if(defMetadata.contains(cur)||!defMetadata.contains(cur))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(defMetadata.contains(cur)||!defMetadata.contains(cur))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(defMetadata.contains(cur)||!defMetadata.contains(cur))  {  return  false;  }	  if(!defMetadata.contains(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
692	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(cur)&&!defMetadata.contains(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  NodeUtil.isFunctionDeclaration(cur)&&!defMetadata.contains(cur))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	NodeUtil.isFunctionDeclaration(cur)&&!defMetadata.contains(cur))  {  return  true;  }	  if(!defMetadata.contains(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
693	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.get(def);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.get(def);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  defMetadata.get(def);	  DefinedDependency    reachingUses    =    defMetadata.contains(def);    	non-compiled	[CE]  <identifier>  expected	135	None	replace
694	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.apply(n))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.apply(n))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.apply(n))  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
695	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
696	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  inlinedNewDependencies.contains(cur);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  inlinedNewDependencies.contains(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  inlinedNewDependencies.contains(cur);	  DefinedDependency    reachingUses    =    defMetadata.contains(cur);    	non-compiled	[CE]  <identifier>  expected	132	None	replace
697	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.add(p);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.add(p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  defMetadata.add(p);	  DefinedDependency    reachingUses    =    defMetadata.contains(cur);    	non-compiled	[CE]  <identifier>  expected	132	None	replace
698	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.CALL)  {  return  true;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
699	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
700	[BUG]  [BUGGY]  return(predicate.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    &&    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
701	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    &&    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
702	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION,  predicate);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION,  predicate);	  return(n.getType()    ==    Token.NAME    &&    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
703	[BUG]  [BUGGY]  Preconditions.checkState(defMetadata.contains(cur));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Preconditions.checkState(defMetadata.contains(cur));  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Preconditions.checkState(defMetadata.contains(cur));	  if(defMetadata.contains(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	204	None	replace
704	[BUG]  [BUGGY]  DefinedDependency  reachingDef.contains(def))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingDef.contains(def))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingDef.contains(def))  {  return  true;  }	  if(defMetadata.contains(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	204	None	replace
705	[BUG]  [BUGGY]  if(defMetadata.contains(p))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(defMetadata.contains(p))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(defMetadata.contains(p))  {  return  true;  }	  if(defMetadata.contains(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	204	None	replace
706	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  true  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  true  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  true	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
707	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  return  true;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  return  true;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
708	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  true;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  true;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
709	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.hasChildren())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
710	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)  {  return  true;  }	  if(cur.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
711	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.EMPTY)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.EMPTY)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.EMPTY)  {  return  true;  }	  if(cur.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
712	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.NAME)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.NAME)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.NAME)  {  return  true;  }	  if(cur.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
713	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.equals(n.getString()))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.equals(n.getString()))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.equals(n.getString()))  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.equals(n.getString()))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
714	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.equals(n.getString()))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.equals(n.getString()))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  predicate.equals(n.getString()))  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.equals(n.getString()))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
715	[BUG]  [BUGGY]  n.setType(Token.NAME  ||  n.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  n.setType(Token.NAME  ||  n.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	n.setType(Token.NAME  ||  n.getType()!=  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
716	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.VAR)  {  return  true;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
717	[BUG]  [BUGGY]  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	&&  p.getType()!=  Token.GETPROP)  {  return  false;  }	  ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
718	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.VAR)  {  return  true;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
719	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.VAR)  {  return  true;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
720	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getFirstChild()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getFirstChild()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME)&&  n.getFirstChild()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME)&&    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
721	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.VAR)  {  return  true;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
722	[BUG]  [BUGGY]  parant  ==  cur.getType()  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parant  ==  cur.getType()  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parant  ==  cur.getType()  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }	  parent    ==    cur.getType()    ||    cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
723	[BUG]  [BUGGY]  n.setType(Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  n.setType(Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	n.setType(Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
724	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  n.getChildCount()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  n.getChildCount()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.FUNCTION  ||  n.getChildCount()  ==  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	175	None	replace
725	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  >  Token.NAME);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  >  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  >  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	175	None	replace
726	[BUG]  [BUGGY]  else  if(p.getType()  >=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  >=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  >=  Token.FUNCTION)  {  return  true;  }	  else    if(p.getType()!=    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
727	[BUG]  [BUGGY]  if(p.getType()!=  Token.GETELEM  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.GETELEM  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.GETELEM  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.GETPROP    ||    p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
728	[BUG]  [BUGGY]  return(p.getType()!=  Token.NAME  &&  p.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()!=  Token.NAME  &&  p.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()!=  Token.NAME  &&  p.getType()  ==  Token.FUNCTION);	  return(n.getType()!=    Token.NAME    &&    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
729	[BUG]  [BUGGY]  return(predicate.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);	  return(n.getType()!=    Token.NAME    &&    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
730	[BUG]  [BUGGY]  if(p.getType()!=  Token.BLOCK  ||  p.getType()!=  Token.FOR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.BLOCK  ||  p.getType()!=  Token.FOR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.BLOCK  ||  p.getType()!=  Token.FOR)  {  return  false;  }	  if(p.getType()!=    Token.FOR    ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
731	[BUG]  [BUGGY]  if(p.getType()!=  Token.FOR  &&  p.getType()  >>  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FOR  &&  p.getType()  >>  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FOR  &&  p.getType()  >>  Token.BLOCK)  {  return  false;  }	  if(p.getType()!=    Token.FOR    ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
732	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.GETPROP)  {  return  true;  }	  if(cur.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	148	None	replace
733	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.FUNCTION)  {  return  true;  }	  if(cur.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	148	None	replace
734	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.CALL)  {  return  true;  }	  if(cur.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	148	None	replace
735	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
736	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
737	[BUG]  [BUGGY]  n.setType(Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  n.setType(Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	n.setType(Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
738	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.CALL)  {  return  true;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
739	[BUG]  [BUGGY]  DefinedDependency  def  =  defMetadata.contains(cur);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  def  =  defMetadata.contains(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  def  =  defMetadata.contains(cur);	  if(defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
740	[BUG]  [BUGGY]  DefinedDependency  def  =  defMetadata.contains(def);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  def  =  defMetadata.contains(def);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  def  =  defMetadata.contains(def);	  if(defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
741	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  cur);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  cur);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  cur);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.copyCurrentStructure(c,    p);    }    	non-compiled	[CE]  <identifier>  expected	196	None	replace
742	[BUG]  [BUGGY]  n.setType(Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  n.setType(Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	n.setType(Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
743	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return  true;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
744	[BUG]  [BUGGY]  Definition  def  =  defMetadata!=  null  &&!defMetadata.contains(def);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  defMetadata!=  null  &&!defMetadata.contains(def);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  defMetadata!=  null  &&!defMetadata.contains(def);	  if(defMetadata!=    null    &&!defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	203	None	replace
745	[BUG]  [BUGGY]  defMetadata!=  null  &&!defMetadata.contains(def))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  defMetadata!=  null  &&!defMetadata.contains(def))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	defMetadata!=  null  &&!defMetadata.contains(def))  {  return  false;  }	  if(defMetadata!=    null    &&!defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	203	None	replace
746	[BUG]  [BUGGY]  defMetadata!=  null  &&!defMetadata.contains(predicate))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  defMetadata!=  null  &&!defMetadata.contains(predicate))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	defMetadata!=  null  &&!defMetadata.contains(predicate))  {  return  false;  }	  if(defMetadata!=    null    &&!defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	203	None	replace
747	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  return  false;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    return    false;    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
748	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  return  false;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    return    false;    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
749	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.NAME,  predicate);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.NAME,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.NAME,  predicate);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME,    predicate);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
750	[BUG]  [BUGGY]  return(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME,    predicate);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
751	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
752	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
753	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }	  if(p.getType()!=    Token.NAME    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
754	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  >=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  >=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()  >=  Token.GETPROP)  {  return  false;  }	  if(p.getType()!=    Token.NAME    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
755	[BUG]  [BUGGY]  return(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  return(n.getType()!=    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
756	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.FUNCTION);	  return(n.getType()!=    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
757	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    if(!predicate.apply(c))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
758	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.GETPROP)  {  return  true;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
759	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.GETPROP)  {  return  true;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
760	[BUG]  [BUGGY]  p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
761	[BUG]  [BUGGY]  if(p.getType()!=  Token.VAR  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.VAR  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.VAR  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	182	None	replace
762	[BUG]  [BUGGY]  p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	182	None	replace
763	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()!=  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    &&    n.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
764	[BUG]  [BUGGY]  return!predicate.isLeftOf(p,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(p,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot));  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(p,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot)||!predicate.isLeftOf(n,  expressionRoot));	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot));    	non-compiled	[CE]  <identifier>  expected	163	None	replace
765	[BUG]  [BUGGY]  if(cur.getType()!=  Token.VAR  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.VAR  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.VAR  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
766	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.VAR  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
767	[BUG]  [BUGGY]  Node  c  =  cur.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  cur.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  cur.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }	  for(Node    c    =    cur.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
768	[BUG]  [BUGGY]  Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);	  for(Node    c    =    cur.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
769	[BUG]  [BUGGY]  Node  c  =  cur.getFirstChild();  if(c!=  null  &&  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  cur.getFirstChild();  if(c!=  null  &&  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  cur.getFirstChild();  if(c!=  null  &&  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }	  for(Node    c    =    cur.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
770	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
771	[BUG]  [BUGGY]  return(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.NAME    ||    predicate.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	150	None	replace
772	[BUG]  [BUGGY]  return(p.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()  ==  Token.NAME  ||  predicate.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    ||    predicate.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	150	None	replace
773	[BUG]  [BUGGY]  if(p.getType()!=  Token.EXPR_RESULT  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.EXPR_RESULT  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.EXPR_RESULT  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.EXPR_RESULT    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
774	[BUG]  [BUGGY]  if(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }	  if(p.getType()    ==    Token.EXPR_RESULT    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
775	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	192	None	replace
776	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	192	None	replace
777	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.CALL  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.CALL  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.CALL  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	192	None	replace
778	[BUG]  [BUGGY]  if(predicate.getType()!=  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()!=  Token.NAME)  {  return  false;  }	  if(n.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	172	None	replace
779	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(n))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(n))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(n))  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.apply(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	191	None	replace
780	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.apply(cur))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.apply(cur))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  predicate.apply(cur))  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.apply(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	191	None	replace
781	[BUG]  [BUGGY]  DefinedDependency  mapping  =  defMetadata.get(p);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  mapping  =  defMetadata.get(p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  mapping  =  defMetadata.get(p);	  if(!defMetadata.contains(p))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
782	[BUG]  [BUGGY]  DefinedDependency  mapping  =  defMetadata.contains(p);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  mapping  =  defMetadata.contains(p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  mapping  =  defMetadata.contains(p);	  if(!defMetadata.contains(p))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
783	[BUG]  [BUGGY]  p  =  defMetadata.contains(p);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  p  =  defMetadata.contains(p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	p  =  defMetadata.contains(p);	  if(!defMetadata.contains(p))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
784	[BUG]  [BUGGY]  if(predicate.getType()!=  Token.NAME)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()!=  Token.NAME)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()!=  Token.NAME)  {  return  true;  }	  if(n.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
785	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  predicate);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	NodeUtil.mayHaveSideEffects(n,  predicate);	  if(n.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
786	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  n  =  n.getFirstChild();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  n  =  n.getFirstChild();	  if(n.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
787	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getChildCount()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getChildCount()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  cur.getChildCount()!=  Token.NAME);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
788	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FOR  &&  n.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FOR  &&  n.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FOR  &&  n.getType()  ==  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    &&    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
789	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  expressionRoot);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  expressionRoot);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  expressionRoot);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    	non-compiled	[CE]  <identifier>  expected	129	None	replace
790	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    	non-compiled	[CE]  <identifier>  expected	129	None	replace
791	[BUG]  [BUGGY]  return(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  >=  Token.NAME  ||  n.getType()  ==  Token.VAR);	  return(n.getType()!=    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
792	[BUG]  [BUGGY]  Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  true;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  true;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
793	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  true  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  true  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  true	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
794	[BUG]  [BUGGY]  n.setType(Token.NAME  ||  n.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  n.setType(Token.NAME  ||  n.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	n.setType(Token.NAME  ||  n.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
795	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >>  Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >>  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >>  Token.NAME);	  return(n.getType()!=    Token.FUNCTION    ||    n.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	174	None	replace
796	[BUG]  [BUGGY]  return(n.getType()  >=  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  >=  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  >=  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  return(n.getType()!=    Token.FUNCTION    ||    n.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	174	None	replace
797	[BUG]  [BUGGY]  return!predicate.isLeftOf(p)||!predicate.isLeftOf(cur);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(p)||!predicate.isLeftOf(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(p)||!predicate.isLeftOf(cur);	  return!predicate.isLeftOf(cur)||!predicate.isLeftOf(cur);    	non-compiled	[CE]  <identifier>  expected	119	None	replace
798	[BUG]  [BUGGY]  return!predicate.isLeftOf(cur)||!predicate.isLeftOf(expressionRoot);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(cur)||!predicate.isLeftOf(expressionRoot);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(cur)||!predicate.isLeftOf(expressionRoot);	  return!predicate.isLeftOf(cur)||!predicate.isLeftOf(cur);    	non-compiled	[CE]  <identifier>  expected	119	None	replace
799	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >>  Token.VAR);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >>  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >>  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	178	None	replace
800	[BUG]  [BUGGY]  return(n.getType()  >=  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  >=  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  >=  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	178	None	replace
801	[BUG]  [BUGGY]  for(Node  p  :  n.getFirstChild())  {  if(p.getType()!=  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  p  :  n.getFirstChild())  {  if(p.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  p  :  n.getFirstChild())  {  if(p.getType()!=  Token.NAME)  {  return  false;  }	  if(p.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	193	None	replace
802	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	180	None	replace
803	[BUG]  [BUGGY]  if(p.getType()!=  Token.CALL  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.CALL  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.CALL  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	186	None	replace
804	[BUG]  [BUGGY]  if(p.getType()  ==  Token.CALL  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.CALL  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.CALL  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	186	None	replace
805	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	186	None	replace
806	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.GETPROP,  predicate);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.GETPROP,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.GETPROP,  predicate);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
807	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.GETELEM);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.GETELEM);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.GETELEM);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
808	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  p.getType()!=  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  ||  p.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  ||  p.getType()!=  Token.FUNCTION);	  return(n.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
809	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getType()  >>  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getType()  >>  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  &&  n.getType()  >>  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
810	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  c);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  c);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(p,    c);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
811	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  c);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  c);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(p,    c);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
812	[BUG]  [BUGGY]  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  c);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  c);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(p,    c);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
813	[BUG]  [BUGGY]  if(p.getType()!=  Token.GETPROP  ||  p.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.GETPROP  ||  p.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.GETPROP  ||  p.getType()  ==  Token.FUNCTION)  {  return  true;  }	  if(p.getType()!=    Token.GETPROP    ||    p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
814	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  >>  Token.VAR);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  >>  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  >>  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
815	[BUG]  [BUGGY]  return(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
816	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.VAR)  {  return  true;  }	  if(p.getType()!=    Token.NAME    ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
817	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  >=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  >=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()  >=  Token.VAR)  {  return  false;  }	  if(p.getType()!=    Token.NAME    ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
818	[BUG]  [BUGGY]  p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	198	None	replace
819	[BUG]  [BUGGY]  if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.BLOCK)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.BLOCK)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.BLOCK)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	198	None	replace
820	[BUG]  [BUGGY]  defMetadata.add(def);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  defMetadata.add(def);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	defMetadata.add(def);	  defMetadata.contains(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
821	[BUG]  [BUGGY]  defMetadata.contains(def))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  defMetadata.contains(def))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	defMetadata.contains(def))  {  return  false;  }	  defMetadata.contains(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
822	[BUG]  [BUGGY]  defMetadata.add(predicate))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  defMetadata.add(predicate))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	defMetadata.add(predicate))  {  return  true;  }	  defMetadata.contains(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
823	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
824	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
825	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.GETPROP  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.GETPROP  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.GETPROP  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
826	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(cur));    	non-compiled	[CE]  <identifier>  expected	167	None	replace
827	[BUG]  [BUGGY]  Context.checkState(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
828	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
829	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EMPTY)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EMPTY)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EMPTY)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
830	[BUG]  [BUGGY]  if(predicate.getType()!=  Token.NAME  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()!=  Token.NAME  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()!=  Token.NAME  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    predicate.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
831	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.GETPROP)  {  return  true;  }	  if(n.getType()    ==    Token.NAME    ||    predicate.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
832	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.CALL)  {  return  true;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	194	None	replace
833	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.CALL)  {  return  true;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	194	None	replace
834	[BUG]  [BUGGY]  if(p.getType()!=  Token.EMPTY  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.EMPTY  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.EMPTY  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
835	[BUG]  [BUGGY]  if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
836	[BUG]  [BUGGY]  return(predicate.getType()  ==  Token.FUNCTION  &&  predicate.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()  ==  Token.FUNCTION  &&  predicate.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()  ==  Token.FUNCTION  &&  predicate.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
837	[BUG]  [BUGGY]  defMetadata.contains(def))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  defMetadata.contains(def))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	defMetadata.contains(def))  {  return  true;  }	  defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
838	[BUG]  [BUGGY]  Context.checkState(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	147	None	replace
839	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
840	[BUG]  [BUGGY]  if(cur.getType()!=  Token.EXPR_RESULT  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.EXPR_RESULT  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.EXPR_RESULT  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
841	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
842	[BUG]  [BUGGY]  if(p.getType()!=  Token.GETPROP  &&  p.getType()  >>  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.GETPROP  &&  p.getType()  >>  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.GETPROP  &&  p.getType()  >>  Token.FUNCTION)  {  return  false;  }	  if(p.getType()!=    Token.GETPROP    ||    p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
843	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	187	None	replace
844	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	187	None	replace
845	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	187	None	replace
846	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  expressionRoot);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  expressionRoot);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  expressionRoot);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    cur);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
847	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(cur)||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  NodeUtil.isFunctionDeclaration(cur)||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	NodeUtil.isFunctionDeclaration(cur)||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	179	None	replace
848	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(cur)&&  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  NodeUtil.isFunctionDeclaration(cur)&&  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	NodeUtil.isFunctionDeclaration(cur)&&  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	179	None	replace
849	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)return  false;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)return  false;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)return  false;	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)return    false;    }    	non-compiled	[CE]  <identifier>  expected	200	None	replace
850	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)&&  expressionRoot.apply(predicate);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)&&  expressionRoot.apply(predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)&&  expressionRoot.apply(predicate);	  return(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION)&&    predicate.apply(predicate);    	non-compiled	[CE]  <identifier>  expected	188	None	replace
851	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.NAME)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.NAME)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.NAME)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	152	None	replace
852	[BUG]  [BUGGY]  Context.checkState(p.getType()  >=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()  >=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()  >=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }	  Context.checkState(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
853	[BUG]  [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()  >=  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()  >=  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()  >=  Token.BLOCK)  {  return  false;  }	  Context.checkState(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
854	[BUG]  [BUGGY]  Node  c  =  predicate.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  predicate.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  predicate.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    predicate);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
855	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	156	None	replace
856	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	156	None	replace
857	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
858	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  cur.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  cur.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  cur.getNext())  {  NodeUtil.removeChild(cur,  c);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
859	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.hasChildren())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
860	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  predicate.hasChildren())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  predicate.hasChildren())  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  predicate.hasChildren())  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.hasChildren())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
861	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FOR  &&  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FOR  &&  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FOR  &&  n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
862	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  predicate)&&!predicate.removeFirstChild();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  predicate)&&!predicate.removeFirstChild();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  predicate)&&!predicate.removeFirstChild();	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.removeFirstChild();    	non-compiled	[CE]  <identifier>  expected	165	None	replace
863	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.NAME)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
864	[BUG]  [BUGGY]  if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	171	None	replace
865	[BUG]  [BUGGY]  if(predicate.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
866	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
867	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  >=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  >=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()  >=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()!=    Token.NAME    ||    p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	151	None	replace
868	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
869	[BUG]  [BUGGY]  return  checkLeftOf(p,  expressionRoot,  predicate);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return  checkLeftOf(p,  expressionRoot,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return  checkLeftOf(p,  expressionRoot,  predicate);	  return    checkLeftOf(n,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	195	None	replace
870	[BUG]  [BUGGY]  return  checkLeftOf(n,  predicate,  expressionRoot);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return  checkLeftOf(n,  predicate,  expressionRoot);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return  checkLeftOf(n,  predicate,  expressionRoot);	  return    checkLeftOf(n,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	195	None	replace
871	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  >>  Token.NAME);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  >>  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  >>  Token.NAME);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
872	[BUG]  [BUGGY]  &&  p.getType()!=  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  &&  p.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	&&  p.getType()!=  Token.NAME)  {  return  false;  }	  ||    p.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
873	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
874	[BUG]  [BUGGY]  if(cur.getType()!=  Token.CALL  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.CALL  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.CALL  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
875	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)  {  return  true;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
876	[BUG]  [BUGGY]  return!predicate.isLeftOf(n)&&!predicate.contains(n);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n)&&!predicate.contains(n);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n)&&!predicate.contains(n);	  return!predicate.isLeftOf(cur)&&!predicate.contains(cur);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
877	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	199	None	replace
878	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.BLOCK)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.BLOCK)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.BLOCK)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	199	None	replace
879	[BUG]  [BUGGY]  Predicate  predicate  =  predicate.getType();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Predicate  predicate  =  predicate.getType();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Predicate  predicate  =  predicate.getType();	  if(predicate.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
880	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.NAME)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()  ==  Token.NAME)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()  ==  Token.NAME)  {  return  true;  }	  if(predicate.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
881	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(predicate.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
882	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(predicate.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
883	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.CALL)  {  return  false;  }	  if(predicate.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
884	[BUG]  [BUGGY]  if(predicate.getType()!=  Token.NAME  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()!=  Token.NAME  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()!=  Token.NAME  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(predicate.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
885	[BUG]  [BUGGY]  if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.NAME)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
886	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
887	[BUG]  [BUGGY]  if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.VAR)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
888	[BUG]  [BUGGY]  return(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
889	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  >>  Token.VAR);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  >>  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  >>  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
890	[BUG]  [BUGGY]  if(p.getType()!=  Token.EXPR_RESULT  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.EXPR_RESULT  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.EXPR_RESULT  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
891	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
892	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.FUNCTION)  {  return  true;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
893	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.contains(n);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.contains(n);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  defMetadata.contains(n);	  if(!defMetadata.contains(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	205	None	replace
894	[BUG]  [BUGGY]  Preconditions.checkState(!defMetadata.contains(n));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Preconditions.checkState(!defMetadata.contains(n));  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Preconditions.checkState(!defMetadata.contains(n));	  if(!defMetadata.contains(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	205	None	replace
895	[BUG]  [BUGGY]  DefinedDependency  mapping  =  defMetadata.get(n);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  mapping  =  defMetadata.get(n);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  mapping  =  defMetadata.get(n);	  if(!defMetadata.contains(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	205	None	replace
896	[BUG]  [BUGGY]  DefinedDependency  mapping  =  defMetadata.contains(n);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  mapping  =  defMetadata.contains(n);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  mapping  =  defMetadata.contains(n);	  if(!defMetadata.contains(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	205	None	replace
897	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.GETPROP)  {  return  true;  }	  if(n.getType()    ==    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
898	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  if(n.getType()    ==    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
899	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION)  {  return  true;  }	  if(n.getType()    ==    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
900	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR)  {  return  true;  }	  if(n.getType()    ==    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
901	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)  {  return  true;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
902	[BUG]  [BUGGY]  &&  p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  &&  p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	&&  p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()    ==    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
903	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  &&  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  &&  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  &&  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
904	[BUG]  [BUGGY]  Definition  def  =  defMetadata.get(predicate);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  defMetadata.get(predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  defMetadata.get(predicate);	  Definition    def    =    defMetadata.get(cur);    	non-compiled	[CE]  <identifier>  expected	206	None	replace
905	[BUG]  [BUGGY]  Definition  def  =  defMetadata.remove(def);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  defMetadata.remove(def);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  defMetadata.remove(def);	  Definition    def    =    defMetadata.get(cur);    	non-compiled	[CE]  <identifier>  expected	206	None	replace
906	[BUG]  [BUGGY]  Definition  def  =  defMetadata.get(def);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  defMetadata.get(def);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  defMetadata.get(def);	  Definition    def    =    defMetadata.get(cur);    	non-compiled	[CE]  <identifier>  expected	206	None	replace
907	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.VAR)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
908	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.CALL)  {  return  true;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
909	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.get(defRoot);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.get(defRoot);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  defMetadata.get(defRoot);	  DefinedDependency    reachingUses    =    defMetadata.get(cur);    	non-compiled	[CE]  <identifier>  expected	136	None	replace
910	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.remove(predicate);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.remove(predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  defMetadata.remove(predicate);	  DefinedDependency    reachingUses    =    defMetadata.get(cur);    	non-compiled	[CE]  <identifier>  expected	136	None	replace
911	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.remove(p);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.remove(p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  defMetadata.remove(p);	  DefinedDependency    reachingUses    =    defMetadata.get(cur);    	non-compiled	[CE]  <identifier>  expected	136	None	replace
912	[BUG]  [BUGGY]  return(predicate.getType()  ==  Token.FUNCTION  &&  predicate.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()  ==  Token.FUNCTION  &&  predicate.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()  ==  Token.FUNCTION  &&  predicate.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
913	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
914	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR,  predicate);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR,  predicate);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR,    predicate);    	non-compiled	[CE]  <identifier>  expected	177	None	replace
915	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
916	[BUG]  [BUGGY]  if(cur.getType()!=  Token.GETPROP  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.GETPROP  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.GETPROP  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
917	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);	  return(n.getType()    ==    Token.NAME    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
918	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
919	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
920	[BUG]  [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	181	None	replace
921	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  if(cur.getType()    ==    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
922	[BUG]  [BUGGY]  return(predicate.getType()!=  Token.NAME  &&  predicate.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()!=  Token.NAME  &&  predicate.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()!=  Token.NAME  &&  predicate.getType()  ==  Token.VAR);	  return(n.getType()!=    Token.NAME    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
923	[BUG]  [BUGGY]  return(p.getType()!=  Token.NAME  &&  p.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()!=  Token.NAME  &&  p.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()!=  Token.NAME  &&  p.getType()  ==  Token.VAR);	  return(n.getType()!=    Token.NAME    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
924	[BUG]  [BUGGY]  return!predicate.isLeftOf(n)||!predicate.contains(n);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n)||!predicate.contains(n);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n)||!predicate.contains(n);	  return!predicate.isLeftOf(cur)||!predicate.contains(cur);    	non-compiled	[CE]  <identifier>  expected	120	None	replace
925	[BUG]  [BUGGY]  return!predicate.isLeftOf(p)||!predicate.contains(p);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(p)||!predicate.contains(p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(p)||!predicate.contains(p);	  return!predicate.isLeftOf(cur)||!predicate.contains(cur);    	non-compiled	[CE]  <identifier>  expected	120	None	replace
926	[BUG]  [BUGGY]  return!predicate.isLeftOf(cur)||!predicate.contains(p);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(cur)||!predicate.contains(p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(cur)||!predicate.contains(p);	  return!predicate.isLeftOf(cur)||!predicate.contains(cur);    	non-compiled	[CE]  <identifier>  expected	120	None	replace
927	[BUG]  [BUGGY]  parent  ==  if(p.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  if(p.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  if(p.getType()  ==  Token.FUNCTION)  {  return  true;  }	  parent    ==    if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
928	[BUG]  [BUGGY]  parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  parent    ==    if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
929	[BUG]  [BUGGY]  parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }	  parent    ==    if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
930	[BUG]  [BUGGY]  parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  parent    ==    if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
931	[BUG]  [BUGGY]  if(p.getType()  ==  Token.EMPTY  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.EMPTY  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.EMPTY  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    &&    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
932	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.    	non-compiled	[CE]  <identifier>  expected	164	None	replace
933	[BUG]  [BUGGY]  if(p.getType()!=  Token.EMPTY  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.EMPTY  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.EMPTY  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.EMPTY    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	202	None	replace
934	[BUG]  [BUGGY]  if(p.getType()  ==  Token.EMPTY  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.EMPTY  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.EMPTY  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }	  if(p.getType()    ==    Token.EMPTY    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	202	None	replace
935	[BUG]  [BUGGY]  if(p.getType()  ==  Token.EMPTY  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.EMPTY  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.EMPTY  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }	  if(p.getType()    ==    Token.EMPTY    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	202	None	replace
936	[BUG]  [BUGGY]  &&  cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  &&  cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	&&  cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
937	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
938	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)return  false;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)return  false;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)return  false;	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)return    false;    }    	non-compiled	[CE]  <identifier>  expected	169	None	replace
939	[BUG]  [BUGGY]  if(p.getType()  ==  Token.GETELEM  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.GETELEM  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.GETELEM  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.GETPROP    ||    p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
940	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.EMPTY)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.EMPTY)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()  ==  Token.EMPTY)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.EMPTY)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
941	[BUG]  [BUGGY]  if(cur.getType()!=  Token.EMPTY  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.EMPTY  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.EMPTY  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.EMPTY)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
942	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.EMPTY  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.EMPTY  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.EMPTY  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.EMPTY)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
943	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	184	None	replace
944	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  <identifier>  expected	197	None	replace
945	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.VAR);	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  <identifier>  expected	197	None	replace
946	[BUG]  [BUGGY]  return(predicate.getType()!=  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()!=  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()!=  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
947	[BUG]  [BUGGY]  return(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
948	[BUG]  [BUGGY]  Preconditions.checkState(defMetadata.contains(p));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Preconditions.checkState(defMetadata.contains(p));  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Preconditions.checkState(defMetadata.contains(p));	  Preconditions.checkState(!defMetadata.contains(cur));    	non-compiled	[CE]  <identifier>  expected	133	None	replace
949	[BUG]  [BUGGY]  Preconditions.checkState(!predicate.contains(cur));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Preconditions.checkState(!predicate.contains(cur));  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Preconditions.checkState(!predicate.contains(cur));	  Preconditions.checkState(!defMetadata.contains(cur));    	non-compiled	[CE]  <identifier>  expected	133	None	replace
950	[BUG]  [BUGGY]  p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.NAME)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.NAME)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.NAME)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	207	None	replace
951	[BUG]  [BUGGY]  ||  predicate.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  predicate.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  predicate.getType()!=  Token.FUNCTION)  {  return  false;  }	  ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
952	[BUG]  [BUGGY]  &&  p.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  &&  p.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	&&  p.getType()!=  Token.VAR)  {  return  false;  }	  ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
953	[BUG]  [BUGGY]  return(predicate.getType()!=  Token.FUNCTION  ||  predicate.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()!=  Token.FUNCTION  ||  predicate.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()!=  Token.FUNCTION  ||  predicate.getType()  ==  Token.NAME);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
954	[BUG]  [BUGGY]  return(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.NAME);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
955	[BUG]  [BUGGY]  if(p.getType()!=  Token.FOR  &&  p.getType()!=  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FOR  &&  p.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FOR  &&  p.getType()!=  Token.NAME)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    &&    p.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
956	[BUG]  [BUGGY]  return(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  return(n.getType()!=    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
957	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR)&&  n.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR)&&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.VAR)&&  n.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	154	None	replace
958	[BUG]  [BUGGY]  else  if(n.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(n.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(n.getType()!=  Token.FUNCTION)  {  return  false;  }	  else    if(p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	190	None	replace
959	[BUG]  [BUGGY]  if(predicate.isEmpty())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.isEmpty())  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.isEmpty())  {  return  false;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
960	[BUG]  [BUGGY]  if(!predicate.isEmpty()  ||!predicate.isEmpty())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(!predicate.isEmpty()  ||!predicate.isEmpty())  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(!predicate.isEmpty()  ||!predicate.isEmpty())  {  return  false;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
961	[BUG]  [BUGGY]  if(!predicate.isEmpty()  ||  predicate.equals(expressionRoot))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(!predicate.isEmpty()  ||  predicate.equals(expressionRoot))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(!predicate.isEmpty()  ||  predicate.equals(expressionRoot))  {  return  false;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
962	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.VAR  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.VAR  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.VAR  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
963	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
964	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  p.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME)&&  p.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME)&&  p.getType()  ==  Token.VAR;	  return(n.getType()    ==    Token.NAME)&&    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
965	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getFirstChild()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getFirstChild()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME)&&  n.getFirstChild()  ==  Token.VAR;	  return(n.getType()    ==    Token.NAME)&&    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
966	[BUG]  [BUGGY]  return(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
967	[BUG]  [BUGGY]  Definition  def  =  cfgNode.contains(def);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  cfgNode.contains(def);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  cfgNode.contains(def);	  Definition    def    =    defMetadata.contains(cur);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
968	[BUG]  [BUGGY]  Definition  def  =  predicate.contains(def);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  predicate.contains(def);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  predicate.contains(def);	  Definition    def    =    defMetadata.contains(cur);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
969	[BUG]  [BUGGY]  Definition  def  =  cfgNodes.contains(def);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  cfgNodes.contains(def);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  cfgNodes.contains(def);	  Definition    def    =    defMetadata.contains(cur);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
970	[BUG]  [BUGGY]  else  if(predicate.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
971	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
972	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR  &&  n.getType()  >>  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR  &&  n.getType()  >>  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.VAR  &&  n.getType()  >>  Token.FUNCTION);	  return(n.getType()    ==    Token.VAR    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
973	[BUG]  [BUGGY]  if(p.getType()!=  Token.FOR  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FOR  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FOR  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    &&    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
974	[BUG]  [BUGGY]  if(p.getType()!=  Token.EXPR_RESULT  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.EXPR_RESULT  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.EXPR_RESULT  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    &&    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
975	[BUG]  [BUGGY]  if(p.getType()!=  Token.EMPTY  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.EMPTY  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.EMPTY  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    &&    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
976	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.apply(n))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.apply(n))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  predicate.apply(n))  {  return  true;  }	  else    if(p.getType()!=    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
977	[BUG]  [BUGGY]  return(n.getType()!=  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.VAR  ||  n.getType()!=  Token.FUNCTION);	  return(n.getType()    ==    Token.VAR    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
978	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR)&&  n.getType()!=  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR)&&  n.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.VAR)&&  n.getType()!=  Token.FUNCTION);	  return(n.getType()    ==    Token.VAR    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
979	[BUG]  [BUGGY]  if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.VAR)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	182	None	replace
980	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    cur);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
981	[BUG]  [BUGGY]  if(p.getType()!=  Token.VAR  ||  p.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.VAR  ||  p.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.VAR  ||  p.getType()  ==  Token.NAME)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
982	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.CALL)return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.CALL)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.CALL)return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	194	None	replace
983	[BUG]  [BUGGY]  Predicate  <  Node>  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Predicate  <  Node>  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Predicate  <  Node>  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  predicate);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    predicate);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
984	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.CALL)return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.CALL)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.CALL)return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
985	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
986	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.hasChildren())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
987	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.VAR)return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.VAR)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.VAR)return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
988	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
989	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  cur.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  cur.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  cur.getNext())  {  NodeUtil.removeChild(cur,  c);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
990	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
991	[BUG]  [BUGGY]  return  predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(cur));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return  predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(cur));  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return  predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(cur));	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(cur));    	non-compiled	[CE]  <identifier>  expected	167	None	replace
992	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isRightOf(cur));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isRightOf(cur));  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isRightOf(cur));	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(cur));    	non-compiled	[CE]  <identifier>  expected	167	None	replace
993	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getChildCount()  >  1)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getChildCount()  >  1)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getChildCount()  >  1)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
994	[BUG]  [BUGGY]  ||  predicate.getType()  ==  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  predicate.getType()  ==  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  predicate.getType()  ==  Token.GETPROP)  {  return  true;  }	  ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
995	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()  ==  Token.NAME  ||  predicate.getType()!=  Token.VAR)  {  return  false;  }	  if(predicate.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	159	None	replace
996	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
997	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
998	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FOR  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FOR  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FOR  ||  p.getType()  ==  Token.CALL)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	192	None	replace
999	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  n.getChildCount()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  n.getChildCount()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.FUNCTION  ||  n.getChildCount()!=  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	175	None	replace
1000	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FOR  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FOR  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FOR  &&  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    &&    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
1001	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)return  false;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)return  false;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)return  false;	  if(p.getType()    ==    Token.FUNCTION    &&    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
1002	[BUG]  [BUGGY]  if(defMetadata.contains(n))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(defMetadata.contains(n))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(defMetadata.contains(n))  {  return  true;  }	  if(!defMetadata.contains(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	205	None	replace
1003	[BUG]  [BUGGY]  if(!defMetadata.contains(n)||  defRoot  ==  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(!defMetadata.contains(n)||  defRoot  ==  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(!defMetadata.contains(n)||  defRoot  ==  null)  {  return  false;  }	  if(!defMetadata.contains(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	205	None	replace
1004	[BUG]  [BUGGY]  if(!defMetadata.contains(n)||  defRoot!=  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(!defMetadata.contains(n)||  defRoot!=  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(!defMetadata.contains(n)||  defRoot!=  null)  {  return  false;  }	  if(!defMetadata.contains(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	205	None	replace
1005	[BUG]  [BUGGY]  if(defMetadata.contains(n))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(defMetadata.contains(n))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(defMetadata.contains(n))  {  return  false;  }	  if(!defMetadata.contains(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	205	None	replace
1006	[BUG]  [BUGGY]  if(p.getType()  ==  Token.EMPTY  ||  p.getType()  ==  Token.GETPROP)return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.EMPTY  ||  p.getType()  ==  Token.GETPROP)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.EMPTY  ||  p.getType()  ==  Token.GETPROP)return  false;  }	  if(p.getType()    ==    Token.EMPTY    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	202	None	replace
1007	[BUG]  [BUGGY]  if(p.getType()  ==  Token.EMPTY  ||  p.getType()!=  Token.GETPROP)return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.EMPTY  ||  p.getType()!=  Token.GETPROP)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.EMPTY  ||  p.getType()!=  Token.GETPROP)return  false;  }	  if(p.getType()    ==    Token.EMPTY    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	202	None	replace
1008	[BUG]  [BUGGY]  n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
1009	[BUG]  [BUGGY]  n.getType()!=  Token.NAME  ||  n.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  n.getType()!=  Token.NAME  ||  n.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	n.getType()!=  Token.NAME  ||  n.getType()!=  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
1010	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getFirstChild()  ==  null);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getFirstChild()  ==  null);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME)&&  n.getFirstChild()  ==  null);	  return(n.getType()    ==    Token.NAME)&&    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
1011	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getFirstChild()!=  null);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getFirstChild()!=  null);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME)&&  n.getFirstChild()!=  null);	  return(n.getType()    ==    Token.NAME)&&    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
1012	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)return    false;    }    	non-compiled	[CE]  <identifier>  expected	200	None	replace
1013	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)return    false;    }    	non-compiled	[CE]  <identifier>  expected	200	None	replace
1014	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)return  true;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)return  true;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)return  true;	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)return    false;    }    	non-compiled	[CE]  <identifier>  expected	200	None	replace
1015	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
1016	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
1017	[BUG]  [BUGGY]  if(defMetadata!=  null  &&!defMetadata.contains(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(defMetadata!=  null  &&!defMetadata.contains(cur))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(defMetadata!=  null  &&!defMetadata.contains(cur))  {  return  true;  }	  if(defMetadata!=    null    &&!defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	203	None	replace
1018	[BUG]  [BUGGY]  if(defMetadata  ==  null  ||!defMetadata.contains(cur))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(defMetadata  ==  null  ||!defMetadata.contains(cur))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(defMetadata  ==  null  ||!defMetadata.contains(cur))  {  return  false;  }	  if(defMetadata!=    null    &&!defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	203	None	replace
1019	[BUG]  [BUGGY]  if(defMetadata!=  null  &&!defMetadata.contains(p))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(defMetadata!=  null  &&!defMetadata.contains(p))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(defMetadata!=  null  &&!defMetadata.contains(p))  {  return  false;  }	  if(defMetadata!=    null    &&!defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	203	None	replace
1020	[BUG]  [BUGGY]  if(defMetadata!=  null  &&  defMetadata.contains(cur))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(defMetadata!=  null  &&  defMetadata.contains(cur))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(defMetadata!=  null  &&  defMetadata.contains(cur))  {  return  false;  }	  if(defMetadata!=    null    &&!defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	203	None	replace
1021	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
1022	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.CALL)return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.CALL)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.CALL)return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	186	None	replace
1023	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)return    false;    }    	non-compiled	[CE]  <identifier>  expected	169	None	replace
1024	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)return  true;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)return  true;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)return  true;	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)return    false;    }    	non-compiled	[CE]  <identifier>  expected	169	None	replace
1025	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
1026	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
1027	[BUG]  [BUGGY]  return(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.FUNCTION);	  return(n.getType()!=    Token.FUNCTION    ||    n.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	174	None	replace
1028	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR,  expressionRoot);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR,  expressionRoot);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR,  expressionRoot);	  return(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR,    predicate);    	non-compiled	[CE]  <identifier>  expected	176	None	replace
1029	[BUG]  [BUGGY]  defMetadata.add(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  defMetadata.add(cur))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	defMetadata.add(cur))  {  return  true;  }	  defMetadata.contains(cur))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
1030	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  return(n.getType()    ==    Token.NAME    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
1031	[BUG]  [BUGGY]  return(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
1032	[BUG]  [BUGGY]  return(predicate.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
1033	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
1034	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
1035	[BUG]  [BUGGY]  if(p.getType()!=  Token.BLOCK  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.BLOCK  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.BLOCK  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	198	None	replace
1036	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
1037	[BUG]  [BUGGY]  n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
1038	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.VAR)return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.VAR)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.VAR)return  false;  }	  if(p.getType()!=    Token.NAME    ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
1039	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.VAR)return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.VAR)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.VAR)return  false;  }	  if(p.getType()!=    Token.NAME    ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
1040	[BUG]  [BUGGY]  return  checkLeftOf(n,  expressionRoot,  Predicate  <  SIDE_EFFECT_PREDICATE);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return  checkLeftOf(n,  expressionRoot,  Predicate  <  SIDE_EFFECT_PREDICATE);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return  checkLeftOf(n,  expressionRoot,  Predicate  <  SIDE_EFFECT_PREDICATE);	  return    checkLeftOf(n,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	195	None	replace
1041	[BUG]  [BUGGY]  return  checkLeftOf(n,  expressionRoot,  Predicate.  <  Node>empty());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return  checkLeftOf(n,  expressionRoot,  Predicate.  <  Node>empty());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return  checkLeftOf(n,  expressionRoot,  Predicate.  <  Node>empty());	  return    checkLeftOf(n,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	195	None	replace
1042	[BUG]  [BUGGY]  return  checkLeftOf(n,  expressionRoot,  Predicate.  <  Node>  cur);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return  checkLeftOf(n,  expressionRoot,  Predicate.  <  Node>  cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return  checkLeftOf(n,  expressionRoot,  Predicate.  <  Node>  cur);	  return    checkLeftOf(n,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	195	None	replace
1043	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.apply(n))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  predicate.apply(n))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  predicate.apply(n))  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.apply(n))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	191	None	replace
1044	[BUG]  [BUGGY]  Definition  def  =  defMetadata.get(defRoot);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  defMetadata.get(defRoot);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  defMetadata.get(defRoot);	  Definition    def    =    defMetadata.get(cur);    	non-compiled	[CE]  <identifier>  expected	206	None	replace
1045	[BUG]  [BUGGY]  return(predicate.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
1046	[BUG]  [BUGGY]  return(p.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
1047	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.GETPROP)return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.GETPROP)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.GETPROP)return  false;  }	  if(p.getType()!=    Token.NAME    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
1048	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.GETPROP)return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.GETPROP)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.GETPROP)return  false;  }	  if(p.getType()!=    Token.NAME    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
1049	[BUG]  [BUGGY]  if(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()  ==  Token.GETPROP)return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()  ==  Token.GETPROP)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.EXPR_RESULT  ||  p.getType()  ==  Token.GETPROP)return  false;  }	  if(p.getType()    ==    Token.EXPR_RESULT    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
1050	[BUG]  [BUGGY]  parent  ==  cur.getType()  ||  cur.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  cur.getType()  ||  cur.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  cur.getType()  ||  cur.getType()!=  Token.FUNCTION)  {  return  true;  }	  parent    ==    cur.getType()    ||    cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
1051	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FOR  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FOR  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FOR  &&  p.getType()!=  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    &&    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
1052	[BUG]  [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    &&    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
1053	[BUG]  [BUGGY]  ||  predicate.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  predicate.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  predicate.getType()!=  Token.GETPROP)  {  return  true;  }	  ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
1054	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  true;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  return  true;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
1055	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  cur.getNext())  {  NodeUtil.removeChild(cur,  c);  return  true;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  cur.getNext())  {  NodeUtil.removeChild(cur,  c);  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  cur.getNext())  {  NodeUtil.removeChild(cur,  c);  return  true;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
1056	[BUG]  [BUGGY]  if(p.getType()!=  Token.VAR  ||  p.getType()!=  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.VAR  ||  p.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.VAR  ||  p.getType()!=  Token.NAME)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
1057	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.EMPTY)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.EMPTY)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.EMPTY)  {  return  true;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.EMPTY)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
1058	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EMPTY)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EMPTY)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EMPTY)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.EMPTY)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
1059	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
1060	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)||!predicate.remove  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)||!predicate.remove  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)||!predicate.remove	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.remove    	non-compiled	[CE]  <identifier>  expected	166	None	replace
1061	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)return  false;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)return  false;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)return  false;	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
1062	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)return  false;  }	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
1063	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.FUNCTION)  {  return  true;  }	  if(cur.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	179	None	replace
1064	[BUG]  [BUGGY]  if(p.getType()!=  Token.BLOCK  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.BLOCK  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.BLOCK  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
1065	[BUG]  [BUGGY]  ||  predicate.getType()!=  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  predicate.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  predicate.getType()!=  Token.VAR)  {  return  true;  }	  ||    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
1066	[BUG]  [BUGGY]  ||  predicate.getType()!=  Token.NAME)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  predicate.getType()!=  Token.NAME)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  predicate.getType()!=  Token.NAME)  {  return  true;  }	  ||    p.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
1067	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.add(def);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.add(def);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  defMetadata.add(def);	  DefinedDependency    reachingUses    =    defMetadata.contains(def);    	non-compiled	[CE]  <identifier>  expected	135	None	replace
1068	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION)&&  predicate.apply(predicate);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION)&&  predicate.apply(predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION)&&  predicate.apply(predicate);	  return(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	154	None	replace
1069	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR  ||  predicate.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR  ||  predicate.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.VAR  ||  predicate.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	154	None	replace
1070	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  predicate.hasChildren())return  false;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FUNCTION  ||  predicate.hasChildren())return  false;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FUNCTION  ||  predicate.hasChildren())return  false;	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.hasChildren())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
1071	[BUG]  [BUGGY]  return  predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.removeFirstChild();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return  predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.removeFirstChild();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return  predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.removeFirstChild();	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.removeFirstChild();    	non-compiled	[CE]  <identifier>  expected	165	None	replace
1072	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.GETPROP,  p);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.GETPROP,  p);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.GETPROP,  p);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
1073	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||!predicate.isEmpty())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||!predicate.isEmpty())  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  ||!predicate.isEmpty())  {  return  false;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
1074	[BUG]  [BUGGY]  if(!predicate.isEmpty()  ||  predicate.hasChildren())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(!predicate.isEmpty()  ||  predicate.hasChildren())  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(!predicate.isEmpty()  ||  predicate.hasChildren())  {  return  false;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
1075	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||!predicate.isEmpty())  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||!predicate.isEmpty())  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  ||!predicate.isEmpty())  {  return  true;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
1076	[BUG]  [BUGGY]  ||!predicate.isEmpty())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||!predicate.isEmpty())  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||!predicate.isEmpty())  {  return  false;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
1077	[BUG]  [BUGGY]  Definition  def  =  defMetadata.contains(defRoot);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  defMetadata.contains(defRoot);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  defMetadata.contains(defRoot);	  Definition    def    =    defMetadata.contains(cur);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
1078	[BUG]  [BUGGY]  Definition  def  =  defMetadata.add(def);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Definition  def  =  defMetadata.add(def);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Definition  def  =  defMetadata.add(def);	  Definition    def    =    defMetadata.contains(cur);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
1079	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  p);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  p);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.copyCurrentStructure(c,  p);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.copyCurrentStructure(c,    p);    }    	non-compiled	[CE]  <identifier>  expected	196	None	replace
1080	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    predicate.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
1081	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getChildCount()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  cur.getChildCount()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  cur.getChildCount()  ==  Token.NAME);	  return(cur.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
1082	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getFirstChild()  ==  null;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getFirstChild()  ==  null;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME)&&  n.getFirstChild()  ==  null;	  return(n.getType()    ==    Token.NAME)&&    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
1083	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getFirstChild()!=  null;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.NAME)&&  n.getFirstChild()!=  null;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.NAME)&&  n.getFirstChild()!=  null;	  return(n.getType()    ==    Token.NAME)&&    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
1084	[BUG]  [BUGGY]  return(n.getType()!=  Token.NAME)&&  n.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.NAME)&&  n.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.NAME)&&  n.getType()  ==  Token.VAR;	  return(n.getType()    ==    Token.NAME)&&    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
1085	[BUG]  [BUGGY]  else  if(p.getType()  >=  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  >=  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  >=  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
1086	[BUG]  [BUGGY]  if(p.getType()  >=  Token.GETPROP  &&  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  >=  Token.GETPROP  &&  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  >=  Token.GETPROP  &&  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(p.getType()!=    Token.GETPROP    ||    p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
1087	[BUG]  [BUGGY]  if(p.getType()  ==  Token.GETPROP  ||  p.getType()  ==  Token.FUNCTION)return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.GETPROP  ||  p.getType()  ==  Token.FUNCTION)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.GETPROP  ||  p.getType()  ==  Token.FUNCTION)return  false;  }	  if(p.getType()!=    Token.GETPROP    ||    p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
1088	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.CALL)return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.CALL)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()!=  Token.CALL)return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()!=    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
1089	[BUG]  [BUGGY]  return(predicate.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);	  return(n.getType()!=    Token.NAME    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
1090	[BUG]  [BUGGY]  return(p.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);	  return(n.getType()!=    Token.NAME    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
1091	[BUG]  [BUGGY]  if(p.getType()  >=  Token.GETPROP  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  >=  Token.GETPROP  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  >=  Token.GETPROP  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.GETPROP    ||    p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
1092	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.VAR)  {  return  true;  }	  if(n.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
1093	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.FUNCTION)  {  return  true;  }	  if(n.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
1094	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  if(n.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
1095	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.GETPROP)  {  return  true;  }	  if(n.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
1096	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.CALL)  {  return  true;  }	  if(n.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
1097	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.add(cur);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.add(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  defMetadata.add(cur);	  DefinedDependency    reachingUses    =    defMetadata.contains(cur);    	non-compiled	[CE]  <identifier>  expected	132	None	replace
1098	[BUG]  [BUGGY]  return(p.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    &&    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
1099	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.remove(0);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.remove(0);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  defMetadata.remove(0);	  DefinedDependency    reachingUses    =    defMetadata.get(cur);    	non-compiled	[CE]  <identifier>  expected	136	None	replace
1100	[BUG]  [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.clear();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  DefinedDependency  reachingUses  =  defMetadata.clear();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	DefinedDependency  reachingUses  =  defMetadata.clear();	  DefinedDependency    reachingUses    =    defMetadata.get(cur);    	non-compiled	[CE]  <identifier>  expected	136	None	replace
1101	[BUG]  [BUGGY]  parent  ==  null  ||  parent.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  null  ||  parent.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  null  ||  parent.getType()  ==  Token.FUNCTION)  {  return  false;  }	  parent    ==    if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
1102	[BUG]  [BUGGY]  parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent  ==  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  false;  }	  parent    ==    if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
1103	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(c))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(c))  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(c))  {  return  true;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    if(!predicate.apply(c))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
1104	[BUG]  [BUGGY]  Predicate  <  Node>  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(c))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Predicate  <  Node>  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(c))  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Predicate  <  Node>  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(c))  {  return  false;  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    if(!predicate.apply(c))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
1105	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(c))  {  return  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(c))  {  return  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  if(!predicate.apply(c))  {  return	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(c,    p);    if(!predicate.apply(c))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	128	None	replace
1106	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.VAR)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.VAR)  {  return  true;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	147	None	replace
1107	[BUG]  [BUGGY]  return(predicate.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()!=  Token.FUNCTION  ||  predicate.getType()!=  Token.NAME);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
1108	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)return  false;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()    ==    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
1109	[BUG]  [BUGGY]  if(p.getType()!=  Token.FOR  &&  p.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FOR  &&  p.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FOR  &&  p.getType()!=  Token.VAR)  {  return  false;  }	  if(p.getType()!=    Token.FUNCTION    &&    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
1110	[BUG]  [BUGGY]  n.getType()!=  Token.NAME  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  n.getType()!=  Token.NAME  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	n.getType()!=  Token.NAME  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    predicate.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	162	None	replace
1111	[BUG]  [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)return  false;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)return  false;  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Context.checkState(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK)return  false;	  Context.checkState(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
1112	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME,  predicate);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME,  predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME,  predicate);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME,    predicate);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
1113	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME,  expressionRoot);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME,  expressionRoot);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME,  expressionRoot);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME,    predicate);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
1114	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.VAR)  {  return  false;  }	  if(n.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	172	None	replace
1115	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(n.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	172	None	replace
1116	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.CALL)  {  return  false;  }	  if(n.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	172	None	replace
1117	[BUG]  [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	187	None	replace
1118	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
1119	[BUG]  [BUGGY]  parent!=  if(p.getType()!=  Token.GETPROP  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  parent!=  if(p.getType()!=  Token.GETPROP  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	parent!=  if(p.getType()!=  Token.GETPROP  &&  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()!=    Token.GETPROP    ||    p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
1120	[BUG]  [BUGGY]  ||  predicate.getType()!=  Token.BLOCK)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  ||  predicate.getType()!=  Token.BLOCK)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	||  predicate.getType()!=  Token.BLOCK)  {  return  true;  }	  ||    p.getType()!=    Token.BLOCK)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
1121	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.GETPROP)return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.GETPROP)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.GETPROP)return  false;  }	  if(p.getType()    ==    Token.NAME    ||    p.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
1122	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.GETPROP)return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.GETPROP)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.GETPROP)return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
1123	[BUG]  [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.mayHaveSideEffects();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.mayHaveSideEffects();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n,  expressionRoot)&&!predicate.isLeftOf(n,  expressionRoot)&&!predicate.mayHaveSideEffects();	  return!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)||!predicate.isLeftOf(n,    expressionRoot)&&!predicate.    	non-compiled	[CE]  <identifier>  expected	168	None	replace
1124	[BUG]  [BUGGY]  return!predicate.isLeftOf(n)&&!predicate.contains(cur);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(n)&&!predicate.contains(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(n)&&!predicate.contains(cur);	  return!predicate.isLeftOf(cur)&&!predicate.contains(cur);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
1125	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
1126	[BUG]  [BUGGY]  return!predicate.equals(cur)&&!predicate.contains(cur);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.equals(cur)&&!predicate.contains(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.equals(cur)&&!predicate.contains(cur);	  return!predicate.isLeftOf(cur)||!predicate.contains(cur);    	non-compiled	[CE]  <identifier>  expected	120	None	replace
1127	[BUG]  [BUGGY]  return!predicate.contains(cur)&&!predicate.contains(cur);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.contains(cur)&&!predicate.contains(cur);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.contains(cur)&&!predicate.contains(cur);	  return!predicate.isLeftOf(cur)||!predicate.contains(cur);    	non-compiled	[CE]  <identifier>  expected	120	None	replace
1128	[BUG]  [BUGGY]  return!predicate.isLeftOf(p)&&!predicate.isEmpty();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return!predicate.isLeftOf(p)&&!predicate.isEmpty();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return!predicate.isLeftOf(p)&&!predicate.isEmpty();	  return!predicate.isLeftOf(cur)&&!predicate.isEmpty();    	non-compiled	[CE]  <identifier>  expected	121	None	replace
1129	[BUG]  [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(cur.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(cur.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    cur.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
1130	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FOR  &&  p.getType()!=  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.FOR  &&  p.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.FOR  &&  p.getType()!=  Token.VAR)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    &&    p.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
1131	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return  true;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
1132	[BUG]  [BUGGY]  n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	173	None	replace
1133	[BUG]  [BUGGY]  for(Node  c  =  p.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  c);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  p.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  p.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(p,  c);  }	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(p,    c);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
1134	[BUG]  [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.NAME)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.NAME)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION    &&    p.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
1135	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION    ||    predicate.getType()    ==    Token.EXPR_RESULT)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
1136	[BUG]  [BUGGY]  return(p.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);	  return(n.getType()!=    Token.NAME    &&    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
1137	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CALL);  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CALL);  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	Preconditions.checkState(c.getType()  ==  Token.CALL);  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }	  for(Node    c    =    cur.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
1138	[BUG]  [BUGGY]  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(n,  c);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(n,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  cur.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(n,  c);  }	  for(Node    c    =    cur.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
1139	[BUG]  [BUGGY]  for(Node  c  =  cur.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  for(Node  c  =  cur.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	for(Node  c  =  cur.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }	  for(Node    c    =    cur.getFirstChild();    c!=    null;    c    =    c.getNext())    {    NodeUtil.removeChild(cur,    c);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
1140	[BUG]  [BUGGY]  return(predicate.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(predicate.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(predicate.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
1141	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(p.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(p.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
1142	[BUG]  [BUGGY]  return(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)&&  predicate.apply(predicate);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)&&  predicate.apply(predicate);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)&&  predicate.apply(predicate);	  return(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION)&&    predicate.apply(predicate);    	non-compiled	[CE]  <identifier>  expected	188	None	replace
1143	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  false;  }	  else    if(p.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	190	None	replace
1144	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
1145	[BUG]  [BUGGY]  if(p.getType()!=  Token.VAR  ||  p.getType()!=  Token.NAME)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.VAR  ||  p.getType()!=  Token.NAME)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.VAR  ||  p.getType()!=  Token.NAME)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	207	None	replace
1146	[BUG]  [BUGGY]  if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.NAME)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.NAME)  {  return  true;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(p.getType()!=  Token.FOR  ||  p.getType()!=  Token.NAME)  {  return  true;  }	  if(p.getType()!=    Token.FUNCTION    ||    p.getType()!=    Token.NAME)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	207	None	replace
1147	[BUG]  [BUGGY]  n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
1148	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	return(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);	  return(n.getType()    ==    Token.FUNCTION    &&    n.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
1149	[BUG]  [BUGGY]  n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
1150	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.GETPROP)return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }      [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.GETPROP)return  false;  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	if(cur.getType()!=  Token.NAME  ||  cur.getType()!=  Token.GETPROP)return  false;  }	  if(cur.getType()    ==    Token.NAME    ||    cur.getType()!=    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
