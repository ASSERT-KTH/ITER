bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(compiler,  t.getScopeRoot(),  cfg);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(compiler,  t.getScopeRoot(),  cfg);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(compiler,  t.getScopeRoot(),  cfg);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingContext);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingContext);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingContext);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  DEF_METADATA);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  DEF_METADATA);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  DEF_METADATA);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  candidates);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
9	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  candidate);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  candidate);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
10	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingNode);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
11	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
12	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDepth);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDepth);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDepth);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getLastChild());  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getLastChild());	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
15	[BUG]  [BUGGY]  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingDef.analyze();  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingDef.analyze();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
16	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeRoot();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  NodeUse  c  =  t.getScopeRoot();  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeRoot();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
17	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeRoot().getFirstChild();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  NodeUse  c  =  t.getScopeRoot().getFirstChild();  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeRoot().getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
19	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeRoot().getFirstChild();  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  NodeUse  c  =  t.getScopeRoot().getFirstChild();  reachingDef.analyze();  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeRoot().getFirstChild();  reachingDef.analyze();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
20	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  def);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  def);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
21	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler,  candidates);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
22	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  mappingNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  mappingNode);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
23	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  reachingDef);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
24	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  compiler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  compiler);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
25	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
26	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
27	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mapping);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mapping);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mapping);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
28	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mapping);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mapping);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mapping);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
31	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidate);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
32	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  candidates);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
34	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  candidate);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  candidate);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
35	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
36	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidates);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
37	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidate);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidate);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
38	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingConfig);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingConfig);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingConfig);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
39	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingContext);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingContext);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingContext);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
40	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
41	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidate);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidate);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
42	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  DEF_METADATA);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  DEF_METADATA);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  DEF_METADATA);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
43	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
44	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  contributingDef);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  contributingDef);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  contributingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
45	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
46	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidate);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidate);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
47	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
48	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
49	[BUG]  [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
50	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  numUseWithinUseCfgNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  numUseWithinUseCfgNode,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  numUseWithinUseCfgNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
51	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  candidates,  def);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  candidates,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
52	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  numUseWithinUseCfgNode);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
53	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  defMetadata,  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  defMetadata,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  defMetadata,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
54	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  def);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
55	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
56	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  def);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
57	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDef);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
58	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  def);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  def);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
59	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getLastChild(),  compiler);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getLastChild(),  compiler);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getLastChild(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
60	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getNext(),  compiler);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getNext(),  compiler);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getNext(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
61	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(cfg,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  NodeUtil.mayHaveSideEffects(cfg,  reachingDef);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.mayHaveSideEffects(cfg,  reachingDef);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingDef);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingDef);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot());  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot());	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
64	[BUG]  [BUGGY]  NodeUtil.removeChild(cfg,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  NodeUtil.removeChild(cfg,  reachingDef);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.removeChild(cfg,  reachingDef);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
65	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  def);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
66	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  def);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
67	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
68	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
69	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  workingDef);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  workingDef);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  workingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
70	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
71	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  def);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  def);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  def);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
72	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
73	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
74	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  def);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
75	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
76	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
77	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  approachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  approachingDef,  candidates);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  approachingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
78	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  null);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
79	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  reachingDef);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  reachingDef);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
80	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  null);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  null);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
81	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  def);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  def);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
82	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
83	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getRoot(),  compiler);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getRoot(),  compiler);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getRoot(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
84	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getConstructor(),  compiler);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getConstructor(),  compiler);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getConstructor(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
85	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
86	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  null);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
87	[BUG]  [BUGGY]  t.getScopeRoot().replaceChild(c,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  t.getScopeRoot().replaceChild(c,  reachingDef);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().replaceChild(c,  reachingDef);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
88	[BUG]  [BUGGY]  t.getScopeRoot().setLastChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  t.getScopeRoot().setLastChild();  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().setLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
89	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
90	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
91	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  reachingDef);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
92	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  null);  [BUGGY]    reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
