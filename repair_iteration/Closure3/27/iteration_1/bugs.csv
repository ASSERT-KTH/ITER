bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());    [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def);  [BUGGY]  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def);	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
2	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());    [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef);  [BUGGY]  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef);	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
3	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());    [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler);  [BUGGY]  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler);	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
4	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());    [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode);  [BUGGY]  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode);	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
5	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  candidates);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());    [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  candidates);  [BUGGY]  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  candidates);	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
6	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());    [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);  [BUGGY]  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
7	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError  [CONTEXT]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());    [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA);  [BUGGY]  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA);	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError  [CONTEXT]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());    [BUGGY]    [BUGGY]  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	  	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
9	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());    [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler);  [BUGGY]  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler);	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
10	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());    [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef);  [BUGGY]  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef);	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
11	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());    [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext);  [BUGGY]  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext);	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
